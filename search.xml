<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>修改键盘F9为Home键</title>
      <link href="/2025/10/22/changekey/"/>
      <url>/2025/10/22/changekey/</url>
      
        <content type="html"><![CDATA[<h2 id="修改键盘F9键功能-将其映射为HOME键"><a href="#修改键盘F9键功能-将其映射为HOME键" class="headerlink" title="修改键盘F9键功能,将其映射为HOME键"></a>修改键盘F9键功能,将其映射为HOME键</h2><blockquote><p>由于键盘是75键, 本身不具备HOME键, 但是日常和工作对HOME键还是挺有需要的(别问为什么不买全键的, 个人不太喜欢数字区, 对75键构造独钟)</p></blockquote><p>回归正题, 如何实现</p><p>我采用的是修改注册表方式</p><p>网上能搜到比较多方案, 除了注册表, 一般都需要下载额外软件, 键盘驱动或者是windows软件来将按键功能映射为其他</p><p>所以, 修改注册表, 省时省力</p><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><p>1.打开注册表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按下键盘上 win + r 并输入</span></span><br><span class="line">regidit</span><br></pre></td></tr></table></figure><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/regidit.png"></p><p>2.定位到按键修改路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout</span><br></pre></td></tr></table></figure><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/inregidit.png"></p><p>3.在右侧区域新建二进制值 -&gt; 命名为 Scancode Map, 并填入下列值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">02 00 00 00 47 E0 43 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/binaryvalue.png"></p><p>4.点击确定, 退出注册表, 重启电脑, 永久生效👍</p>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日早报】</title>
      <link href="/2025/10/22/%E3%80%90%E6%AF%8F%E6%97%A5%E6%97%A9%E6%8A%A5%E3%80%91/"/>
      <url>/2025/10/22/%E3%80%90%E6%AF%8F%E6%97%A5%E6%97%A9%E6%8A%A5%E3%80%91/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>每日早报</title></head><body>    <div style="text-align: center;"> <img src="https://file.alapi.cn/60s/202510221761074102.png"            alt="每日早报" width="100%"> </div></body></html>]]></content>
      
      
      <categories>
          
          <category> 每日早报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日早报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研常识</title>
      <link href="/2025/08/29/%E8%80%83%E7%A0%94%E5%B8%B8%E8%AF%86/"/>
      <url>/2025/08/29/%E8%80%83%E7%A0%94%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="考研常识"><a href="#考研常识" class="headerlink" title="考研常识"></a>考研常识</h1><blockquote><p>以26考研为例</p></blockquote><h3 id="一、什么是26考研"><a href="#一、什么是26考研" class="headerlink" title="一、什么是26考研"></a>一、什么是26考研</h3><p>2025年12月参加考研</p><p>2026年5&#x2F;6月录取，2026年9月硕士入学</p><h2 id="二、谁能参加26考研？有什么要求？"><a href="#二、谁能参加26考研？有什么要求？" class="headerlink" title="二、谁能参加26考研？有什么要求？"></a>二、谁能参加26考研？有什么要求？</h2><p>本科毕业生：在2026年9月1日之前取得本科毕业证书</p><p>考研对于四六级、本科绩点、科研成果是否有要求？</p><p>—— <strong>绝大多数院校无此要求</strong>。不过，部分院校的部分专业可能会对四六级有要求。</p><h2 id="三、学硕和专硕，全日制和非全日制，区别是什么？"><a href="#三、学硕和专硕，全日制和非全日制，区别是什么？" class="headerlink" title="三、学硕和专硕，全日制和非全日制，区别是什么？"></a>三、学硕和专硕，全日制和非全日制，区别是什么？</h2><p><strong>学硕</strong>的学习方式一般都是<strong>全日制</strong>的</p><p><strong>专硕</strong>的学习方式分为<strong>全日制</strong>和<strong>非全日制</strong>两种</p><table><thead><tr><th></th><th>全日制</th><th>非全日制</th></tr></thead><tbody><tr><td>学习时间安排</td><td>全天候在校学习，通常周一至周五学习时间较为集中</td><td>通常在工作日晚上&#x2F;周末上课，学习时间较为分散，适合在职人员</td></tr><tr><td>课程设置</td><td>课程设置更为紧凑<br>课程内容和学术要求通常更为严格</td><td>课程设置相对灵活<br>可能更侧重于实践和应用</td></tr><tr><td>学制</td><td>一般为2-3年</td><td>一般为2-3年</td></tr><tr><td><strong>招生对象</strong></td><td><strong>主要面向应届本科毕业生<br>或有志于从事学术研究的人员</strong></td><td><strong>主要面向在职人员<br>希望在工作的同时提升自己的学历和能力</strong></td></tr><tr><td><strong>学费和奖学金</strong></td><td><strong>学费可能较低<br>且有更多的奖学金和助学金机会</strong></td><td><strong>学费可能较高<br>奖学金和助学金的机会相对较少</strong></td></tr><tr><td>生活状态</td><td>更专注于学业，生活状态相对单一</td><td>需要平衡工作和学习，生活状态更为复杂</td></tr><tr><td>社会认可度</td><td>更受认可，尤其是在学术界</td><td><strong>更倾向于继续在原有行业或领域内发展</strong></td></tr></tbody></table><table><thead><tr><th></th><th>学硕</th><th>专硕</th></tr></thead><tbody><tr><td>读博方式不同</td><td>硕博连读；<br>申请-考核制，普通招考</td><td>申请-考核制，普通招考；<br>硕博连读（许多院校仅允许学硕申请）</td></tr><tr><td>培养目标不同</td><td>以学术研究为导向，偏重理论和研究</td><td>以专业实践为导向，重视实践和应用</td></tr><tr><td>报考条件不同</td><td>一般满足报名全国硕士研究生招生考试人员的基本条件即可</td><td>部分专业学位硕士有单独规定，如法律硕士、工商管理硕士等</td></tr><tr><td>学费标准不同</td><td>一般为8000元&#x2F;年</td><td>没有统一的标准，一般高于8000元&#x2F;年</td></tr><tr><td>学制不同</td><td>一般为3年</td><td>一般为2-3年</td></tr><tr><td>导师制度不同</td><td>一般为单导师制</td><td>一般为双导师制</td></tr><tr><td>毕业标准不同</td><td>毕业标准相对专硕来讲，往往更高</td><td>毕业标准相对学硕来讲，相对较低</td></tr><tr><td><strong>考试难度</strong></td><td><strong>考试科目一般为英语一等，考试难度、对数学要求相对较高</strong></td><td><strong>考试科目一般为英语二等，考试难度、对数学要求相对较低</strong></td></tr><tr><td>招生规模</td><td>招生规模相对较小，招生名额少</td><td>招生规模相对较大，招生名额多</td></tr></tbody></table><h2 id="一区-二区、国家线-自划线、校线-院线、单科线-总分线"><a href="#一区-二区、国家线-自划线、校线-院线、单科线-总分线" class="headerlink" title="一区&amp;二区、国家线&amp;自划线、校线&amp;院线、单科线&amp;总分线"></a>一区&amp;二区、国家线&amp;自划线、校线&amp;院线、单科线&amp;总分线</h2><blockquote><p>这四个概念都与 <strong>复试、调剂</strong> 有关</p></blockquote><h2 id="四、考研一区-二区？A类考生-B类考生？"><a href="#四、考研一区-二区？A类考生-B类考生？" class="headerlink" title="四、考研一区&amp;二区？A类考生&amp;B类考生？"></a>四、考研一区&amp;二区？A类考生&amp;B类考生？</h2><p>按照你的目标院校所在地区划分&gt;一区、二区。</p><p>**一区(A类考生)：**北京、天津河北、山西、辽宁、吉林、黑龙江、上海、江苏、浙江、安徽、福建、江西、山东、河南、湖北、湖南、广东、重庆、四川、陕西。<br>**二区(B类考生)：**内蒙古、广西、海南、贵州、云南、西藏、甘肃、青海、宁夏、新疆。</p><p>1、一区的国家线一般比二区的国家线高几分。与调剂相关。</p><p>2、一区的院校不是一定比二区的院校更难。</p><p>3、如果你报了一区院校，总成绩&#x2F;单科成绩没有超过一区分数线，但是过了二区国家线，你可以调剂到二区。</p><h2 id="五、水区-旱区？"><a href="#五、水区-旱区？" class="headerlink" title="五、水区&amp;旱区？"></a>五、水区&amp;旱区？</h2><p>和阅卷标准有关。主要是指公共课。<br>对一志愿复试影响小。所余非你的某科过于薄弱:影响过国家线。</p><p>水区 –&gt; 阅卷宽松 –&gt; 你的数相对高一点 –&gt; 调剂有优势</p><p>早区 –&gt; 阅卷严格 –&gt; 你的数相对低一点 –&gt; 调剂无优势</p><p><strong>公共课试卷</strong>：由目标院校所在省市考试院统一阅卷。(水区和旱区)</p><p><strong>专业课试卷</strong>：一般由目标院校研究生院进行阅卷。(是否压分)</p><table><thead><tr><th>程度</th><th>省&#x2F;市&#x2F;地区</th></tr></thead><tbody><tr><td>旱区</td><td>北京、上海、江苏</td></tr><tr><td>小旱区</td><td>山东、湖北、陕西、四川、广西</td></tr><tr><td>适中</td><td>福建、辽宁、浙江、山西、江西、湖南、河北、安徽、广东</td></tr><tr><td>小水区</td><td>重庆、内蒙古、天津、河南、新疆、黑龙江</td></tr><tr><td>水区</td><td>云南、青海、西藏、吉林、甘肃、宁夏、贵州、海南</td></tr></tbody></table><h2 id="六、国家线-自划线？单科线-总分线？"><a href="#六、国家线-自划线？单科线-总分线？" class="headerlink" title="六、国家线&amp;自划线？单科线&amp;总分线？"></a>六、国家线&amp;自划线？单科线&amp;总分线？</h2><p>**国家线（初试的“及格线”）**分为单科线和总分线，还分为一区线和二区线。<br>准确的说是：一区单科线、一区总分线、二区单科线、二区总分线。  </p><p><strong>自划线（34所自划线院校）</strong>：是经教育部批准的部分招生单位根据报考自己学校考生的情况和计划招生的人数来确定复试分数线，而不用参考国家统一划定的分数线。（注意：985院校共39所）  </p><p><strong>自划线与国家线，不是绝对的高低关系。</strong></p><p><a href="https://yz.chsi.com.cn/kyzx/kp/202403/20240312/2293269492.html">2024年全国硕士研究生招生考试考生进入复试的初试成绩基本要求</a></p><p><a href="https://yz.chsi.com.cn/kyzx/other/201308/20130829/500961397.html">进行自主确定复试分数线改革试点的高校名单（34所）</a></p><h2 id="七、校线-院线-专业线？"><a href="#七、校线-院线-专业线？" class="headerlink" title="七、校线&amp;院线&amp;专业线？"></a>七、校线&amp;院线&amp;专业线？</h2><p>也分为单科线、总分线。</p><p>**校线：**学校根据学科门类别定基本的复试线。</p><p>自划线即为34所各校的校线，非34所的校线一般为国家线。</p><p>**院线&amp;专业线：**各学院、各专业可以根据实际情况，在校线的基础上决定是否上调分数、上调多少分。</p><h2 id="八、压分是什么？歧视是什么？"><a href="#八、压分是什么？歧视是什么？" class="headerlink" title="八、压分是什么？歧视是什么？"></a>八、压分是什么？歧视是什么？</h2><p>**压分：**专业课阅卷严格，导致分数普遍较低。不利于调剂。</p><ul><li>**判定标准：**如果复试名单&#x2F;录取名单中，该专业课平均分低于110，有压分嫌疑。（以满分150分为例）特殊情况，专业课太难&#x2F;临时变更。</li></ul><p>**歧视：**复试面试打分，对本科一般的考生不友好；有意刷掉本科一般的考生，将录取名额释放给调剂考生。</p><p>判定方法1：咨询学长学姐，网上找经验贴。</p><p>判定方法2：参考录取名单中考生前五位代码，这个是考生的报考学校。看看其中一志愿考生、调剂考生所占比例。</p><h2 id="九、考研加分政策"><a href="#九、考研加分政策" class="headerlink" title="九、考研加分政策"></a>九、考研加分政策</h2><p>可以直接加在初试总分上的，一般是10分至15分不等。</p><p>大学生志愿服务西部计划、三支一扶计划、农村义务教育阶段学校教师特设岗位计划、赴外汉语教师志愿者、大学生应征入伍服现役退役符合条件的同学初试总分加10分，同等条件下优先录取。</p><h2 id="十、考研12个时间点是什么？"><a href="#十、考研12个时间点是什么？" class="headerlink" title="十、考研12个时间点是什么？"></a>十、考研12个时间点是什么？</h2><p>4月-10月：各院校专业课大纲（尤其要注意变动）</p><p>9月：公共课考研大纲</p><p><strong>9月下旬：预报名（主要面向应届生，非必须，记得缴费）</strong></p><p><strong>10月：正式报名（应届生往届生均可参加，可以修改，记得缴费）</strong></p><p><strong>10月底&#x2F;11月初：网上确认&#x2F;现场确认</strong></p><p>12月中旬：下载准考证（一般为考前一周）</p><p>12月下旬的某个周末：考研初试</p><p><strong>次年2月下旬：公布初试成绩</strong></p><p>次年3月：公布国家线、自划线，开始复试、调剂</p><p>次年4月&#x2F;5月：完成复试、调剂、录取等工作</p><p>次年6月-8月：录取通知书、调档等</p><p>次年9月：硕士入学</p><h2 id="十一、考研复试和考研调剂，是什么，考什么？"><a href="#十一、考研复试和考研调剂，是什么，考什么？" class="headerlink" title="十一、考研复试和考研调剂，是什么，考什么？"></a>十一、考研复试和考研调剂，是什么，考什么？</h2><p>**考研复试：**研究生招生考试的第二阶段，通常在初试（笔试）成绩公布后进行。主要目的是对初试成绩合格的考生进行进一步的考核，以确定最终的录取名单。</p><p>**考研调剂：**考生在初试成绩公布后，如果未能进入第一志愿院校的复试名单&#x2F;未通过复试，但成绩达到了国家线、院校的调剂线，可以申请调剂到其他院校或专业，然后参加该校的复试。</p><p>**复试的考查内容：**面试、笔试、实践能力测试、英语听说测试、心理测试、体检等。</p><p>**调剂的流程：**调剂院校选择、填写调剂系统、等待申请结果、调剂院校的复试。</p><h2 id="十二、考研初试具体考什么？"><a href="#十二、考研初试具体考什么？" class="headerlink" title="十二、考研初试具体考什么？"></a>十二、考研初试具体考什么？</h2><p><strong>公共课：政治、英语（外国语）、数学。</strong></p><p>统考。政治、英语（分为一二）为100分，数学（分为一二三）为150分。</p><p><strong>专业课：分为自命题、统考两种情况。一般为150分&#x2F;300分。</strong></p><p>管综：统考，200分。</p><h3 id="考研政治"><a href="#考研政治" class="headerlink" title="考研政治"></a>考研政治</h3><blockquote><p>重点准备选择题，选择题才是拉开分数的差距，12月才开始准备分析题</p></blockquote><p>题型：选择题（单选题+多选题）、分析题</p><p>分值：单选题1分<em>16，多选题2分</em>17，分析题10分*5</p><p>考查内容：马原、毛中特、新思想、史纲、思修、时政</p><h3 id="考研英语（分为英语一和英语二）"><a href="#考研英语（分为英语一和英语二）" class="headerlink" title="考研英语（分为英语一和英语二）"></a>考研英语（分为英语一和英语二）</h3><p>题型：完形、阅读、新题型、翻译、作文</p><p>分值：完形0.5分 * 20、<strong>阅读2分 * 20</strong>、新题型2分*5、翻译（英一10分，英二15分）、<strong>作文（英一30分，英二25分）</strong></p><p><strong>重点内容：阅读+作文</strong></p><h3 id="考研数学（分为数一、数二、数三）"><a href="#考研数学（分为数一、数二、数三）" class="headerlink" title="考研数学（分为数一、数二、数三）"></a>考研数学（分为数一、数二、数三）</h3><p>题型：选择题、填空题、大题</p><p>分值：选择题50分、填空题30分、大题70分</p><p>考察内容：<strong>高数</strong>、线代、概率论与数理统计</p><p>注：数二不考“概率论与数理统计”</p><h3 id="考研专业课"><a href="#考研专业课" class="headerlink" title="考研专业课"></a>考研专业课</h3><p>各校各专业，情况不一样。</p><p>在目标研究生院官网查看考试大纲，再结合历年真题。</p><h2 id="十三、初试各科资料推荐、老师推荐"><a href="#十三、初试各科资料推荐、老师推荐" class="headerlink" title="十三、初试各科资料推荐、老师推荐"></a>十三、初试各科资料推荐、老师推荐</h2><h3 id="考研政治-1"><a href="#考研政治-1" class="headerlink" title="考研政治"></a>考研政治</h3><p>课程：<strong>徐涛强化班</strong>+腿姐技巧班</p><p>听课必备：徐涛《核心考案》&#x2F;考研斯基笔记。</p><p>习题册：推荐**《肖1000》**。</p><p>冲刺阶段：《背诵手册》+《肖8》+《肖4》+其他模拟卷。</p><h3 id="考研英语"><a href="#考研英语" class="headerlink" title="考研英语"></a>考研英语</h3><p>单词书：《红宝书》&#x2F;王江涛《十天搞定考研词汇》。墨墨背单词等App。</p><p>语法长难句：田静《句句真研》。</p><p>真题：基础好《黄皮书》、基础一般《考研真相》。</p><p>阅读唐迟&#x2F;颉斌斌，大作文潘赟，小作文石雷鹏。</p><p>新题型刘琦，翻译唐静，完形易熙人&#x2F;宋逸轩。</p><h3 id="考研数学"><a href="#考研数学" class="headerlink" title="考研数学"></a>考研数学</h3><p>高数部分 武忠祥（基础一般）&#x2F;张宇（基础较好）</p><p>线代 李永乐&#x2F;张宇&#x2F;方浩</p><p>概率论 张宇&#x2F;余丙森&#x2F;方浩</p><p>基础阶段全书：张宇《基础30讲》&#x2F;李永乐《复习全书》</p><p>强化阶段全书：张宇《高数18讲》+《线代9讲》+《概率论9讲》&#x2F;李永乐《复习全书》</p><p>基础习题集：张宇《1000》A组&#x2F;李永乐《660》&#x2F;汤家凤《1800题》基础篇</p><p>强化习题集：张宇《1000》&#x2F;李林《880》&#x2F;李永乐《660》</p><h2 id="一整年复习规划"><a href="#一整年复习规划" class="headerlink" title="一整年复习规划"></a>一整年复习规划</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 快速回忆</title>
      <link href="/2025/08/15/kotlin/"/>
      <url>/2025/08/15/kotlin/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin-快速回忆与实用对照（Java-转-Kotlin-完整版）"><a href="#Kotlin-快速回忆与实用对照（Java-转-Kotlin-完整版）" class="headerlink" title="Kotlin 快速回忆与实用对照（Java 转 Kotlin 完整版）"></a>Kotlin 快速回忆与实用对照（Java 转 Kotlin 完整版）</h1><h2 id="1-基础语法与数据类型"><a href="#1-基础语法与数据类型" class="headerlink" title="1. 基础语法与数据类型"></a><strong>1. 基础语法与数据类型</strong></h2><table><thead><tr><th>功能</th><th>Java 写法</th><th>Kotlin 写法</th><th>说明</th></tr></thead><tbody><tr><td>变量</td><td><code>String name = &quot;Tom&quot;;</code></td><td><code>val name = &quot;Tom&quot;</code>（只读） &#x2F; <code>var name = &quot;Tom&quot;</code>（可变）</td><td>Kotlin 自动类型推断</td></tr><tr><td>可空类型</td><td><code>String s = null;</code></td><td><code>var s: String? = null</code></td><td><code>?</code> 表示可为 null</td></tr><tr><td>常量</td><td><code>public static final int MAX = 10;</code></td><td><code>const val MAX = 10</code></td><td>编译期常量</td></tr><tr><td>延迟初始化</td><td>-</td><td><code>lateinit var name: String</code></td><td>只能用于非基本类型的 var</td></tr><tr><td>类型转换</td><td><code>(int) 3.14</code></td><td><code>3.14.toInt()</code></td><td>所有类型都是对象</td></tr><tr><td>类型检测</td><td><code>if (obj instanceof String)</code></td><td><code>if (obj is String)</code></td><td>结合智能类型转换</td></tr></tbody></table><hr><h2 id="2-控制结构"><a href="#2-控制结构" class="headerlink" title="2. 控制结构"></a><strong>2. 控制结构</strong></h2><h3 id="if-三元运算"><a href="#if-三元运算" class="headerlink" title="if &#x2F; 三元运算"></a>if &#x2F; 三元运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kotlin</span></span><br><span class="line"><span class="type">val</span> <span class="variable">max</span> <span class="operator">=</span> <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><h3 id="when-替代-switch"><a href="#when-替代-switch" class="headerlink" title="when 替代 switch"></a>when 替代 switch</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">0</span> -&gt; println(<span class="string">&quot;Zero&quot;</span>)</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span> -&gt; println(<span class="string">&quot;One or Two&quot;</span>)</span><br><span class="line">    <span class="keyword">in</span> <span class="number">3.</span><span class="number">.10</span> -&gt; println(<span class="string">&quot;3~10&quot;</span>)</span><br><span class="line">    !<span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span> -&gt; println(<span class="string">&quot;Out of range&quot;</span>)</span><br><span class="line">    <span class="keyword">is</span> String -&gt; println(<span class="string">&quot;String&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Other&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-函数与参数"><a href="#3-函数与参数" class="headerlink" title="3. 函数与参数"></a><strong>3. 函数与参数</strong></h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单表达式函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">greet</span><span class="params">(name: <span class="type">String</span> = <span class="string">&quot;Guest&quot;</span>)</span></span> = println(<span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span>)</span><br><span class="line">greet()</span><br></pre></td></tr></table></figure><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>, color: <span class="type">String</span>)</span></span> &#123; ... &#125;</span><br><span class="line">draw(color = <span class="string">&quot;red&quot;</span>, x = <span class="number">10</span>, y = <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(<span class="keyword">vararg</span> nums: <span class="type">Int</span>)</span></span> = nums.sum()</span><br></pre></td></tr></table></figure><hr><h2 id="4-类与对象"><a href="#4-类与对象" class="headerlink" title="4. 类与对象"></a><strong>4. 类与对象</strong></h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">speak</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(name: String, <span class="keyword">val</span> grade: <span class="built_in">Int</span>) : Person(name) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">speak</span><span class="params">()</span></span> &#123; println(<span class="string">&quot;I&#x27;m <span class="variable">$name</span>, grade <span class="variable">$grade</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类（data-class）"><a href="#数据类（data-class）" class="headerlink" title="数据类（data class）"></a>数据类（data class）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"><span class="keyword">val</span> u = User(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>)</span><br><span class="line">println(u.copy(age = <span class="number">21</span>))</span><br></pre></td></tr></table></figure><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> NetworkManager &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">connect</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伴生对象（companion）"><a href="#伴生对象（companion）" class="headerlink" title="伴生对象（companion）"></a>伴生对象（companion）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">staticMethod</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Utils.staticMethod()</span><br></pre></td></tr></table></figure><hr><h2 id="5-接口与匿名类"><a href="#5-接口与匿名类" class="headerlink" title="5. 接口与匿名类"></a><strong>5. 接口与匿名类</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Clickable</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> c = <span class="keyword">object</span> : Clickable &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">()</span></span> &#123; println(<span class="string">&quot;Clicked&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-集合与函数式编程"><a href="#6-集合与函数式编程" class="headerlink" title="6. 集合与函数式编程"></a><strong>6. 集合与函数式编程</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)       <span class="comment">// 只读</span></span><br><span class="line"><span class="keyword">val</span> mList = mutableListOf(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 可变</span></span><br><span class="line"></span><br><span class="line">list.filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line">    .map &#123; it * it &#125;</span><br><span class="line">    .forEach &#123; println(it) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> map = mapOf(<span class="string">&quot;a&quot;</span> to <span class="number">1</span>, <span class="string">&quot;b&quot;</span> to <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> ((k, v) <span class="keyword">in</span> map) println(<span class="string">&quot;<span class="variable">$k</span> = <span class="variable">$v</span>&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="7-空安全与-Elvis-运算符"><a href="#7-空安全与-Elvis-运算符" class="headerlink" title="7. 空安全与 Elvis 运算符"></a><strong>7. 空安全与 Elvis 运算符</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name: String? = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="keyword">val</span> length = name?.length ?: <span class="number">0</span> <span class="comment">// 如果 name 为 null，返回 0</span></span><br><span class="line">println(name!!.length) <span class="comment">// 强制非空</span></span><br></pre></td></tr></table></figure><hr><h2 id="8-扩展函数"><a href="#8-扩展函数" class="headerlink" title="8. 扩展函数"></a><strong>8. 扩展函数</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lastChar</span><span class="params">()</span></span> = <span class="keyword">this</span>[length - <span class="number">1</span>]</span><br><span class="line">println(<span class="string">&quot;Hello&quot;</span>.lastChar())</span><br></pre></td></tr></table></figure><hr><h2 id="9-高阶函数与-Lambda"><a href="#9-高阶函数与-Lambda" class="headerlink" title="9. 高阶函数与 Lambda"></a><strong>9. 高阶函数与 Lambda</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">operate</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>, op: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span> = op(x, y)</span><br><span class="line"><span class="keyword">val</span> sum = operate(<span class="number">2</span>, <span class="number">3</span>) &#123; a, b -&gt; a + b &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="10-作用域函数（let-run-apply-also-with）"><a href="#10-作用域函数（let-run-apply-also-with）" class="headerlink" title="10. 作用域函数（let &#x2F; run &#x2F; apply &#x2F; also &#x2F; with）"></a><strong>10. 作用域函数（let &#x2F; run &#x2F; apply &#x2F; also &#x2F; with）</strong></h2><table><thead><tr><th>函数</th><th>作用</th><th>返回</th></tr></thead><tbody><tr><td>let</td><td>转换&#x2F;链式处理</td><td>最后一行</td></tr><tr><td>run</td><td>执行代码块</td><td>最后一行</td></tr><tr><td>apply</td><td>初始化对象</td><td>对象本身</td></tr><tr><td>also</td><td>附加操作</td><td>对象本身</td></tr><tr><td>with</td><td>非扩展版本 run</td><td>最后一行</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str.let &#123; println(it.uppercase()) &#125;</span><br><span class="line"><span class="keyword">val</span> p = Person(<span class="string">&quot;Tom&quot;</span>).apply &#123; speak() &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="11-协程基础（Java-无直接对应）"><a href="#11-协程基础（Java-无直接对应）" class="headerlink" title="11. 协程基础（Java 无直接对应）"></a><strong>11. 协程基础（Java 无直接对应）</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlobalScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = withContext(Dispatchers.IO) &#123; loadData() &#125;</span><br><span class="line">    println(<span class="keyword">data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="12-Android-常用-Kotlin-用法"><a href="#12-Android-常用-Kotlin-用法" class="headerlink" title="12. Android 常用 Kotlin 用法"></a><strong>12. Android 常用 Kotlin 用法</strong></h2><ul><li><strong>ViewBinding 替代 findViewById</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">setContentView(binding.root)</span><br><span class="line">binding.btn.setOnClickListener &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>RecyclerView Adapter 简化</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdapter</span> : <span class="type">ListAdapter</span>&lt;<span class="type">Item, VH</span>&gt;(DiffUtilCallback) &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>点击防抖</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> View.<span class="title">setOnDebouncedClickListener</span><span class="params">(delay: <span class="type">Long</span> = <span class="number">500</span>, action: (<span class="type">View</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>集合 API 处理 UI 列表</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> visibleItems = items.filter &#123; it.isVisible &#125;</span><br></pre></td></tr></table></figure><hr><p>好，那我帮你把刚才的 Java→Kotlin 对照速查再补齐到完整版本，把 Kotlin 比较“进阶”和“少见但强大”的特性也加上，包括委托、密封类、内联函数、泛型、操作符重载等，让你既能快速回忆，也能一步到位掌握新能力。</p><h2 id="13-密封类（sealed-class）"><a href="#13-密封类（sealed-class）" class="headerlink" title="13. 密封类（sealed class）"></a><strong>13. 密封类（sealed class）</strong></h2><ul><li>用来限制继承范围，常用于状态机、结果封装。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Result</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Success</span>(<span class="keyword">val</span> <span class="keyword">data</span>: String) : Result()</span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Error</span>(<span class="keyword">val</span> e: Throwable) : Result()</span><br><span class="line"><span class="keyword">object</span> Loading : Result()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handle</span><span class="params">(r: <span class="type">Result</span>)</span></span> = <span class="keyword">when</span> (r) &#123;</span><br><span class="line">    <span class="keyword">is</span> Success -&gt; println(<span class="string">&quot;OK: <span class="subst">$&#123;r.data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">is</span> Error -&gt; println(<span class="string">&quot;Err: <span class="subst">$&#123;r.e&#125;</span>&quot;</span>)</span><br><span class="line">    Loading -&gt; println(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对比 Java 的 <code>enum</code>，密封类能携带不同数据类型，且可在 <code>when</code> 中强制穷尽所有分支。</p></blockquote><hr><h2 id="14-委托（by）"><a href="#14-委托（by）" class="headerlink" title="14. 委托（by）"></a><strong>14. 委托（by）</strong></h2><ul><li><strong>类委托</strong>：实现接口时，把实现委托给另一个对象。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Logger</span> &#123; <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConsoleLogger</span> : <span class="type">Logger</span> &#123; <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(msg: <span class="type">String</span>)</span></span> = println(msg) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span>(logger: Logger) : Logger <span class="keyword">by</span> logger</span><br><span class="line"><span class="keyword">val</span> s = MyService(ConsoleLogger())</span><br><span class="line">s.log(<span class="string">&quot;Hello&quot;</span>) <span class="comment">// 委托调用 ConsoleLogger.log</span></span><br></pre></td></tr></table></figure><ul><li><strong>属性委托</strong>：懒加载、可观察等。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123; <span class="string">&quot;computed&quot;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> name: String <span class="keyword">by</span> Delegates.observable(<span class="string">&quot;&lt;no name&gt;&quot;</span>) &#123; prop, old, new -&gt;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$old</span> -&gt; <span class="variable">$new</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="15-内联函数（inline）"><a href="#15-内联函数（inline）" class="headerlink" title="15. 内联函数（inline）"></a><strong>15. 内联函数（inline）</strong></h2><ul><li>消除高阶函数带来的对象创建与调用开销，常与 <code>crossinline</code>、<code>noinline</code> 配合。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">measureTime</span><span class="params">(block: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> start = System.nanoTime()</span><br><span class="line">    block()</span><br><span class="line">    println(<span class="string">&quot;Took <span class="subst">$&#123;System.nanoTime() - start&#125;</span>ns&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">measureTime &#123; println(<span class="string">&quot;Task&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="16-泛型与-reified"><a href="#16-泛型与-reified" class="headerlink" title="16. 泛型与 reified"></a><strong>16. 泛型与 reified</strong></h2><ul><li><code>reified</code> 让泛型在运行时保留类型信息（仅限内联函数）。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> Gson.<span class="title">fromJson</span><span class="params">(json: <span class="type">String</span>)</span></span> =</span><br><span class="line">    <span class="keyword">this</span>.fromJson(json, T::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> user: User = gson.fromJson(jsonString)</span><br></pre></td></tr></table></figure><hr><h2 id="17-操作符重载"><a href="#17-操作符重载" class="headerlink" title="17. 操作符重载"></a><strong>17. 操作符重载</strong></h2><ul><li>Kotlin 允许自定义 <code>+</code>, <code>-</code>, <code>[]</code> 等。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Point</span>(<span class="keyword">val</span> x: <span class="built_in">Int</span>, <span class="keyword">val</span> y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Point</span>)</span></span> = Point(x + other.x, y + other.y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> p = Point(<span class="number">1</span>, <span class="number">2</span>) + Point(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// Point(4, 6)</span></span><br></pre></td></tr></table></figure><hr><h2 id="18-解构声明"><a href="#18-解构声明" class="headerlink" title="18. 解构声明"></a><strong>18. 解构声明</strong></h2><ul><li>类的 <code>componentN()</code> 方法支持直接拆解对象。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"><span class="keyword">val</span> (n, a) = User(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="19-匿名对象（object-expression）与伴生对象"><a href="#19-匿名对象（object-expression）与伴生对象" class="headerlink" title="19. 匿名对象（object expression）与伴生对象"></a><strong>19. 匿名对象（object expression）与伴生对象</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listener = <span class="keyword">object</span> : View.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123; println(<span class="string">&quot;Clicked&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">staticMethod</span><span class="params">()</span></span> = println(<span class="string">&quot;Static&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Utils.staticMethod()</span><br></pre></td></tr></table></figure><hr><h2 id="20-类型别名"><a href="#20-类型别名" class="headerlink" title="20. 类型别名"></a><strong>20. 类型别名</strong></h2><ul><li>简化长类型声明。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> ClickListener = (View) -&gt; <span class="built_in">Unit</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setClick</span><span class="params">(listener: <span class="type">ClickListener</span>)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="21-中缀函数（infix）"><a href="#21-中缀函数（infix）" class="headerlink" title="21. 中缀函数（infix）"></a><strong>21. 中缀函数（infix）</strong></h2><ul><li>让调用更像自然语言。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">times</span><span class="params">(str: <span class="type">String</span>)</span></span> = str.repeat(<span class="keyword">this</span>)</span><br><span class="line">println(<span class="number">2</span> times <span class="string">&quot;Bye&quot;</span>) <span class="comment">// ByeBye</span></span><br></pre></td></tr></table></figure><hr><h2 id="22-内部函数（local-function）"><a href="#22-内部函数（local-function）" class="headerlink" title="22. 内部函数（local function）"></a><strong>22. 内部函数（local function）</strong></h2><ul><li>在函数内定义函数，封装重复逻辑。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">check</span><span class="params">(value: <span class="type">String</span>, name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.isBlank()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;<span class="variable">$name</span> empty&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    check(user.name, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line">    check(user.email, <span class="string">&quot;Email&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="23-内部类与嵌套类"><a href="#23-内部类与嵌套类" class="headerlink" title="23. 内部类与嵌套类"></a><strong>23. 内部类与嵌套类</strong></h2><ul><li>Kotlin 默认类是静态嵌套类，需要 <code>inner</code> 才能持有外部类引用。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> bar = <span class="number">1</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123; <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = bar &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="24-Android-场景下的-Kotlin-进阶用法"><a href="#24-Android-场景下的-Kotlin-进阶用法" class="headerlink" title="24. Android 场景下的 Kotlin 进阶用法"></a><strong>24. Android 场景下的 Kotlin 进阶用法</strong></h2><h3 id="RecyclerView-Adapter-极简"><a href="#RecyclerView-Adapter-极简" class="headerlink" title="RecyclerView Adapter 极简"></a>RecyclerView Adapter 极简</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserAdapter</span> :</span><br><span class="line">    <span class="type">ListAdapter</span>&lt;<span class="type">User, UserAdapter.VH</span>&gt;(diffCallback) &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">VH</span>(<span class="keyword">val</span> b: ItemUserBinding) : RecyclerView.ViewHolder(b.root)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(p: <span class="type">ViewGroup</span>, vt: <span class="type">Int</span>)</span></span> =</span><br><span class="line">        VH(ItemUserBinding.inflate(LayoutInflater.from(p.context), p, <span class="literal">false</span>))</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(h: <span class="type">VH</span>, pos: <span class="type">Int</span>)</span></span> = h.b.apply &#123;</span><br><span class="line">        <span class="keyword">val</span> u = getItem(pos)</span><br><span class="line">        name.text = u.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View-点击去抖"><a href="#View-点击去抖" class="headerlink" title="View 点击去抖"></a>View 点击去抖</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> View.<span class="title">onClickDebounce</span><span class="params">(delay: <span class="type">Long</span> = <span class="number">500</span>, block: (<span class="type">View</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0L</span></span><br><span class="line">    setOnClickListener &#123;</span><br><span class="line">        <span class="keyword">val</span> now = SystemClock.uptimeMillis()</span><br><span class="line">        <span class="keyword">if</span> (now - last &gt;= delay) &#123;</span><br><span class="line">            last = now</span><br><span class="line">            block(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="协程-Retrofit"><a href="#协程-Retrofit" class="headerlink" title="协程 + Retrofit"></a>协程 + Retrofit</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Api</span> &#123; <span class="meta">@GET(<span class="string">&quot;users&quot;</span>)</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getUsers</span><span class="params">()</span></span>: List&lt;User&gt; &#125;</span><br><span class="line"><span class="keyword">val</span> users = withContext(Dispatchers.IO) &#123; api.getUsers() &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="25-Java-→-Kotlin-迁移小技巧"><a href="#25-Java-→-Kotlin-迁移小技巧" class="headerlink" title="25. Java → Kotlin 迁移小技巧"></a><strong>25. Java → Kotlin 迁移小技巧</strong></h2><ol><li><strong>保留 Java 逻辑结构</strong>，先让编译通过，再做语法优化。</li><li><strong>优先替换</strong>：<ul><li><code>findViewById</code> → ViewBinding</li><li>工具类静态方法 → 扩展函数</li><li>数据实体 → data class</li><li>集合遍历 → <code>forEach</code> &#x2F; <code>map</code> &#x2F; <code>filter</code></li></ul></li><li><strong>空安全处理</strong>：<ul><li><code>?.</code>、<code>?:</code> 替代显式 null 判断。</li></ul></li><li><strong>逐步引入</strong>协程，不要一次性重写所有异步逻辑。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 文章 </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 多语言表格转 xml/JSON</title>
      <link href="/2025/08/12/excelttransfer/"/>
      <url>/2025/08/12/excelttransfer/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-多语言-Excel-表格转-JSON"><a href="#Android-多语言-Excel-表格转-JSON" class="headerlink" title="Android 多语言 Excel 表格转 JSON"></a>Android 多语言 Excel 表格转 JSON</h1><blockquote><p>Android 系统开发中，经常会遇到客户提供多语言词条表格，我们再将其转换成xml放到res文件夹下；</p><p>通常这个工作量会比较大，因为一般提供过来的词条如果不是开发新需求新增的话，数量会有几百至上千条，这个时候我们手动转并不太现实了，所以可以用到一些脚本或者工具；</p><p>这里就用python实现将excel表格转成xml或者json格式文件；</p></blockquote><h2 id="表格格式"><a href="#表格格式" class="headerlink" title="表格格式"></a>表格格式</h2><blockquote><p>为了能输出正确的文件格式，首先需要对表格格式做规范，表格的规范也需要同步到客户，便于拿到表格可以直接使用，减少开发时间；</p></blockquote><p>表格格式通常如下：第一列为key，后面每列对应语言缩写</p><table><thead><tr><th>key</th><th>en</th><th>zh-CN</th><th>zh-TW</th></tr></thead><tbody><tr><td>app_name</td><td>MyApp</td><td>我的应用</td><td>我的應用</td></tr><tr><td>welcome_msg</td><td>Welcome, %s!</td><td>欢迎，%s！</td><td>歡迎，%s！</td></tr></tbody></table><h2 id="准备-python-环境"><a href="#准备-python-环境" class="headerlink" title="准备 python 环境"></a>准备 python 环境</h2><blockquote><p>python 环境搭建比较简单，官网下载对应exe安装即可</p><p>官网：<a href="https://www.python.org/">https://www.python.org/</a></p></blockquote><h2 id="脚本源码"><a href="#脚本源码" class="headerlink" title="脚本源码"></a>脚本源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">excel_to_android_json.py</span></span><br><span class="line"><span class="string">把多语言表格转换为 Android values-xx/strings.json</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalize_col_name</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;去掉前后空格、统一成小写&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(name).strip().lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;input&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Excel/CSV 文件路径&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--out-dir&quot;</span>, default=<span class="string">&quot;out&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;输出目录&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--key-col&quot;</span>, default=<span class="string">&quot;key&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;key 列名（默认 key）&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--skip-empty&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;跳过空翻译&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args.<span class="built_in">input</span>):</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;文件不存在: <span class="subst">&#123;args.<span class="built_in">input</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 Excel 或 CSV</span></span><br><span class="line">    <span class="keyword">if</span> args.<span class="built_in">input</span>.lower().endswith((<span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.xlsx&quot;</span>)):</span><br><span class="line">        df = pd.read_excel(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_csv(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    df = df.fillna(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 规范化表头</span></span><br><span class="line">    df.columns = [normalize_col_name(c) <span class="keyword">for</span> c <span class="keyword">in</span> df.columns]</span><br><span class="line">    key_col_norm = normalize_col_name(args.key_col)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印表头方便排查</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;表头列名(规范化后):&quot;</span>, df.columns.tolist())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key_col_norm <span class="keyword">not</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;未找到 key 列 &#x27;<span class="subst">&#123;args.key_col&#125;</span>&#x27;，请检查表头&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到语言列（排除 key 和 comment）</span></span><br><span class="line">    locale_cols = [c <span class="keyword">for</span> c <span class="keyword">in</span> df.columns <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> (key_col_norm, <span class="string">&quot;comment&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    os.makedirs(args.out_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> locale <span class="keyword">in</span> locale_cols:</span><br><span class="line">        kv = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">            key = row[key_col_norm].strip()</span><br><span class="line">            val = row[locale].strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> args.skip_empty <span class="keyword">and</span> val == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            kv[key] = val</span><br><span class="line"></span><br><span class="line">        dir_name = <span class="string">&quot;values&quot;</span> <span class="keyword">if</span> locale <span class="keyword">in</span> (<span class="string">&quot;en&quot;</span>, <span class="string">&quot;default&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="keyword">else</span> <span class="string">f&quot;values-<span class="subst">&#123;locale&#125;</span>&quot;</span></span><br><span class="line">        full_dir = os.path.join(args.out_dir, dir_name)</span><br><span class="line">        os.makedirs(full_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        out_file = os.path.join(full_dir, <span class="string">&quot;strings.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(out_file, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(kv, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已生成 <span class="subst">&#123;out_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas openpyxl</span><br><span class="line">python excel_to_android_json.py 多语言表.xlsx --out-dir out</span><br></pre></td></tr></table></figure><p>生成的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">out/</span><br><span class="line">  values-en/</span><br><span class="line">    strings.json</span><br><span class="line">  values-zh-CN/</span><br><span class="line">    strings.json</span><br><span class="line">  values-zh-TW/</span><br><span class="line">    strings.json</span><br></pre></td></tr></table></figure><h1 id="Android-多语言-Excel-表格转-xml"><a href="#Android-多语言-Excel-表格转-xml" class="headerlink" title="Android 多语言 Excel 表格转 xml"></a>Android 多语言 Excel 表格转 xml</h1><p>只需要对上面的脚本做一些修改即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">excel_to_android_xml.py</span></span><br><span class="line"><span class="string">把多语言表格转换为 Android values-xx/strings.xml</span></span><br><span class="line"><span class="string">支持:</span></span><br><span class="line"><span class="string"> - 自动识别 key 列 (大小写/空格/隐藏字符)</span></span><br><span class="line"><span class="string"> - 转义 &amp;, &lt;, &gt;, &quot;, &#x27;</span></span><br><span class="line"><span class="string"> - 自动映射 Android 标准语言目录名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android 标准语言代码映射</span></span><br><span class="line">ANDROID_LOCALE_MAP = &#123;</span><br><span class="line">    <span class="string">&quot;zh-cn&quot;</span>: <span class="string">&quot;values-zh-rCN&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zh&quot;</span>: <span class="string">&quot;values-zh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zh-tw&quot;</span>: <span class="string">&quot;values-zh-rTW&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zh-hk&quot;</span>: <span class="string">&quot;values-zh-rHK&quot;</span>,</span><br><span class="line">    <span class="string">&quot;en&quot;</span>: <span class="string">&quot;values&quot;</span>,</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: <span class="string">&quot;values&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalize_col_name</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;去掉前后空格、统一成小写&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(name).strip().lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">safe_android_string</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;转义 Android strings.xml 特殊字符&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pd.isna(s):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    s = <span class="built_in">str</span>(s)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)  <span class="comment"># &amp; 必须先转义</span></span><br><span class="line">    s = s.replace(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)    <span class="comment"># 双引号</span></span><br><span class="line">    s = s.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)    <span class="comment"># 单引号</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_android_values_dir</span>(<span class="params">locale: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据语言代码生成 Android 规范的 values-xx 目录&quot;&quot;&quot;</span></span><br><span class="line">    locale_norm = locale.lower()</span><br><span class="line">    <span class="keyword">if</span> locale_norm <span class="keyword">in</span> ANDROID_LOCALE_MAP:</span><br><span class="line">        <span class="keyword">return</span> ANDROID_LOCALE_MAP[locale_norm]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;values-<span class="subst">&#123;locale_norm&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;input&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Excel/CSV 文件路径&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--out-dir&quot;</span>, default=<span class="string">&quot;out&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;输出目录&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--key-col&quot;</span>, default=<span class="string">&quot;key&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;key 列名（默认 key）&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--skip-empty&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;跳过空翻译&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args.<span class="built_in">input</span>):</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;文件不存在: <span class="subst">&#123;args.<span class="built_in">input</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 Excel 或 CSV</span></span><br><span class="line">    <span class="keyword">if</span> args.<span class="built_in">input</span>.lower().endswith((<span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.xlsx&quot;</span>)):</span><br><span class="line">        df = pd.read_excel(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_csv(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    df = df.fillna(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 规范化表头</span></span><br><span class="line">    df.columns = [normalize_col_name(c) <span class="keyword">for</span> c <span class="keyword">in</span> df.columns]</span><br><span class="line">    key_col_norm = normalize_col_name(args.key_col)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;表头列名(规范化后):&quot;</span>, df.columns.tolist())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key_col_norm <span class="keyword">not</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;未找到 key 列 &#x27;<span class="subst">&#123;args.key_col&#125;</span>&#x27;，请检查表头&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到语言列（排除 key 和 comment）</span></span><br><span class="line">    locale_cols = [c <span class="keyword">for</span> c <span class="keyword">in</span> df.columns <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> (key_col_norm, <span class="string">&quot;comment&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    os.makedirs(args.out_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> locale <span class="keyword">in</span> locale_cols:</span><br><span class="line">        kv = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">            key = row[key_col_norm].strip()</span><br><span class="line">            val = row[locale].strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> args.skip_empty <span class="keyword">and</span> val == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            kv[key] = safe_android_string(val)</span><br><span class="line"></span><br><span class="line">        dir_name = get_android_values_dir(locale)</span><br><span class="line">        full_dir = os.path.join(args.out_dir, dir_name)</span><br><span class="line">        os.makedirs(full_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        out_file = os.path.join(full_dir, <span class="string">&quot;strings.xml&quot;</span>)</span><br><span class="line"></span><br><span class="line">        root = ET.Element(<span class="string">&quot;resources&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kv.items():</span><br><span class="line">            el = ET.SubElement(root, <span class="string">&quot;string&quot;</span>, attrib=&#123;<span class="string">&quot;name&quot;</span>: k&#125;)</span><br><span class="line">            el.text = v</span><br><span class="line">        tree = ET.ElementTree(root)</span><br><span class="line">        tree.write(out_file, encoding=<span class="string">&quot;utf-8&quot;</span>, xml_declaration=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已生成 <span class="subst">&#123;out_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas openpyxl</span><br><span class="line">python excel_to_android_json.py 多语言表.xlsx --out-dir out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识ContentProvider</title>
      <link href="/2025/07/24/contentprovider/"/>
      <url>/2025/07/24/contentprovider/</url>
      
        <content type="html"><![CDATA[<h1 id="ContentProvider-设计"><a href="#ContentProvider-设计" class="headerlink" title="ContentProvider 设计"></a>ContentProvider 设计</h1><p>四大组件之一，主要用于在不同应用之间共享数据，ContentProvider 提供了一个一致的接口，应用能够以一种受控和安全的方式访问和修改数据，同时，通过 CP，数据可以被跨进程共享，而不必将数据直接暴露给其他应用。</p><h2 id="ContentProvider-设计初衷"><a href="#ContentProvider-设计初衷" class="headerlink" title="ContentProvider 设计初衷"></a>ContentProvider 设计初衷</h2><ol><li><strong>数据共享</strong>：Android 中，应用之间不允许直接访问数据，CP 提供了一种标准方式让应用安全共享数据</li><li><strong>数据封装</strong>：通过 CP，数据存取逻辑可以封装在一个单独组件中，其他组件只需要通过 CP 提供的接口操作</li><li><strong>统一接口</strong>：CP 提供了一个统一的接口，支持多种数据存取方式，并且支持对数据进行事务操作</li></ol><h2 id="ContentProvider-基本结构"><a href="#ContentProvider-基本结构" class="headerlink" title="ContentProvider 基本结构"></a>ContentProvider 基本结构</h2><ol><li><strong>URI</strong>：统一资源标识符，用于定位 CP 中的数据</li><li><strong>MIME 类型</strong>：用于标识返回的数据类型</li><li><strong>数据存储</strong>：实际存储数据的地方，如数据库、文件</li><li><strong>数据操作方法</strong>：CRUD</li></ol><h2 id="ContentProvider-实现"><a href="#ContentProvider-实现" class="headerlink" title="ContentProvider 实现"></a>ContentProvider 实现</h2><p>继承 ContentProvider 并重写抽象方法</p><p>这一块不赘述了</p><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="ContentObserver-监听数据变化"><a href="#ContentObserver-监听数据变化" class="headerlink" title="ContentObserver 监听数据变化"></a>ContentObserver 监听数据变化</h2><blockquote><p>刚好最近做的需求中有用到，根据投影仪投射距离是否合适来展示正确的UI，我们就可以监听算法返回的距离状态去做更新UI操作</p></blockquote><p>创建一个 ContentObserver 并注册它来监听数据变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SettingsContentObserver</span> <span class="keyword">extends</span> <span class="title class_">ContentObserver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String settingKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SettingsContentObserver</span><span class="params">(Handler handler, Context context, String settingKey)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(handler);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.settingKey = settingKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(<span class="type">boolean</span> selfChange)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onChange(selfChange);</span><br><span class="line">        handleSettingChange();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(<span class="type">boolean</span> selfChange, Uri uri)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onChange(selfChange, uri);</span><br><span class="line">        handleSettingChange();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleSettingChange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取设置值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> Settings.Global.getInt(</span><br><span class="line">                context.getContentResolver(),</span><br><span class="line">                DISTANCE_STATUS,</span><br><span class="line">                <span class="number">1</span> <span class="comment">// 默认值</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        LogUtils.d(<span class="string">&quot;SettingsObserver&quot;</span>, DISTANCE_STATUS + <span class="string">&quot; changed to: &quot;</span> + value);</span><br><span class="line">        <span class="keyword">if</span>(value==<span class="number">0</span>)&#123;</span><br><span class="line">            isDistanceCorrect = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            isDistanceCorrect = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        updatUI();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合适位置注册和注销观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onResume();</span><br><span class="line">    <span class="comment">// 注册观察者</span></span><br><span class="line">    settingsObserver = <span class="keyword">new</span> <span class="title class_">SettingsContentObserver</span>(<span class="keyword">new</span> <span class="title class_">Handler</span>(),<span class="built_in">this</span>,DISTANCE_STATUS);</span><br><span class="line">    getContentResolver().registerContentObserver(Settings.Global.getUriFor(DISTANCE_STATUS), <span class="literal">false</span>, settingsObserver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onPause();</span><br><span class="line">    <span class="comment">// 注销观察者（避免内存泄漏）</span></span><br><span class="line">    getContentResolver().unregisterContentObserver(settingsObserver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><blockquote><p>ContentProvider 可以与 SyncAdapter 结合，实现自动数据同步；例如，当远程服务器上的数据更新时，可以通过 SyncAdapter 同步到本地数据库，并通过 ContentProvider 提供的数据接口进行访问；</p></blockquote><p>创建 SyncAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleSyncAdapter</span> <span class="keyword">extends</span> <span class="title class_">AbstractThreadedSyncAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleSyncAdapter</span><span class="params">(Context context, <span class="type">boolean</span> autoInitialize)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, autoInitialize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPerformSync</span><span class="params">(Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult)</span> &#123;</span><br><span class="line">        <span class="comment">// 同步逻辑</span></span><br><span class="line">        <span class="comment">// 更新数据后通过 provider.notifyChange 通知变化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 SyncAdapter 和 ContentProvider 结合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sync-adapter</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:contentAuthority</span>=<span class="string">&quot;com.example.provider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accountType</span>=<span class="string">&quot;com.example.account&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:userVisible</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:supportsUploading</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowParallelSyncs</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:isAlwaysSyncable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><p>为保护敏感数据，CP 可以通过声明权限来控制数据访问</p><p>AndroidManifest.xml 中进行声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.provider.READ&quot;</span> <span class="attr">android:protectionLevel</span>=<span class="string">&quot;signature&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.provider.WRITE&quot;</span> <span class="attr">android:protectionLevel</span>=<span class="string">&quot;signature&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.ExampleProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;com.example.provider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:readPermission</span>=<span class="string">&quot;com.example.provider.READ&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:writePermission</span>=<span class="string">&quot;com.example.provider.WRITE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>代码中检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Cursor <span class="title function_">query</span><span class="params">(<span class="meta">@NonNull</span> Uri uri, <span class="meta">@Nullable</span> String[] projection, <span class="meta">@Nullable</span> String selection,</span></span><br><span class="line"><span class="params">                    <span class="meta">@Nullable</span> String[] selectionArgs, <span class="meta">@Nullable</span> String sortOrder)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getContext().checkCallingOrSelfPermission(<span class="string">&quot;com.example.provider.READ&quot;</span>) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Permission denied&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行查询操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ContentProvider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反编译 APK</title>
      <link href="/2025/03/27/decodeapk/"/>
      <url>/2025/03/27/decodeapk/</url>
      
        <content type="html"><![CDATA[<h1 id="Android逆向"><a href="#Android逆向" class="headerlink" title="Android逆向"></a>Android逆向</h1><h2 id="反编译APK"><a href="#反编译APK" class="headerlink" title="反编译APK"></a>反编译APK</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>如果只是想拿到apk中的图片资源，只需要将apk后缀改为zip然后解压缩，<strong>res</strong>目录中就包含了所有的资源文件</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/releasezip.png"></p><p><strong>classes.dex</strong> 则包含了所有的代码，只是还无法查看</p><p><strong>AndroidManifest.xml</strong> 文件打开会发现无法阅读，都是16进制数</p><p>此时就需要用到工具 —— ApkTool</p><h4 id="ApkTool"><a href="#ApkTool" class="headerlink" title="ApkTool"></a>ApkTool</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p><a href="https://apktool.org/">ApkTool官网</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/apktooldocs.png"></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d xxx.apk</span><br></pre></td></tr></table></figure><blockquote><p>d 表示 decode</p><p>还可以加上一些附加参数来控制 decode 行为：</p><p>-f ：如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）</p><p>-o ：指定解码目标文件夹的名称（默认使用 APK 文件的名字来命名目标文件夹）</p><p>-s ：不反编译dex文件，也就是说 classes.dex 文件会被保留（默认会将 dex 文件解码成 smali 文件）</p><p>-r ：不反编译资源文件，也就是说 resources.arsc 文件会被保留（默认会将 resources.arsc 解码成具体的资源文件）</p></blockquote><p>反编译之后会得到以下内容：</p><ul><li>1、AndroidManifest.xml：经过反编译还原后的 manifest 文件</li><li>2、original 文件夹：存放了未经反编译过、原始的 AndroidManifest.xml 文件</li><li>3、res 文件夹：存放了反编译出来的所有资源</li><li>4、smali 文件夹：存放了反编译出来的所有代码，只不过格式都是<code>.smali</code>类型的</li></ul><p>xml文件已经可以看懂了，不过 smali 类型文件我们依然无法阅读</p><p>此时，需要用到另一个工具 —— dex2jar + jd-gui</p><h4 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>将 dex 转换成 jar 形式文件</p><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><p><a href="https://sourceforge.net/projects/dex2jar/files/">dex2jar官网</a></p><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>将下载的 dex2jar 压缩包解压后，可以看到以下内容</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/dex2jar.png"></p><p>windows上使用dex2jar.bat即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dex2jar.bat classes.dex路径</span><br></pre></td></tr></table></figure><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/dexcontent.png"></p><p>看到上述console则表示成功</p><p>代码都位于 classes-dex2jar.jar 中</p><p>现在需要用到另一款工具 jd-gui</p><h4 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h4><h5 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h5><p><a href="https://java-decompiler.github.io/">jd-gui官网</a></p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jdgui.png"></p><p>根据需要下载对应包即可</p><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><p><img src="C:\Users\bamboo\AppData\Roaming\Typora\typora-user-images\image-20250327145549112.png" alt="image-20250327145549112"></p><p>解压到本地，双击jd-gui.exe文件即可运行</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jarcontent.png"></p><p>用jd-gui打开之前解压出来的dex文件即可看到所有的源码</p><h4 id="jadx-gui"><a href="#jadx-gui" class="headerlink" title="jadx-gui"></a>jadx-gui</h4><blockquote><p>一个更强大的工具，一款出色的 **反编译工具 **和 <strong>代码查看器</strong>，但不能直接编辑 APK 文件或内部代码</p><p>使用 Jadx-GUI 打开一个apk文件时，它会根据 Dalvik 字节码（DEX文件）反编译成可读的 Java 源代码，然而，这些源代码只是 Jadx 根据字节码猜测出来的，并不是原始的、可变翼德Java源文件，因此，无法直接在 Jadx-GUI 中修改这些反编译出来的 Java 代码。</p></blockquote><p><strong>下载</strong></p><p><a href="https://github.com/skylot/jadx">Jadx-GUI</a></p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jadxgui.png"></p><p>使用起来也很简单，打开exe文件</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jadxuse.png"></p><p>然后点击打开文件&#x2F;打开项目或者将apk文件直接拖拽过来即可查看；</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Decode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 学习</title>
      <link href="/2025/03/22/GradleLearn/"/>
      <url>/2025/03/22/GradleLearn/</url>
      
        <content type="html"><![CDATA[<h2 id="Gradle提供了什么"><a href="#Gradle提供了什么" class="headerlink" title="Gradle提供了什么"></a>Gradle提供了什么</h2><ul><li>对多工程构建支持很出色，尤其是工程依赖问题，并支持局部构建</li><li>多种方式的依赖管理：如远程 Maven 仓库、nexus 私服、ivy 仓库或者本地文件系统等</li><li>支持传递性依赖管理</li><li>轻松迁移项目工程</li><li>基于 Groovy 等语言构建脚本，简便灵活</li><li>免费开源，并且 <strong>整体设计是以作为一种语言为导向的</strong>，而非成为一个严格死板的框架</li></ul><h2 id="Groovy简介"><a href="#Groovy简介" class="headerlink" title="Groovy简介"></a>Groovy简介</h2><blockquote><p>Groovy 是一种基于 JVM 的敏捷开发语言，结合了 Python、Ruby和 Smalltalk 的许多强大的特性，Groovy 代码能够与 Java 代码很好的结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Grooy 也可以使用其他非 Java 语言编写的库。</p></blockquote><h3 id="从-Java-到-Groovy"><a href="#从-Java-到-Groovy" class="headerlink" title="从 Java 到 Groovy"></a>从 Java 到 Groovy</h3><p><strong>自动装箱：</strong></p><p>因为 Groovy 具有动态类型特性，所以它从一开始就支持自动装箱。实际上，必要时 Groovy 会自动将基本数据类型视作对象；</p><p><strong>字符串：</strong></p><p>‘ ‘：单纯的字符串 def name &#x3D; ‘car’</p><p>“ “：可以动态插值 def carName &#x3D; “$name:AAA”</p><ul><li>单引号字符串是 Java.lang.Strring 类型，同时不支持插值</li><li>双引号字符串在没有使用插值表达式的情况下是 java.lang.String 类型，但如果有插值表达式使用的话，就是 groovy.lang.String 类型</li><li>三引号字符串表示多行的字符串，不必将字符串分割成几块，也不必用连接符或换行符转义字符来将字符串跨行</li><li>字符串的使用<ul><li>单引号单个字符表示 char 类型，需要使用 as 转换</li><li>${..} 表达式进行插值，去掉花括号不引起歧义的话，可以去掉</li><li>可以通过 +&#x3D; ，-&#x3D; 操作符添加&#x2F;减少字符（会自动匹配）</li></ul></li></ul><h4 id="定义变量-动态类型"><a href="#定义变量-动态类型" class="headerlink" title="定义变量 - 动态类型"></a>定义变量 - 动态类型</h4><ul><li>Java 是一门静态类型的语言，但是也有自己的多态</li><li>动态类型是一种更高级的多态</li><li>动态类型放低了对类型的要求，使语言能够根据上下文来判定变量类型</li><li>使用 def 关键字定义变量，不过已使用了 final，private 这样的修饰符，def 可以省略</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词/口语学习</title>
      <link href="/2025/03/02/englishlearn/"/>
      <url>/2025/03/02/englishlearn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>温馨提示：边看边读效果更佳</p></blockquote><h2 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h2><h3 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h3><p><strong>He punished my champagne.</strong> （他大喝我的香槟）</p><blockquote><p><strong>punished</strong>：一般译作惩罚，也有贪婪的吃喝之意</p></blockquote><p><strong>We shouldn’t rush to blame them.</strong>（我们不应该不问青红皂白就责备他们）</p><p><strong>The verses scan well.</strong>（这些诗句符合韵律）</p><p><strong>This leads to gradual memory exhaustion.</strong>（这将导致存储空间逐渐的耗尽）</p><blockquote><p><strong>gradual</strong>：逐渐的</p><p><strong>exhaustion</strong>：耗尽、精疲力尽</p></blockquote><p><strong>It won’t take long to mend the car.</strong>（修理这辆车用不了多长时间）</p><p><strong>bother to do</strong>（费心做某事）</p><blockquote><p>bother：及物动词时——使烦恼，使痛苦；不及物动词时——费时，费劲</p></blockquote><p><strong>wine</strong>（葡萄酒）、<strong>flavour</strong>（风味、味道）</p><p><strong>Hang  the expense.</strong>（管他多少钱、别管多少钱！）</p><p><strong>representative</strong>（代表性的）</p><p><strong>I am as healthy as ever.</strong>（我依然那样健康）</p><p><strong>The boy potted a partridge.</strong>（男孩射杀了一只鹌鹑）</p><p><strong>It was a close race.</strong>（那是场难分难解的比赛）</p><p><strong>There’s no waste matter left over.</strong>（没有任何浪费的东西剩下）</p><p><strong>artificial</strong>（人工的）</p><p><strong>lap</strong>（一圈、一程、重复的部分）</p><blockquote><p>He lapped in two minutes.（他两分钟跑完了一圈）</p></blockquote><p><strong>offence. n. 犯规; 违法行为；冒犯</strong> —— <strong>took offence</strong>（生气）</p><p><strong>domestic  adj.家庭的，家用的，国内的，驯养的   n.佣人</strong></p><p><strong>bomb</strong>（炸弹）、<strong>comb</strong>（梳子）</p><p><strong>The house has a south-facing aspect.</strong>（这栋房子朝南）</p><p><strong>He proposed a subject for the debate.</strong>（他提出一个辩论题目）</p><p><strong>project</strong></p><blockquote><p>名词：项目、工程、计划</p><p>动词：投射、预测、计划、放映、发射、预报、表达</p></blockquote><p><strong>She turned her ankle while ice-skating.</strong>（她滑冰时扭伤了脚踝）</p><p><strong>megabucks</strong>（巨款）</p><p><strong>wear</strong>（磨损） —— &gt; 过去式：wore ——&gt; wear out</p><p><strong>adolescence</strong>（青春期）</p><p><strong>mineral</strong> n. 矿物质；矿物；&lt;英&gt;汽水，苏打水；无机物；矿泉水adj. （与）矿物（有关）的</p><p><strong>dealt</strong> v.经销、发放、发给</p><p><strong>blow</strong> n.打击、v.吹</p><h3 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h3><p><strong>landslid</strong>（山体滑坡）</p><p><strong>oblige 英&#x2F; əˈblaɪdʒ &#x2F;</strong> （v.强迫、帮…的忙、oblige sb by 为某人效劳）</p><p><strong>amuse 英&#x2F; əˈmjuːz &#x2F;</strong>（v.逗乐、逗笑）</p><blockquote><p>His jokes amused the whole table. （她讲的笑话把整桌的人都逗乐了）</p></blockquote><p><strong>He drove a good bargin yesterday.</strong>（他昨天做了一笔好生意）</p><blockquote><p><strong>bargain：</strong></p><ul><li>*n.*便宜货，减价品；协议，交易</li><li>*v.*讨价还价，谈判</li></ul></blockquote><p><strong>carpenter</strong>（木匠、木工）</p><p><strong>tortuous 英&#x2F; ˈtɔːtʃuəs &#x2F;</strong>（*adj.*拐弯抹角的；冗长费解的；弯弯曲曲的，曲折的）</p><p><strong>vivid</strong>（adj.鲜艳的；强烈的）</p><p><strong>indeed</strong>（adj.确实；的确；实际上；真正的）</p><p><strong>penicillin</strong>（盘尼西林-青霉素）</p><p><strong>He scraped through the narrow opening.</strong>（他勉强通过狭窄的开口处）</p><blockquote><p><strong>scrape：</strong></p><ul><li><em>v.</em>（用小刀等）刮除；（使）刮擦；擦伤，刮坏；（使）发出刺耳的刮擦声；勉强维持，艰难地完成；勉强维持生活（scrape by&#x2F;along）；勉强通过；（艰难地）凑集，积累（scrape sth. together&#x2F;up）；节俭；挖坑，挖洞； 把头发拢在后面（scrape sth. back）；（幽默）不入调地演奏小提琴；&lt;英&gt;在面包上涂一层薄薄的（黄油，人造黄油）；用程序从网上下载（数据）</li><li>*n.*擦伤，擦痕；刮擦，刮擦声；&lt;非正式&gt;困境，窘境；地面空洞处，（尤指鸟求爱、筑巢时）在地面挖的洞；&lt;英&gt;涂在面包上的一层黄油（或麦琪淋）；&lt;非正式&gt;（医）刮宫</li></ul></blockquote><p><strong>Crime is on the increase.</strong>（犯罪活动日益猖獗）</p><p><strong>They ran short of gasline.</strong>（他们的汽油不够了）</p><p><strong>brow</strong>（眉头；表情）</p><p><strong>rat on</strong>（撤销；背叛；告发）</p><p><strong>stark</strong>（明确的；明显的）</p><p><strong>division</strong>（部分；阶层；分开）</p><p><strong>I’m sorry,I’m not with you.</strong>（对不起，我没听懂你说的）</p><h3 id="表达"><a href="#表达" class="headerlink" title="表达"></a>表达</h3><p><strong>offer to help</strong>（提供帮助）</p><p><strong>get on with</strong>（继续做，继续进行：指继续或进行某项活动，尤其是在困难或不愉快的情况下；与……相处融洽：指与某人相处得好，关系融洽）</p><p><strong>chore</strong>（家务；杂活；苦差事）do chores 做家务</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的小知识</title>
      <link href="/2025/03/01/justrecord/"/>
      <url>/2025/03/01/justrecord/</url>
      
        <content type="html"><![CDATA[<h2 id="银屑病一些好用的药物"><a href="#银屑病一些好用的药物" class="headerlink" title="银屑病一些好用的药物"></a>银屑病一些好用的药物</h2><p>他克莫司</p><h2 id="补钙"><a href="#补钙" class="headerlink" title="补钙"></a>补钙</h2><p>人体越越钙，吸收率越高，一般20% ~ 30%，缺钙的话可能提高到60 ~ 70，不缺钙可能会下降到10%左右（这是在正常摄入钙的情况下）</p><p>柠檬酸钙（较贵）<br>碳酸钙（同样可以）<br>每天补充 700mg 以上</p><p>补充氨基酸可以促进钙的吸收</p><p>所以，有复合产品 —— 氨基酸螯合钙等</p><p>钙补充多了会便秘（吸收率有限），多做运动保证吸收的钙能有效利用</p><p>多补充维生素D！！！</p><h2 id="最让人舒服的11种颜色RGB值和十六进制值"><a href="#最让人舒服的11种颜色RGB值和十六进制值" class="headerlink" title="最让人舒服的11种颜色RGB值和十六进制值"></a>最让人舒服的11种颜色RGB值和十六进制值</h2><table><thead><tr><th>序号</th><th align="left">名称</th><th align="left">RGB</th><th align="left">十六进制</th></tr></thead><tbody><tr><td>1</td><td align="left">豆沙绿</td><td align="left">(199, 237, 204)</td><td align="left">#C7EDCC</td></tr><tr><td>2</td><td align="left">银河白</td><td align="left">(255, 255, 255)</td><td align="left">#FFFFFF</td></tr><tr><td>3</td><td align="left">杏仁黄</td><td align="left">(250, 249, 222)</td><td align="left">#FAF9DE</td></tr><tr><td>4</td><td align="left">秋叶褐</td><td align="left">(255, 242, 226)</td><td align="left">#FFF2E2</td></tr><tr><td>5</td><td align="left">胭脂红</td><td align="left">(253, 230, 224)</td><td align="left">#FDE6E0</td></tr><tr><td>6</td><td align="left">青草绿</td><td align="left">(227, 237, 205)</td><td align="left">#E3EDCD</td></tr><tr><td>7</td><td align="left">海天蓝</td><td align="left">(220, 226, 241)</td><td align="left">#DCE2F1</td></tr><tr><td>8</td><td align="left">葛巾紫</td><td align="left">(233, 235, 254)</td><td align="left">#E9EBFE</td></tr><tr><td>9</td><td align="left">极光灰</td><td align="left">(234, 234, 239)</td><td align="left">#EAEAEF</td></tr><tr><td>10</td><td align="left">苹果绿</td><td align="left">(183, 232, 189)</td><td align="left">#B7E8BD</td></tr><tr><td>11</td><td align="left">豆沙绿-略暗</td><td align="left">(204, 232, 207)</td><td align="left">#CCE8CF</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手一记 </tag>
            
            <tag> 健康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的工具</title>
      <link href="/2025/01/10/nicetools/"/>
      <url>/2025/01/10/nicetools/</url>
      
        <content type="html"><![CDATA[<h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p><a href="https://www.efc123.com/shop">EFCloud</a> —— 跑路了，八嘎</p><p><a href="https://一元机场.ink/">一元机场</a> —— 非常稳定，几年了还在，就是节点很不稳定</p><h2 id="ICON"><a href="#ICON" class="headerlink" title="ICON"></a>ICON</h2><p><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></p><p><a href="https://fontawesome.com/">FONT AWESOME</a></p><p><a href="https://yesicon.app/carbon/skill-level">Carbon</a></p><h3 id="封面图生成"><a href="#封面图生成" class="headerlink" title="封面图生成"></a>封面图生成</h3><p><a href="https://nav.rdonly.com/laboratory/bgimage/backimage.html">https://nav.rdonly.com/laboratory/bgimage/backimage.html</a></p><p><a href="https://cover.ruom.top/">https://cover.ruom.top/</a></p>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 - Android</title>
      <link href="/2025/01/10/notes/"/>
      <url>/2025/01/10/notes/</url>
      
        <content type="html"><![CDATA[<h2 id="一些常识"><a href="#一些常识" class="headerlink" title="一些常识"></a>一些常识</h2><p><strong>STR</strong>（Suspend to RAM）待机是一种电源管理技术，用于在设备（如计算机、智能手机或平板电脑）不使用时节省电能。在这种模式下，系统的状态被保存在RAM（随机存取存储器）中，而大部分硬件组件被置于低功耗状态。以下是关于STR待机的一些详细信息：</p><h3 id="STR待机的特点"><a href="#STR待机的特点" class="headerlink" title="STR待机的特点"></a>STR待机的特点</h3><ol><li><strong>快速恢复</strong>：<ul><li>当设备从STR待机状态唤醒时，系统状态从RAM中恢复，因此恢复速度非常快，通常只需几秒钟。</li></ul></li><li><strong>低功耗</strong>：<ul><li>在STR待机模式下，设备的大部分硬件组件被关闭或置于低功耗状态，从而显著降低功耗。这使得设备在待机状态下可以保持较长时间而不消耗太多电池电量。</li></ul></li><li><strong>状态保存</strong>：<ul><li>系统的当前状态（包括运行的应用程序、打开的文件等）被保存在RAM中。这意味着当设备从待机状态唤醒时，用户可以立即继续之前的工作，而无需重新启动系统或应用程序。</li></ul></li></ol><h3 id="STR待机的工作原理"><a href="#STR待机的工作原理" class="headerlink" title="STR待机的工作原理"></a>STR待机的工作原理</h3><ol><li><strong>进入待机</strong>：<ul><li>当用户触发待机操作（例如，通过关闭屏幕或按下电源按钮）时，系统开始将当前状态保存到RAM中。</li><li>系统关闭或降低大部分硬件组件的电源，包括CPU、GPU、硬盘等，但保持RAM的电源供应，以保存系统状态。</li></ul></li><li><strong>唤醒设备</strong>：<ul><li>当用户通过特定的操作（例如，按下电源按钮或打开屏幕）唤醒设备时，系统从RAM中恢复保存的状态。</li><li>硬件组件被重新激活，系统恢复到待机前的状态，用户可以立即继续使用设备。</li></ul></li></ol><h3 id="STR待机与休眠模式的区别"><a href="#STR待机与休眠模式的区别" class="headerlink" title="STR待机与休眠模式的区别"></a>STR待机与休眠模式的区别</h3><ul><li><p>休眠模式（Suspend to Disk）</p><p>：</p><ul><li>在休眠模式下，系统的状态被保存到硬盘上，而不是RAM中。这意味着即使在完全断电的情况下，系统状态也不会丢失。</li><li>休眠模式的恢复速度比STR待机慢，因为需要从硬盘读取系统状态，通常需要几十秒到几分钟不等。</li><li>休眠模式的功耗更低，因为设备在休眠状态下可以完全断电，适合长时间不使用设备的情况。</li></ul></li></ul><h3 id="示例：在Android设备中实现STR待机"><a href="#示例：在Android设备中实现STR待机" class="headerlink" title="示例：在Android设备中实现STR待机"></a>示例：在Android设备中实现STR待机</h3><p>在Android设备中，STR待机通常通过系统设置中的电源管理选项实现。以下是一个简单的示例，展示如何在Android应用中请求设备进入待机状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.PowerManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerManagerHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">goToSleep</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">PowerManager</span> <span class="variable">powerManager</span> <span class="operator">=</span> (PowerManager) context.getSystemService(Context.POWER_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (powerManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            powerManager.goToSleep(PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>权限</strong>：请求设备进入待机状态可能需要特定的权限，具体取决于设备的制造商和Android版本。</li><li><strong>用户交互</strong>：通常，用户通过物理按钮（如电源按钮）触发待机操作，而不是通过应用直接请求待机。</li><li><strong>系统兼容性</strong>：不同的设备和操作系统版本可能对电源管理有不同的实现和限制，需要进行充分的测试以确保兼容性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习路线</title>
      <link href="/2025/01/07/studyroad/"/>
      <url>/2025/01/07/studyroad/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f02542bebb6e40aaa8b82249d0d9e6c03451bdfbcc9bf39ccf6a1598b45eff61"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复盘</title>
      <link href="/2025/01/07/summary/"/>
      <url>/2025/01/07/summary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="01e36d04b760b2d9cd4ce2f037ff94f64093a7fa4785b67ac67d0f95194a78ce">c4e10b51b61f4f400c1ff7e4a9e7d6cb07a0559cc0ad677144c208f21c1f5d7f082e8ed1da9721b6b8a8b5c6200301308f37ccba8ada25a76197cfb9759f7fa6ba475655813f1e042973b492d180d8d195b6eaa92316e2f200abfe825771a4952ac1ee406e62b85a6ade648234c80e9260192a7c747e5a551ad0797428471efcbb3ae4fa8b738fe9daebe8a55deadfd6949ac1d5e553c7f5d3d449566f93d6e4ddcd4d9edfffc40653e29f3b672cb7e8f336b7548761990f5924827cd25cba828eec3d795b21c313ac2fa2bc425b652d5bb71f43f658cbeab3beb378c7da8317f00941cb8ae1dd6bfac330749648333af642e458fa6adc99e771eae62cd5cc1172a93886e6db1464196039aa3c524391c9335737b1ab495bae0d6d3777a7b54661369e214e8b43b56dc34f44626a44d1c6e7fe0eb120a93cbfffefdefbccbfa4e372873e96e9745f2bee079bb76f2b0b9988b824681a02613c1eb7bcbaefe5f8cc91d9f38ac58a18de1ecc6dd0d1fcd8de0aa3d39f319ebb73557bcd57506cbc9e3e3b5a3d48cf694024d373b2c1cbba92ef2db8da8929b02b77e50f95aa943c3a1715a779feec5b54a801a1858413079a87b5f3e979cc4824bd076062f5f710da2caa6309c76d5f8cbd1ff3656a89ec1cd642df316e4cfe5c0023e50ee5c197300930d420eb4b78122a373b68da779f164ff255ae114aa8a7c48f90d37b2030b8f0146f3c30301063f6c9c2f0ee0e1fef4efbf102a398daf1522ae0b8923f323f477f6cec96e7b5814d9c926bc75fdf36b50cc5c579b6bf3270fa04d1e2330db51e863b64d453db3bbc713c8a5eae7eece9758d67c6d7563926e6e0d5664ea75d7e8744e838822c3305738ce56389485c33a6f0f56f3c6e36c4000a2acc92a886a58ebe989912d3c0f0b27d4fcafc1460bfa5819334046db5f5587201fcb1db7c5e61cfbc34c3c30b669fad41657a202ddaa7a797a38a94105adc96f160fba86df2a53ac45cc5db823a970acc2fc2d76e4085efa4384dcde289f7aaa482773e8f23a9ed4e3bf1fbda3e2ed2d4aa0d2f3da39fa5b3b6f24b072190357863273dd231c4c451b7b04017e02d8a5652367b3bf9fea84dc4bb7fe97c19b02d2e66540001e6a24d00f1d1d86decb557547523da448e2c964ebd3efebe9d9a475bcea5546dfc02b56911724c40058c22fcd1b8046b23c84a58d5397f7bccec675891c725e8697e77177d749422872e0826eb8b7d7c62a4bd25e2d7e6c90045e49727d1ee3d3c18b22eb2db083efb87970a4342d83a8e850acb99c4b2ab312f61f1523be99faaf163b2d89da0c145c86299b3dafd2da3022c9bf3f519d5f1c05ecf723cadcbcc511320ff3bd74c09be9e0a4ba5d9123c8869ec585981fffc731130b655ffe5c3f2bf790037823dd5cb3223dc5b07da7df02d0bb22a7a0f8dbff178146605308a51550ecb645316777b9c28355187d94ef3b1612808dbb1a5456eb4c21cb990db2227642eddd73aa180d7ccf827109e5053227dff6332bad35c011522b642c4ebaaa536c7eba81e5f7f1e1a7ace24c2b596ff8c83e10d73b40364085485aab7bf4f8155c8348dcd80b353eb429b92a0442f595cba85f0dbb6a5ec51c822349d567799a766f330af82dc114776e412c3846447a5ad20b5edd4f1af955cb29e364605a87fd952f5587f55001ac7149f622ea225d7ac77ce0d0e44f9e0717f3243dbff0d41cc63e683dd0132d273c8d362b34422fe5f1ce589fadc69c3d73cb8e047fae8b467525c7ad3cb2f9c278b7e3bbf38cb647a40b116d6c3ec3db556866f824d7a35671e7d44bde2b91fa60a3013e33752fcdf18e8955b8c8c9c0ac73d1884d53e2837297d83b5a607230d72091b7973b68ddd0c77909e4ebe6127d928c976a8fbf27fe56cdc6abea0aac7e5eceead32add5ee6f8a047e00c4321e9ae5d881eb535728b1e43d96a9f4c7a0c2555349f9559a93063cde72d6fe8cb63f7a29193c5032f2b6db566b1861f9669ecdee6abb0d7fa2b5ab3b4997e5c68fa21e8f1322b2d4dc970deed310c2acda396fa0d8ef93d39c39f3bb9675881724ae53f5c8891b7643e10fd5543de8afd0d47ae8ee39247856cbd64563c0495604dbc41304b497b766ba25c5f43eb69b237195a63ecdd54d8d633968fd97c9434458eb76ac67d9eec05e117af78a91b7a4fa1880479471f2a1902c5c5ba2ca955ce96588b2a64a80a48b44f18c7fc2db22a5a8b38d47542ecc80c6ab1328c819e3102d3050b49bfdc9c3877fdb7ff469634b297967e8d71bedde75d4db56bd4ad048331177aa13310572bbe6f6572feb9ba20e297c0238971abf859740e094a87dced57f1ee66ef0f02fd33d616bc512ad8969fb4621e945be4dedcb115fa6d0226028c75f40ed5223bafec088b8d40c563a1ba910c33335aba09cfb1f71a2c43c973fe776ee5679f9168e3680f3d04e3b1e7295325e8bba1a1550da1a1b5ba3cc2b6524eead9ad7e0804031fa807b86ae33c4637e249396b39baf895ece089bef41b6c6c33d61ca8589cce0cead78cf84ea3461f1bdd107ced12c8d88ed0680f63cd5d822656facd657c0b8030d98fe28cb85372181a79b58368745d3fe069911c815227a8bb8c541a9803dc543c94e32ba6d3343bbbda11d3da53198e6f9f4a1b92f8eb01ec56121503de85d37cf7f1b63d147742dbddb8eb6c19987e61e69caee5e0226b5215773aae336bd325eabaaaf973e92e19b936b7515cbbefd0c98409ffa9fedbc0ef267435fec3f92850588c7aabf70099051e55be4a83ffc0e42d2c24bf78055b877537a91231c5978456749652d1ae35c4e155f33b56f3698dba003d21b07671d7eda5494d31274b0d7ea24152dd63742de3ce43e51e81b4c347b3969ff8405f1d45f1f0ae07c66926562bf79ee354f12fa09f43d2eee55f842096a04700d5994e1536f2070bd582bfa06397331194bac23ee42ed6581a42571d14688c54e05247cf76cacbfbebefda15883bfbd30d112d0bf50e668881d1ce678dfb1b56fb898a2d0e8c0d1451529d880f3a13cd9311be6f0eff0a78e715fd5fd80725e07c68877eab8f48e50bd74cb75f10114eb90300dd3f454c2ba30dd5900834ec0ccd54dbe226c67daee5f66fc5c48af4cad621b8bb2ff7f0d27c96b87623fb2a0041c3f6de53cc3c8fd4c19e80bc830e562f418cb4906bc911c8aa0723ae3981e7c593e008cfb463c588cabd76719c12d0c3ea893b4de93037baeece40c22d7e76097382ca6bd8e66a98114e945ea9b8a99f9ff550ee8278a772cf04c686f35885190ab4fb8567b5eaf7fe5f0594128b12a8916b76da0e7779fea67db5411bc689901c167e7fa598aa4e59a9090667d59962237349acfe1b044a99b0718020a4b96c3a7dbe809ea177d455390de8eb377a4c0af34adaa4de46e5a4d341d6af383e8ce3eade40f2e082e883bd66e2a2f1831bcfdd321fa6326f61fac2946350975c3976dc04c6750e754b1bce3929c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 副业 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 店铺 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀文章 - Android</title>
      <link href="/2025/01/06/nicearticles/"/>
      <url>/2025/01/06/nicearticles/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/386bbb5fa29a">Android卡顿掉帧问题分析之原理篇</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题 - Android</title>
      <link href="/2025/01/06/forinterview/"/>
      <url>/2025/01/06/forinterview/</url>
      
        <content type="html"><![CDATA[<p>APP进程启动流程<br>Activity finish流程<br>WMS addWindow的主要工作<br>介绍一下Task<br>说一下窗口容器树结构<br>WindowToken和WindowState是什么关系<br>Activity界面最终显示出来的整体流程<br>内存增长怎么分析<br>kotlin 协程和线程有什么区别<br>Framework调试怎么加断点</p><p>A是C端，B是S端，<br>问 如何保证 A 知道B 是否存活，，B如何知道 A存活,<br>如果 A死了，B该怎么办？<br>B 死了 A该怎么办？</p><p>‘## 问原理<br>*什么是 Android Binder?<br>Android Binder 是如何实现进程间通信的?<br>Android 为什么采用 Binder 作为主要的的 IPC 机制?<br>Binder 是如何实现仅通过一次拷贝将数据从 A 进程传递给 B 进程的?<br>Binder 的优势是什么?<br>这些都是问 Binder 的基本原理，回答都大同小异。对于应用层开发，99%止步于此，再问就不礼貌了。<br>如果是应聘 Framework 岗位，可能还需要熟悉下面的问题。</p><h2 id="问流程"><a href="#问流程" class="headerlink" title="问流程"></a>问流程</h2><p>说一下进程从ServiceManager获取服务的流程Binder 是如何找到目标服务并唤醒目标进程&#x2F;线程的Android Binder 中的 Proxy 和 Stub 是什么<br>应用该如何获取和添加 Binder 服务?<br>AIDL 是什么?如何使用的?<br>Android Binder 中有哪些组件?工作的流程是什么?<br>无论怎么问，只要把之前讲的 Native 和 Java 层示例程序的源码分析掌握，就可以以不变应万变</p><h2 id="问细节"><a href="#问细节" class="headerlink" title="问细节"></a>问细节</h2><p>了解 mmap 的原理吗?<br>使用 Binder 传输数据的最大限制是多少，被占满后会导致什么问题?<br>Intent 传递大数据限制?<br>binder_proc 结构体中有两个 binder_ref 红黑树，它们的作用是什么?<br>Android APP 进程天生支持Binder通信的原理是什么?<br>AIDL 中的 in out inout oneway 这些关键字的作用是什么?<br>Intent 传递大数据限制?<br>Binder 服务在调用期间抛出了 RuntimeException 异常，服务端会 crash 么?<br>客户端调用 Binder 接口后抛出的 DeadobjectException 是什么意思?<br>Binder 驱动加载过程中有哪些重要的步骤?<br>Binder 的死亡通知机制的作用是什么，它是如何实现的?<br>bindservice 所绑定的”服务概念和 Binder 中的服务 Server 有什么区别?<br>writestrongBinder与readstrongBinder的作用和原理?<br>每个进程最多存在多少个 Binder 线程，这些线程都被占满后会导致什么问题?<br>Binder 驱动什么时候释放缓冲区的内存?<br>为什么使用广播传输 2MB的Bitmap会抛异常，而使用AIDL生成的 Binder 接口传输 Bitmap 就<br>不会抛异常呢?<br>应用进程为什么支持 Binder 通信，直接可以使用四大组件呢?<br>四大组件中常见的 2 个 Binder 服务是?<br>Binder 都有什么主要的协议?Binder 协议中BC 与BR 开头的协议都有什么区别?*A 是 c 端，B 是s 端，问 如何保证 A 知道 8 是否存活，，B 如何知道 A 存活，如果 A 死了，B 该怎么办?B 死了 A 该怎么办?<br>细节就比较见功底了，需要我们从应用到内核层，对 Binder 有非常全面的了解。</p><p>1.invalidate和requestlayout对后续绘制渲染有什么不同?<br>2.为什么View刚被加载时想获取其的宽高,需要view.post(Runnalbe)中获取?3.黄油计划提出的Vsync和三缓冲机制为什可以大大改善Android的交互和流畅度体验?<br>4. Vsync信号是谁发出的?需要App主动请求吗?界面没有变化是否会有Vsync信号?<br>App是否响应Vsync信号取决于什么?<br>5.调用android绘制三部曲(measure、layout和draw)的performTraversals是怎么触发的?<br>6.Android的同步屏障和异步消息是什么，它们如何在渲染机制中发挥作用的?7.SurfaceView°&#x2F;TextureView渲染视频时频繁的刷新界面，为什么U!界面不卡顿?8.android 5.0引入的硬件加速RenderThread是如何提升渲染效率的?指令归类重排序是什么?<br>9.动画可以在RenderThread上执行吗<br>10.使用OpengGLES渲染时进行eglSwapBuffer切换前后台Buffer依赖Vsync信号吗?11.App进程将views树构建为DisplayList给到GPU进行渲染到Surface 上作为BufferQueue°的生产者，SurfaceFlinger是BufferQueue的消费者获取Surface转为layer进行不同layer的合成，那么App进程和SurfaceFlinger进程是如何通信的?12.VSYNC信号是通过什么方式传递?<br>13.整体上介绍下Android绘制渲染流程，App开发者熟悉渲染流程后对于日常开发有什<br>么帮助?</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧</title>
      <link href="/2024/12/21/someskills/"/>
      <url>/2024/12/21/someskills/</url>
      
        <content type="html"><![CDATA[<h2 id="如何一次性删除所有以某关键词结尾的文件"><a href="#如何一次性删除所有以某关键词结尾的文件" class="headerlink" title="如何一次性删除所有以某关键词结尾的文件"></a>如何一次性删除所有以某关键词结尾的文件</h2><blockquote><p>其他类型删除以此类推</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#x27;*.ko&#x27; -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="Git-push报错"><a href="#Git-push报错" class="headerlink" title="Git push报错"></a>Git push报错</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection refused fatal: Could not read from remote repository.  Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure><p>这个错误表明 Git 无法通过 SSH（端口 22）连接到 GitHub。可能的原因和解决方法如下：</p><h3 id="1-检查-SSH-连接"><a href="#1-检查-SSH-连接" class="headerlink" title="1. 检查 SSH 连接"></a>1. <strong>检查 SSH 连接</strong></h3><p>运行以下命令测试 SSH 连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果连接被拒绝，可能是网络或防火墙问题。</p><h3 id="2-改用-HTTPS-协议"><a href="#2-改用-HTTPS-协议" class="headerlink" title="2. 改用 HTTPS 协议"></a>2. <strong>改用 HTTPS 协议</strong></h3><p>如果 SSH 被屏蔽，可以临时改用 HTTPS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/用户名/仓库名.git</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>（需要输入 GitHub 账号密码或个人访问令牌）</p><h3 id="3-尝试-SSH-端口-443"><a href="#3-尝试-SSH-端口-443" class="headerlink" title="3. 尝试 SSH 端口 443"></a>3. <strong>尝试 SSH 端口 443</strong></h3><p>如果 22 端口被屏蔽，GitHub 也支持通过 443 端口使用 SSH。编辑 <code>~/.ssh/config</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User xxxxqq.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>然后再次测试 SSH 连接。</p><h3 id="4-检查防火墙-代理设置"><a href="#4-检查防火墙-代理设置" class="headerlink" title="4. 检查防火墙&#x2F;代理设置"></a>4. <strong>检查防火墙&#x2F;代理设置</strong></h3><ul><li>确保本地防火墙或公司网络未屏蔽 SSH（端口 22&#x2F;443）</li><li>如果使用代理，需配置 Git 使用代理：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://代理地址:端口</span><br><span class="line">git config --global https.proxy https://代理地址:端口</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-验证-SSH-密钥"><a href="#5-验证-SSH-密钥" class="headerlink" title="5. 验证 SSH 密钥"></a>5. <strong>验证 SSH 密钥</strong></h3><p>确保你的 SSH 密钥已添加到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后将内容粘贴到 GitHub Settings → SSH and GPG keys。</p><h3 id="6-检查仓库是否存在"><a href="#6-检查仓库是否存在" class="headerlink" title="6. 检查仓库是否存在"></a>6. <strong>检查仓库是否存在</strong></h3><p>确认远程仓库地址正确且存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
