<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【每日早报】</title>
      <link href="/2025/08/21/%E3%80%90%E6%AF%8F%E6%97%A5%E6%97%A9%E6%8A%A5%E3%80%91/"/>
      <url>/2025/08/21/%E3%80%90%E6%AF%8F%E6%97%A5%E6%97%A9%E6%8A%A5%E3%80%91/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>每日早报</title></head><body>    <div style="text-align: center;"> <img src="https://file.alapi.cn/60s/202508211755713701.png"            alt="每日早报" width="100%"> </div></body></html>]]></content>
      
      
      <categories>
          
          <category> 每日早报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日早报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 快速回忆</title>
      <link href="/2025/08/15/kotlin/"/>
      <url>/2025/08/15/kotlin/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin-快速回忆与实用对照（Java-转-Kotlin-完整版）"><a href="#Kotlin-快速回忆与实用对照（Java-转-Kotlin-完整版）" class="headerlink" title="Kotlin 快速回忆与实用对照（Java 转 Kotlin 完整版）"></a>Kotlin 快速回忆与实用对照（Java 转 Kotlin 完整版）</h1><h2 id="1-基础语法与数据类型"><a href="#1-基础语法与数据类型" class="headerlink" title="1. 基础语法与数据类型"></a><strong>1. 基础语法与数据类型</strong></h2><table><thead><tr><th>功能</th><th>Java 写法</th><th>Kotlin 写法</th><th>说明</th></tr></thead><tbody><tr><td>变量</td><td><code>String name = &quot;Tom&quot;;</code></td><td><code>val name = &quot;Tom&quot;</code>（只读） &#x2F; <code>var name = &quot;Tom&quot;</code>（可变）</td><td>Kotlin 自动类型推断</td></tr><tr><td>可空类型</td><td><code>String s = null;</code></td><td><code>var s: String? = null</code></td><td><code>?</code> 表示可为 null</td></tr><tr><td>常量</td><td><code>public static final int MAX = 10;</code></td><td><code>const val MAX = 10</code></td><td>编译期常量</td></tr><tr><td>延迟初始化</td><td>-</td><td><code>lateinit var name: String</code></td><td>只能用于非基本类型的 var</td></tr><tr><td>类型转换</td><td><code>(int) 3.14</code></td><td><code>3.14.toInt()</code></td><td>所有类型都是对象</td></tr><tr><td>类型检测</td><td><code>if (obj instanceof String)</code></td><td><code>if (obj is String)</code></td><td>结合智能类型转换</td></tr></tbody></table><hr><h2 id="2-控制结构"><a href="#2-控制结构" class="headerlink" title="2. 控制结构"></a><strong>2. 控制结构</strong></h2><h3 id="if-三元运算"><a href="#if-三元运算" class="headerlink" title="if &#x2F; 三元运算"></a>if &#x2F; 三元运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kotlin</span></span><br><span class="line"><span class="type">val</span> <span class="variable">max</span> <span class="operator">=</span> <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><h3 id="when-替代-switch"><a href="#when-替代-switch" class="headerlink" title="when 替代 switch"></a>when 替代 switch</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">0</span> -&gt; println(<span class="string">&quot;Zero&quot;</span>)</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span> -&gt; println(<span class="string">&quot;One or Two&quot;</span>)</span><br><span class="line">    <span class="keyword">in</span> <span class="number">3.</span><span class="number">.10</span> -&gt; println(<span class="string">&quot;3~10&quot;</span>)</span><br><span class="line">    !<span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span> -&gt; println(<span class="string">&quot;Out of range&quot;</span>)</span><br><span class="line">    <span class="keyword">is</span> String -&gt; println(<span class="string">&quot;String&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Other&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-函数与参数"><a href="#3-函数与参数" class="headerlink" title="3. 函数与参数"></a><strong>3. 函数与参数</strong></h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单表达式函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">greet</span><span class="params">(name: <span class="type">String</span> = <span class="string">&quot;Guest&quot;</span>)</span></span> = println(<span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span>)</span><br><span class="line">greet()</span><br></pre></td></tr></table></figure><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>, color: <span class="type">String</span>)</span></span> &#123; ... &#125;</span><br><span class="line">draw(color = <span class="string">&quot;red&quot;</span>, x = <span class="number">10</span>, y = <span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(<span class="keyword">vararg</span> nums: <span class="type">Int</span>)</span></span> = nums.sum()</span><br></pre></td></tr></table></figure><hr><h2 id="4-类与对象"><a href="#4-类与对象" class="headerlink" title="4. 类与对象"></a><strong>4. 类与对象</strong></h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">speak</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(name: String, <span class="keyword">val</span> grade: <span class="built_in">Int</span>) : Person(name) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">speak</span><span class="params">()</span></span> &#123; println(<span class="string">&quot;I&#x27;m <span class="variable">$name</span>, grade <span class="variable">$grade</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类（data-class）"><a href="#数据类（data-class）" class="headerlink" title="数据类（data class）"></a>数据类（data class）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"><span class="keyword">val</span> u = User(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>)</span><br><span class="line">println(u.copy(age = <span class="number">21</span>))</span><br></pre></td></tr></table></figure><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> NetworkManager &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">connect</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伴生对象（companion）"><a href="#伴生对象（companion）" class="headerlink" title="伴生对象（companion）"></a>伴生对象（companion）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">staticMethod</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Utils.staticMethod()</span><br></pre></td></tr></table></figure><hr><h2 id="5-接口与匿名类"><a href="#5-接口与匿名类" class="headerlink" title="5. 接口与匿名类"></a><strong>5. 接口与匿名类</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Clickable</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> c = <span class="keyword">object</span> : Clickable &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">()</span></span> &#123; println(<span class="string">&quot;Clicked&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-集合与函数式编程"><a href="#6-集合与函数式编程" class="headerlink" title="6. 集合与函数式编程"></a><strong>6. 集合与函数式编程</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)       <span class="comment">// 只读</span></span><br><span class="line"><span class="keyword">val</span> mList = mutableListOf(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 可变</span></span><br><span class="line"></span><br><span class="line">list.filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line">    .map &#123; it * it &#125;</span><br><span class="line">    .forEach &#123; println(it) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> map = mapOf(<span class="string">&quot;a&quot;</span> to <span class="number">1</span>, <span class="string">&quot;b&quot;</span> to <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> ((k, v) <span class="keyword">in</span> map) println(<span class="string">&quot;<span class="variable">$k</span> = <span class="variable">$v</span>&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="7-空安全与-Elvis-运算符"><a href="#7-空安全与-Elvis-运算符" class="headerlink" title="7. 空安全与 Elvis 运算符"></a><strong>7. 空安全与 Elvis 运算符</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name: String? = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="keyword">val</span> length = name?.length ?: <span class="number">0</span> <span class="comment">// 如果 name 为 null，返回 0</span></span><br><span class="line">println(name!!.length) <span class="comment">// 强制非空</span></span><br></pre></td></tr></table></figure><hr><h2 id="8-扩展函数"><a href="#8-扩展函数" class="headerlink" title="8. 扩展函数"></a><strong>8. 扩展函数</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lastChar</span><span class="params">()</span></span> = <span class="keyword">this</span>[length - <span class="number">1</span>]</span><br><span class="line">println(<span class="string">&quot;Hello&quot;</span>.lastChar())</span><br></pre></td></tr></table></figure><hr><h2 id="9-高阶函数与-Lambda"><a href="#9-高阶函数与-Lambda" class="headerlink" title="9. 高阶函数与 Lambda"></a><strong>9. 高阶函数与 Lambda</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">operate</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>, op: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span> = op(x, y)</span><br><span class="line"><span class="keyword">val</span> sum = operate(<span class="number">2</span>, <span class="number">3</span>) &#123; a, b -&gt; a + b &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="10-作用域函数（let-run-apply-also-with）"><a href="#10-作用域函数（let-run-apply-also-with）" class="headerlink" title="10. 作用域函数（let &#x2F; run &#x2F; apply &#x2F; also &#x2F; with）"></a><strong>10. 作用域函数（let &#x2F; run &#x2F; apply &#x2F; also &#x2F; with）</strong></h2><table><thead><tr><th>函数</th><th>作用</th><th>返回</th></tr></thead><tbody><tr><td>let</td><td>转换&#x2F;链式处理</td><td>最后一行</td></tr><tr><td>run</td><td>执行代码块</td><td>最后一行</td></tr><tr><td>apply</td><td>初始化对象</td><td>对象本身</td></tr><tr><td>also</td><td>附加操作</td><td>对象本身</td></tr><tr><td>with</td><td>非扩展版本 run</td><td>最后一行</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str.let &#123; println(it.uppercase()) &#125;</span><br><span class="line"><span class="keyword">val</span> p = Person(<span class="string">&quot;Tom&quot;</span>).apply &#123; speak() &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="11-协程基础（Java-无直接对应）"><a href="#11-协程基础（Java-无直接对应）" class="headerlink" title="11. 协程基础（Java 无直接对应）"></a><strong>11. 协程基础（Java 无直接对应）</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlobalScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = withContext(Dispatchers.IO) &#123; loadData() &#125;</span><br><span class="line">    println(<span class="keyword">data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="12-Android-常用-Kotlin-用法"><a href="#12-Android-常用-Kotlin-用法" class="headerlink" title="12. Android 常用 Kotlin 用法"></a><strong>12. Android 常用 Kotlin 用法</strong></h2><ul><li><strong>ViewBinding 替代 findViewById</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">setContentView(binding.root)</span><br><span class="line">binding.btn.setOnClickListener &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>RecyclerView Adapter 简化</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdapter</span> : <span class="type">ListAdapter</span>&lt;<span class="type">Item, VH</span>&gt;(DiffUtilCallback) &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>点击防抖</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> View.<span class="title">setOnDebouncedClickListener</span><span class="params">(delay: <span class="type">Long</span> = <span class="number">500</span>, action: (<span class="type">View</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>集合 API 处理 UI 列表</strong></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> visibleItems = items.filter &#123; it.isVisible &#125;</span><br></pre></td></tr></table></figure><hr><p>好，那我帮你把刚才的 Java→Kotlin 对照速查再补齐到完整版本，把 Kotlin 比较“进阶”和“少见但强大”的特性也加上，包括委托、密封类、内联函数、泛型、操作符重载等，让你既能快速回忆，也能一步到位掌握新能力。</p><h2 id="13-密封类（sealed-class）"><a href="#13-密封类（sealed-class）" class="headerlink" title="13. 密封类（sealed class）"></a><strong>13. 密封类（sealed class）</strong></h2><ul><li>用来限制继承范围，常用于状态机、结果封装。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Result</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Success</span>(<span class="keyword">val</span> <span class="keyword">data</span>: String) : Result()</span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Error</span>(<span class="keyword">val</span> e: Throwable) : Result()</span><br><span class="line"><span class="keyword">object</span> Loading : Result()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handle</span><span class="params">(r: <span class="type">Result</span>)</span></span> = <span class="keyword">when</span> (r) &#123;</span><br><span class="line">    <span class="keyword">is</span> Success -&gt; println(<span class="string">&quot;OK: <span class="subst">$&#123;r.data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">is</span> Error -&gt; println(<span class="string">&quot;Err: <span class="subst">$&#123;r.e&#125;</span>&quot;</span>)</span><br><span class="line">    Loading -&gt; println(<span class="string">&quot;Loading...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对比 Java 的 <code>enum</code>，密封类能携带不同数据类型，且可在 <code>when</code> 中强制穷尽所有分支。</p></blockquote><hr><h2 id="14-委托（by）"><a href="#14-委托（by）" class="headerlink" title="14. 委托（by）"></a><strong>14. 委托（by）</strong></h2><ul><li><strong>类委托</strong>：实现接口时，把实现委托给另一个对象。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Logger</span> &#123; <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConsoleLogger</span> : <span class="type">Logger</span> &#123; <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(msg: <span class="type">String</span>)</span></span> = println(msg) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span>(logger: Logger) : Logger <span class="keyword">by</span> logger</span><br><span class="line"><span class="keyword">val</span> s = MyService(ConsoleLogger())</span><br><span class="line">s.log(<span class="string">&quot;Hello&quot;</span>) <span class="comment">// 委托调用 ConsoleLogger.log</span></span><br></pre></td></tr></table></figure><ul><li><strong>属性委托</strong>：懒加载、可观察等。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123; <span class="string">&quot;computed&quot;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> name: String <span class="keyword">by</span> Delegates.observable(<span class="string">&quot;&lt;no name&gt;&quot;</span>) &#123; prop, old, new -&gt;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$old</span> -&gt; <span class="variable">$new</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="15-内联函数（inline）"><a href="#15-内联函数（inline）" class="headerlink" title="15. 内联函数（inline）"></a><strong>15. 内联函数（inline）</strong></h2><ul><li>消除高阶函数带来的对象创建与调用开销，常与 <code>crossinline</code>、<code>noinline</code> 配合。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">measureTime</span><span class="params">(block: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> start = System.nanoTime()</span><br><span class="line">    block()</span><br><span class="line">    println(<span class="string">&quot;Took <span class="subst">$&#123;System.nanoTime() - start&#125;</span>ns&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">measureTime &#123; println(<span class="string">&quot;Task&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="16-泛型与-reified"><a href="#16-泛型与-reified" class="headerlink" title="16. 泛型与 reified"></a><strong>16. 泛型与 reified</strong></h2><ul><li><code>reified</code> 让泛型在运行时保留类型信息（仅限内联函数）。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> Gson.<span class="title">fromJson</span><span class="params">(json: <span class="type">String</span>)</span></span> =</span><br><span class="line">    <span class="keyword">this</span>.fromJson(json, T::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> user: User = gson.fromJson(jsonString)</span><br></pre></td></tr></table></figure><hr><h2 id="17-操作符重载"><a href="#17-操作符重载" class="headerlink" title="17. 操作符重载"></a><strong>17. 操作符重载</strong></h2><ul><li>Kotlin 允许自定义 <code>+</code>, <code>-</code>, <code>[]</code> 等。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Point</span>(<span class="keyword">val</span> x: <span class="built_in">Int</span>, <span class="keyword">val</span> y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Point</span>)</span></span> = Point(x + other.x, y + other.y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> p = Point(<span class="number">1</span>, <span class="number">2</span>) + Point(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// Point(4, 6)</span></span><br></pre></td></tr></table></figure><hr><h2 id="18-解构声明"><a href="#18-解构声明" class="headerlink" title="18. 解构声明"></a><strong>18. 解构声明</strong></h2><ul><li>类的 <code>componentN()</code> 方法支持直接拆解对象。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"><span class="keyword">val</span> (n, a) = User(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="19-匿名对象（object-expression）与伴生对象"><a href="#19-匿名对象（object-expression）与伴生对象" class="headerlink" title="19. 匿名对象（object expression）与伴生对象"></a><strong>19. 匿名对象（object expression）与伴生对象</strong></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> listener = <span class="keyword">object</span> : View.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123; println(<span class="string">&quot;Clicked&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">staticMethod</span><span class="params">()</span></span> = println(<span class="string">&quot;Static&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Utils.staticMethod()</span><br></pre></td></tr></table></figure><hr><h2 id="20-类型别名"><a href="#20-类型别名" class="headerlink" title="20. 类型别名"></a><strong>20. 类型别名</strong></h2><ul><li>简化长类型声明。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> ClickListener = (View) -&gt; <span class="built_in">Unit</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setClick</span><span class="params">(listener: <span class="type">ClickListener</span>)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="21-中缀函数（infix）"><a href="#21-中缀函数（infix）" class="headerlink" title="21. 中缀函数（infix）"></a><strong>21. 中缀函数（infix）</strong></h2><ul><li>让调用更像自然语言。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">times</span><span class="params">(str: <span class="type">String</span>)</span></span> = str.repeat(<span class="keyword">this</span>)</span><br><span class="line">println(<span class="number">2</span> times <span class="string">&quot;Bye&quot;</span>) <span class="comment">// ByeBye</span></span><br></pre></td></tr></table></figure><hr><h2 id="22-内部函数（local-function）"><a href="#22-内部函数（local-function）" class="headerlink" title="22. 内部函数（local function）"></a><strong>22. 内部函数（local function）</strong></h2><ul><li>在函数内定义函数，封装重复逻辑。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">check</span><span class="params">(value: <span class="type">String</span>, name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.isBlank()) <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;<span class="variable">$name</span> empty&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    check(user.name, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line">    check(user.email, <span class="string">&quot;Email&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="23-内部类与嵌套类"><a href="#23-内部类与嵌套类" class="headerlink" title="23. 内部类与嵌套类"></a><strong>23. 内部类与嵌套类</strong></h2><ul><li>Kotlin 默认类是静态嵌套类，需要 <code>inner</code> 才能持有外部类引用。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> bar = <span class="number">1</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123; <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = bar &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="24-Android-场景下的-Kotlin-进阶用法"><a href="#24-Android-场景下的-Kotlin-进阶用法" class="headerlink" title="24. Android 场景下的 Kotlin 进阶用法"></a><strong>24. Android 场景下的 Kotlin 进阶用法</strong></h2><h3 id="RecyclerView-Adapter-极简"><a href="#RecyclerView-Adapter-极简" class="headerlink" title="RecyclerView Adapter 极简"></a>RecyclerView Adapter 极简</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserAdapter</span> :</span><br><span class="line">    <span class="type">ListAdapter</span>&lt;<span class="type">User, UserAdapter.VH</span>&gt;(diffCallback) &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">VH</span>(<span class="keyword">val</span> b: ItemUserBinding) : RecyclerView.ViewHolder(b.root)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(p: <span class="type">ViewGroup</span>, vt: <span class="type">Int</span>)</span></span> =</span><br><span class="line">        VH(ItemUserBinding.inflate(LayoutInflater.from(p.context), p, <span class="literal">false</span>))</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(h: <span class="type">VH</span>, pos: <span class="type">Int</span>)</span></span> = h.b.apply &#123;</span><br><span class="line">        <span class="keyword">val</span> u = getItem(pos)</span><br><span class="line">        name.text = u.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View-点击去抖"><a href="#View-点击去抖" class="headerlink" title="View 点击去抖"></a>View 点击去抖</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> View.<span class="title">onClickDebounce</span><span class="params">(delay: <span class="type">Long</span> = <span class="number">500</span>, block: (<span class="type">View</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0L</span></span><br><span class="line">    setOnClickListener &#123;</span><br><span class="line">        <span class="keyword">val</span> now = SystemClock.uptimeMillis()</span><br><span class="line">        <span class="keyword">if</span> (now - last &gt;= delay) &#123;</span><br><span class="line">            last = now</span><br><span class="line">            block(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="协程-Retrofit"><a href="#协程-Retrofit" class="headerlink" title="协程 + Retrofit"></a>协程 + Retrofit</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Api</span> &#123; <span class="meta">@GET(<span class="string">&quot;users&quot;</span>)</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getUsers</span><span class="params">()</span></span>: List&lt;User&gt; &#125;</span><br><span class="line"><span class="keyword">val</span> users = withContext(Dispatchers.IO) &#123; api.getUsers() &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="25-Java-→-Kotlin-迁移小技巧"><a href="#25-Java-→-Kotlin-迁移小技巧" class="headerlink" title="25. Java → Kotlin 迁移小技巧"></a><strong>25. Java → Kotlin 迁移小技巧</strong></h2><ol><li><strong>保留 Java 逻辑结构</strong>，先让编译通过，再做语法优化。</li><li><strong>优先替换</strong>：<ul><li><code>findViewById</code> → ViewBinding</li><li>工具类静态方法 → 扩展函数</li><li>数据实体 → data class</li><li>集合遍历 → <code>forEach</code> &#x2F; <code>map</code> &#x2F; <code>filter</code></li></ul></li><li><strong>空安全处理</strong>：<ul><li><code>?.</code>、<code>?:</code> 替代显式 null 判断。</li></ul></li><li><strong>逐步引入</strong>协程，不要一次性重写所有异步逻辑。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 文章 </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 多语言表格转 xml/JSON</title>
      <link href="/2025/08/12/excelttransfer/"/>
      <url>/2025/08/12/excelttransfer/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-多语言-Excel-表格转-JSON"><a href="#Android-多语言-Excel-表格转-JSON" class="headerlink" title="Android 多语言 Excel 表格转 JSON"></a>Android 多语言 Excel 表格转 JSON</h1><blockquote><p>Android 系统开发中，经常会遇到客户提供多语言词条表格，我们再将其转换成xml放到res文件夹下；</p><p>通常这个工作量会比较大，因为一般提供过来的词条如果不是开发新需求新增的话，数量会有几百至上千条，这个时候我们手动转并不太现实了，所以可以用到一些脚本或者工具；</p><p>这里就用python实现将excel表格转成xml或者json格式文件；</p></blockquote><h2 id="表格格式"><a href="#表格格式" class="headerlink" title="表格格式"></a>表格格式</h2><blockquote><p>为了能输出正确的文件格式，首先需要对表格格式做规范，表格的规范也需要同步到客户，便于拿到表格可以直接使用，减少开发时间；</p></blockquote><p>表格格式通常如下：第一列为key，后面每列对应语言缩写</p><table><thead><tr><th>key</th><th>en</th><th>zh-CN</th><th>zh-TW</th></tr></thead><tbody><tr><td>app_name</td><td>MyApp</td><td>我的应用</td><td>我的應用</td></tr><tr><td>welcome_msg</td><td>Welcome, %s!</td><td>欢迎，%s！</td><td>歡迎，%s！</td></tr></tbody></table><h2 id="准备-python-环境"><a href="#准备-python-环境" class="headerlink" title="准备 python 环境"></a>准备 python 环境</h2><blockquote><p>python 环境搭建比较简单，官网下载对应exe安装即可</p><p>官网：<a href="https://www.python.org/">https://www.python.org/</a></p></blockquote><h2 id="脚本源码"><a href="#脚本源码" class="headerlink" title="脚本源码"></a>脚本源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">excel_to_android_json.py</span></span><br><span class="line"><span class="string">把多语言表格转换为 Android values-xx/strings.json</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalize_col_name</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;去掉前后空格、统一成小写&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(name).strip().lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;input&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Excel/CSV 文件路径&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--out-dir&quot;</span>, default=<span class="string">&quot;out&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;输出目录&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--key-col&quot;</span>, default=<span class="string">&quot;key&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;key 列名（默认 key）&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--skip-empty&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;跳过空翻译&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args.<span class="built_in">input</span>):</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;文件不存在: <span class="subst">&#123;args.<span class="built_in">input</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 Excel 或 CSV</span></span><br><span class="line">    <span class="keyword">if</span> args.<span class="built_in">input</span>.lower().endswith((<span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.xlsx&quot;</span>)):</span><br><span class="line">        df = pd.read_excel(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_csv(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    df = df.fillna(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 规范化表头</span></span><br><span class="line">    df.columns = [normalize_col_name(c) <span class="keyword">for</span> c <span class="keyword">in</span> df.columns]</span><br><span class="line">    key_col_norm = normalize_col_name(args.key_col)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印表头方便排查</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;表头列名(规范化后):&quot;</span>, df.columns.tolist())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key_col_norm <span class="keyword">not</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;未找到 key 列 &#x27;<span class="subst">&#123;args.key_col&#125;</span>&#x27;，请检查表头&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到语言列（排除 key 和 comment）</span></span><br><span class="line">    locale_cols = [c <span class="keyword">for</span> c <span class="keyword">in</span> df.columns <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> (key_col_norm, <span class="string">&quot;comment&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    os.makedirs(args.out_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> locale <span class="keyword">in</span> locale_cols:</span><br><span class="line">        kv = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">            key = row[key_col_norm].strip()</span><br><span class="line">            val = row[locale].strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> args.skip_empty <span class="keyword">and</span> val == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            kv[key] = val</span><br><span class="line"></span><br><span class="line">        dir_name = <span class="string">&quot;values&quot;</span> <span class="keyword">if</span> locale <span class="keyword">in</span> (<span class="string">&quot;en&quot;</span>, <span class="string">&quot;default&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="keyword">else</span> <span class="string">f&quot;values-<span class="subst">&#123;locale&#125;</span>&quot;</span></span><br><span class="line">        full_dir = os.path.join(args.out_dir, dir_name)</span><br><span class="line">        os.makedirs(full_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        out_file = os.path.join(full_dir, <span class="string">&quot;strings.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(out_file, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(kv, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已生成 <span class="subst">&#123;out_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas openpyxl</span><br><span class="line">python excel_to_android_json.py 多语言表.xlsx --out-dir out</span><br></pre></td></tr></table></figure><p>生成的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">out/</span><br><span class="line">  values-en/</span><br><span class="line">    strings.json</span><br><span class="line">  values-zh-CN/</span><br><span class="line">    strings.json</span><br><span class="line">  values-zh-TW/</span><br><span class="line">    strings.json</span><br></pre></td></tr></table></figure><h1 id="Android-多语言-Excel-表格转-xml"><a href="#Android-多语言-Excel-表格转-xml" class="headerlink" title="Android 多语言 Excel 表格转 xml"></a>Android 多语言 Excel 表格转 xml</h1><p>只需要对上面的脚本做一些修改即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">excel_to_android_xml.py</span></span><br><span class="line"><span class="string">把多语言表格转换为 Android values-xx/strings.xml</span></span><br><span class="line"><span class="string">支持:</span></span><br><span class="line"><span class="string"> - 自动识别 key 列 (大小写/空格/隐藏字符)</span></span><br><span class="line"><span class="string"> - 转义 &amp;, &lt;, &gt;, &quot;, &#x27;</span></span><br><span class="line"><span class="string"> - 自动映射 Android 标准语言目录名</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android 标准语言代码映射</span></span><br><span class="line">ANDROID_LOCALE_MAP = &#123;</span><br><span class="line">    <span class="string">&quot;zh-cn&quot;</span>: <span class="string">&quot;values-zh-rCN&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zh&quot;</span>: <span class="string">&quot;values-zh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zh-tw&quot;</span>: <span class="string">&quot;values-zh-rTW&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zh-hk&quot;</span>: <span class="string">&quot;values-zh-rHK&quot;</span>,</span><br><span class="line">    <span class="string">&quot;en&quot;</span>: <span class="string">&quot;values&quot;</span>,</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: <span class="string">&quot;values&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalize_col_name</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;去掉前后空格、统一成小写&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(name).strip().lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">safe_android_string</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;转义 Android strings.xml 特殊字符&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pd.isna(s):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    s = <span class="built_in">str</span>(s)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)  <span class="comment"># &amp; 必须先转义</span></span><br><span class="line">    s = s.replace(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">    s = s.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)    <span class="comment"># 双引号</span></span><br><span class="line">    s = s.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)    <span class="comment"># 单引号</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_android_values_dir</span>(<span class="params">locale: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据语言代码生成 Android 规范的 values-xx 目录&quot;&quot;&quot;</span></span><br><span class="line">    locale_norm = locale.lower()</span><br><span class="line">    <span class="keyword">if</span> locale_norm <span class="keyword">in</span> ANDROID_LOCALE_MAP:</span><br><span class="line">        <span class="keyword">return</span> ANDROID_LOCALE_MAP[locale_norm]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;values-<span class="subst">&#123;locale_norm&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;input&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Excel/CSV 文件路径&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--out-dir&quot;</span>, default=<span class="string">&quot;out&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;输出目录&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--key-col&quot;</span>, default=<span class="string">&quot;key&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;key 列名（默认 key）&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--skip-empty&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;跳过空翻译&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args.<span class="built_in">input</span>):</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;文件不存在: <span class="subst">&#123;args.<span class="built_in">input</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 Excel 或 CSV</span></span><br><span class="line">    <span class="keyword">if</span> args.<span class="built_in">input</span>.lower().endswith((<span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.xlsx&quot;</span>)):</span><br><span class="line">        df = pd.read_excel(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_csv(args.<span class="built_in">input</span>, dtype=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    df = df.fillna(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 规范化表头</span></span><br><span class="line">    df.columns = [normalize_col_name(c) <span class="keyword">for</span> c <span class="keyword">in</span> df.columns]</span><br><span class="line">    key_col_norm = normalize_col_name(args.key_col)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;表头列名(规范化后):&quot;</span>, df.columns.tolist())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key_col_norm <span class="keyword">not</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;未找到 key 列 &#x27;<span class="subst">&#123;args.key_col&#125;</span>&#x27;，请检查表头&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到语言列（排除 key 和 comment）</span></span><br><span class="line">    locale_cols = [c <span class="keyword">for</span> c <span class="keyword">in</span> df.columns <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> (key_col_norm, <span class="string">&quot;comment&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    os.makedirs(args.out_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> locale <span class="keyword">in</span> locale_cols:</span><br><span class="line">        kv = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">            key = row[key_col_norm].strip()</span><br><span class="line">            val = row[locale].strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> args.skip_empty <span class="keyword">and</span> val == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            kv[key] = safe_android_string(val)</span><br><span class="line"></span><br><span class="line">        dir_name = get_android_values_dir(locale)</span><br><span class="line">        full_dir = os.path.join(args.out_dir, dir_name)</span><br><span class="line">        os.makedirs(full_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        out_file = os.path.join(full_dir, <span class="string">&quot;strings.xml&quot;</span>)</span><br><span class="line"></span><br><span class="line">        root = ET.Element(<span class="string">&quot;resources&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kv.items():</span><br><span class="line">            el = ET.SubElement(root, <span class="string">&quot;string&quot;</span>, attrib=&#123;<span class="string">&quot;name&quot;</span>: k&#125;)</span><br><span class="line">            el.text = v</span><br><span class="line">        tree = ET.ElementTree(root)</span><br><span class="line">        tree.write(out_file, encoding=<span class="string">&quot;utf-8&quot;</span>, xml_declaration=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已生成 <span class="subst">&#123;out_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas openpyxl</span><br><span class="line">python excel_to_android_json.py 多语言表.xlsx --out-dir out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识ContentProvider</title>
      <link href="/2025/07/24/contentprovider/"/>
      <url>/2025/07/24/contentprovider/</url>
      
        <content type="html"><![CDATA[<h1 id="ContentProvider-设计"><a href="#ContentProvider-设计" class="headerlink" title="ContentProvider 设计"></a>ContentProvider 设计</h1><p>四大组件之一，主要用于在不同应用之间共享数据，ContentProvider 提供了一个一致的接口，应用能够以一种受控和安全的方式访问和修改数据，同时，通过 CP，数据可以被跨进程共享，而不必将数据直接暴露给其他应用。</p><h2 id="ContentProvider-设计初衷"><a href="#ContentProvider-设计初衷" class="headerlink" title="ContentProvider 设计初衷"></a>ContentProvider 设计初衷</h2><ol><li><strong>数据共享</strong>：Android 中，应用之间不允许直接访问数据，CP 提供了一种标准方式让应用安全共享数据</li><li><strong>数据封装</strong>：通过 CP，数据存取逻辑可以封装在一个单独组件中，其他组件只需要通过 CP 提供的接口操作</li><li><strong>统一接口</strong>：CP 提供了一个统一的接口，支持多种数据存取方式，并且支持对数据进行事务操作</li></ol><h2 id="ContentProvider-基本结构"><a href="#ContentProvider-基本结构" class="headerlink" title="ContentProvider 基本结构"></a>ContentProvider 基本结构</h2><ol><li><strong>URI</strong>：统一资源标识符，用于定位 CP 中的数据</li><li><strong>MIME 类型</strong>：用于标识返回的数据类型</li><li><strong>数据存储</strong>：实际存储数据的地方，如数据库、文件</li><li><strong>数据操作方法</strong>：CRUD</li></ol><h2 id="ContentProvider-实现"><a href="#ContentProvider-实现" class="headerlink" title="ContentProvider 实现"></a>ContentProvider 实现</h2><p>继承 ContentProvider 并重写抽象方法</p><p>这一块不赘述了</p><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="ContentObserver-监听数据变化"><a href="#ContentObserver-监听数据变化" class="headerlink" title="ContentObserver 监听数据变化"></a>ContentObserver 监听数据变化</h2><blockquote><p>刚好最近做的需求中有用到，根据投影仪投射距离是否合适来展示正确的UI，我们就可以监听算法返回的距离状态去做更新UI操作</p></blockquote><p>创建一个 ContentObserver 并注册它来监听数据变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SettingsContentObserver</span> <span class="keyword">extends</span> <span class="title class_">ContentObserver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String settingKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SettingsContentObserver</span><span class="params">(Handler handler, Context context, String settingKey)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(handler);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.settingKey = settingKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(<span class="type">boolean</span> selfChange)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onChange(selfChange);</span><br><span class="line">        handleSettingChange();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(<span class="type">boolean</span> selfChange, Uri uri)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onChange(selfChange, uri);</span><br><span class="line">        handleSettingChange();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleSettingChange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取设置值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> Settings.Global.getInt(</span><br><span class="line">                context.getContentResolver(),</span><br><span class="line">                DISTANCE_STATUS,</span><br><span class="line">                <span class="number">1</span> <span class="comment">// 默认值</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        LogUtils.d(<span class="string">&quot;SettingsObserver&quot;</span>, DISTANCE_STATUS + <span class="string">&quot; changed to: &quot;</span> + value);</span><br><span class="line">        <span class="keyword">if</span>(value==<span class="number">0</span>)&#123;</span><br><span class="line">            isDistanceCorrect = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            isDistanceCorrect = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        updatUI();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合适位置注册和注销观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onResume();</span><br><span class="line">    <span class="comment">// 注册观察者</span></span><br><span class="line">    settingsObserver = <span class="keyword">new</span> <span class="title class_">SettingsContentObserver</span>(<span class="keyword">new</span> <span class="title class_">Handler</span>(),<span class="built_in">this</span>,DISTANCE_STATUS);</span><br><span class="line">    getContentResolver().registerContentObserver(Settings.Global.getUriFor(DISTANCE_STATUS), <span class="literal">false</span>, settingsObserver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onPause();</span><br><span class="line">    <span class="comment">// 注销观察者（避免内存泄漏）</span></span><br><span class="line">    getContentResolver().unregisterContentObserver(settingsObserver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><blockquote><p>ContentProvider 可以与 SyncAdapter 结合，实现自动数据同步；例如，当远程服务器上的数据更新时，可以通过 SyncAdapter 同步到本地数据库，并通过 ContentProvider 提供的数据接口进行访问；</p></blockquote><p>创建 SyncAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleSyncAdapter</span> <span class="keyword">extends</span> <span class="title class_">AbstractThreadedSyncAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleSyncAdapter</span><span class="params">(Context context, <span class="type">boolean</span> autoInitialize)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, autoInitialize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPerformSync</span><span class="params">(Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult)</span> &#123;</span><br><span class="line">        <span class="comment">// 同步逻辑</span></span><br><span class="line">        <span class="comment">// 更新数据后通过 provider.notifyChange 通知变化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 SyncAdapter 和 ContentProvider 结合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sync-adapter</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:contentAuthority</span>=<span class="string">&quot;com.example.provider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accountType</span>=<span class="string">&quot;com.example.account&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:userVisible</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:supportsUploading</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowParallelSyncs</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:isAlwaysSyncable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><p>为保护敏感数据，CP 可以通过声明权限来控制数据访问</p><p>AndroidManifest.xml 中进行声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.provider.READ&quot;</span> <span class="attr">android:protectionLevel</span>=<span class="string">&quot;signature&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.provider.WRITE&quot;</span> <span class="attr">android:protectionLevel</span>=<span class="string">&quot;signature&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.ExampleProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;com.example.provider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:readPermission</span>=<span class="string">&quot;com.example.provider.READ&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:writePermission</span>=<span class="string">&quot;com.example.provider.WRITE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>代码中检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Cursor <span class="title function_">query</span><span class="params">(<span class="meta">@NonNull</span> Uri uri, <span class="meta">@Nullable</span> String[] projection, <span class="meta">@Nullable</span> String selection,</span></span><br><span class="line"><span class="params">                    <span class="meta">@Nullable</span> String[] selectionArgs, <span class="meta">@Nullable</span> String sortOrder)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getContext().checkCallingOrSelfPermission(<span class="string">&quot;com.example.provider.READ&quot;</span>) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Permission denied&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行查询操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ContentProvider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反编译 APK</title>
      <link href="/2025/03/27/decodeapk/"/>
      <url>/2025/03/27/decodeapk/</url>
      
        <content type="html"><![CDATA[<h1 id="Android逆向"><a href="#Android逆向" class="headerlink" title="Android逆向"></a>Android逆向</h1><h2 id="反编译APK"><a href="#反编译APK" class="headerlink" title="反编译APK"></a>反编译APK</h2><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p>如果只是想拿到apk中的图片资源，只需要将apk后缀改为zip然后解压缩，<strong>res</strong>目录中就包含了所有的资源文件</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/releasezip.png"></p><p><strong>classes.dex</strong> 则包含了所有的代码，只是还无法查看</p><p><strong>AndroidManifest.xml</strong> 文件打开会发现无法阅读，都是16进制数</p><p>此时就需要用到工具 —— ApkTool</p><h4 id="ApkTool"><a href="#ApkTool" class="headerlink" title="ApkTool"></a>ApkTool</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p><a href="https://apktool.org/">ApkTool官网</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/apktooldocs.png"></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d xxx.apk</span><br></pre></td></tr></table></figure><blockquote><p>d 表示 decode</p><p>还可以加上一些附加参数来控制 decode 行为：</p><p>-f ：如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）</p><p>-o ：指定解码目标文件夹的名称（默认使用 APK 文件的名字来命名目标文件夹）</p><p>-s ：不反编译dex文件，也就是说 classes.dex 文件会被保留（默认会将 dex 文件解码成 smali 文件）</p><p>-r ：不反编译资源文件，也就是说 resources.arsc 文件会被保留（默认会将 resources.arsc 解码成具体的资源文件）</p></blockquote><p>反编译之后会得到以下内容：</p><ul><li>1、AndroidManifest.xml：经过反编译还原后的 manifest 文件</li><li>2、original 文件夹：存放了未经反编译过、原始的 AndroidManifest.xml 文件</li><li>3、res 文件夹：存放了反编译出来的所有资源</li><li>4、smali 文件夹：存放了反编译出来的所有代码，只不过格式都是<code>.smali</code>类型的</li></ul><p>xml文件已经可以看懂了，不过 smali 类型文件我们依然无法阅读</p><p>此时，需要用到另一个工具 —— dex2jar + jd-gui</p><h4 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h4><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>将 dex 转换成 jar 形式文件</p><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><p><a href="https://sourceforge.net/projects/dex2jar/files/">dex2jar官网</a></p><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>将下载的 dex2jar 压缩包解压后，可以看到以下内容</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/dex2jar.png"></p><p>windows上使用dex2jar.bat即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dex2jar.bat classes.dex路径</span><br></pre></td></tr></table></figure><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/dexcontent.png"></p><p>看到上述console则表示成功</p><p>代码都位于 classes-dex2jar.jar 中</p><p>现在需要用到另一款工具 jd-gui</p><h4 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h4><h5 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h5><p><a href="https://java-decompiler.github.io/">jd-gui官网</a></p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jdgui.png"></p><p>根据需要下载对应包即可</p><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><p><img src="C:\Users\bamboo\AppData\Roaming\Typora\typora-user-images\image-20250327145549112.png" alt="image-20250327145549112"></p><p>解压到本地，双击jd-gui.exe文件即可运行</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jarcontent.png"></p><p>用jd-gui打开之前解压出来的dex文件即可看到所有的源码</p><h4 id="jadx-gui"><a href="#jadx-gui" class="headerlink" title="jadx-gui"></a>jadx-gui</h4><blockquote><p>一个更强大的工具，一款出色的 **反编译工具 **和 <strong>代码查看器</strong>，但不能直接编辑 APK 文件或内部代码</p><p>使用 Jadx-GUI 打开一个apk文件时，它会根据 Dalvik 字节码（DEX文件）反编译成可读的 Java 源代码，然而，这些源代码只是 Jadx 根据字节码猜测出来的，并不是原始的、可变翼德Java源文件，因此，无法直接在 Jadx-GUI 中修改这些反编译出来的 Java 代码。</p></blockquote><p><strong>下载</strong></p><p><a href="https://github.com/skylot/jadx">Jadx-GUI</a></p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jadxgui.png"></p><p>使用起来也很简单，打开exe文件</p><p><img src="https://blog-vanh.oss-cn-hangzhou.aliyuncs.com/image/jadxuse.png"></p><p>然后点击打开文件&#x2F;打开项目或者将apk文件直接拖拽过来即可查看；</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Decode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 学习</title>
      <link href="/2025/03/22/GradleLearn/"/>
      <url>/2025/03/22/GradleLearn/</url>
      
        <content type="html"><![CDATA[<h2 id="Gradle提供了什么"><a href="#Gradle提供了什么" class="headerlink" title="Gradle提供了什么"></a>Gradle提供了什么</h2><ul><li>对多工程构建支持很出色，尤其是工程依赖问题，并支持局部构建</li><li>多种方式的依赖管理：如远程 Maven 仓库、nexus 私服、ivy 仓库或者本地文件系统等</li><li>支持传递性依赖管理</li><li>轻松迁移项目工程</li><li>基于 Groovy 等语言构建脚本，简便灵活</li><li>免费开源，并且 <strong>整体设计是以作为一种语言为导向的</strong>，而非成为一个严格死板的框架</li></ul><h2 id="Groovy简介"><a href="#Groovy简介" class="headerlink" title="Groovy简介"></a>Groovy简介</h2><blockquote><p>Groovy 是一种基于 JVM 的敏捷开发语言，结合了 Python、Ruby和 Smalltalk 的许多强大的特性，Groovy 代码能够与 Java 代码很好的结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Grooy 也可以使用其他非 Java 语言编写的库。</p></blockquote><h3 id="从-Java-到-Groovy"><a href="#从-Java-到-Groovy" class="headerlink" title="从 Java 到 Groovy"></a>从 Java 到 Groovy</h3><p><strong>自动装箱：</strong></p><p>因为 Groovy 具有动态类型特性，所以它从一开始就支持自动装箱。实际上，必要时 Groovy 会自动将基本数据类型视作对象；</p><p><strong>字符串：</strong></p><p>‘ ‘：单纯的字符串 def name &#x3D; ‘car’</p><p>“ “：可以动态插值 def carName &#x3D; “$name:AAA”</p><ul><li>单引号字符串是 Java.lang.Strring 类型，同时不支持插值</li><li>双引号字符串在没有使用插值表达式的情况下是 java.lang.String 类型，但如果有插值表达式使用的话，就是 groovy.lang.String 类型</li><li>三引号字符串表示多行的字符串，不必将字符串分割成几块，也不必用连接符或换行符转义字符来将字符串跨行</li><li>字符串的使用<ul><li>单引号单个字符表示 char 类型，需要使用 as 转换</li><li>${..} 表达式进行插值，去掉花括号不引起歧义的话，可以去掉</li><li>可以通过 +&#x3D; ，-&#x3D; 操作符添加&#x2F;减少字符（会自动匹配）</li></ul></li></ul><h4 id="定义变量-动态类型"><a href="#定义变量-动态类型" class="headerlink" title="定义变量 - 动态类型"></a>定义变量 - 动态类型</h4><ul><li>Java 是一门静态类型的语言，但是也有自己的多态</li><li>动态类型是一种更高级的多态</li><li>动态类型放低了对类型的要求，使语言能够根据上下文来判定变量类型</li><li>使用 def 关键字定义变量，不过已使用了 final，private 这样的修饰符，def 可以省略</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词/口语学习</title>
      <link href="/2025/03/02/englishlearn/"/>
      <url>/2025/03/02/englishlearn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>温馨提示：边看边读效果更佳</p></blockquote><h2 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h2><h3 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h3><p><strong>He punished my champagne.</strong> （他大喝我的香槟）</p><blockquote><p><strong>punished</strong>：一般译作惩罚，也有贪婪的吃喝之意</p></blockquote><p><strong>We shouldn’t rush to blame them.</strong>（我们不应该不问青红皂白就责备他们）</p><p><strong>The verses scan well.</strong>（这些诗句符合韵律）</p><p><strong>This leads to gradual memory exhaustion.</strong>（这将导致存储空间逐渐的耗尽）</p><blockquote><p><strong>gradual</strong>：逐渐的</p><p><strong>exhaustion</strong>：耗尽、精疲力尽</p></blockquote><p><strong>It won’t take long to mend the car.</strong>（修理这辆车用不了多长时间）</p><p><strong>bother to do</strong>（费心做某事）</p><blockquote><p>bother：及物动词时——使烦恼，使痛苦；不及物动词时——费时，费劲</p></blockquote><p><strong>wine</strong>（葡萄酒）、<strong>flavour</strong>（风味、味道）</p><p><strong>Hang  the expense.</strong>（管他多少钱、别管多少钱！）</p><p><strong>representative</strong>（代表性的）</p><p><strong>I am as healthy as ever.</strong>（我依然那样健康）</p><p><strong>The boy potted a partridge.</strong>（男孩射杀了一只鹌鹑）</p><p><strong>It was a close race.</strong>（那是场难分难解的比赛）</p><p><strong>There’s no waste matter left over.</strong>（没有任何浪费的东西剩下）</p><p><strong>artificial</strong>（人工的）</p><p><strong>lap</strong>（一圈、一程、重复的部分）</p><blockquote><p>He lapped in two minutes.（他两分钟跑完了一圈）</p></blockquote><p><strong>offence. n. 犯规; 违法行为；冒犯</strong> —— <strong>took offence</strong>（生气）</p><p><strong>domestic  adj.家庭的，家用的，国内的，驯养的   n.佣人</strong></p><p><strong>bomb</strong>（炸弹）、<strong>comb</strong>（梳子）</p><p><strong>The house has a south-facing aspect.</strong>（这栋房子朝南）</p><p><strong>He proposed a subject for the debate.</strong>（他提出一个辩论题目）</p><p><strong>project</strong></p><blockquote><p>名词：项目、工程、计划</p><p>动词：投射、预测、计划、放映、发射、预报、表达</p></blockquote><p><strong>She turned her ankle while ice-skating.</strong>（她滑冰时扭伤了脚踝）</p><p><strong>megabucks</strong>（巨款）</p><p><strong>wear</strong>（磨损） —— &gt; 过去式：wore ——&gt; wear out</p><p><strong>adolescence</strong>（青春期）</p><p><strong>mineral</strong> n. 矿物质；矿物；&lt;英&gt;汽水，苏打水；无机物；矿泉水adj. （与）矿物（有关）的</p><p><strong>dealt</strong> v.经销、发放、发给</p><p><strong>blow</strong> n.打击、v.吹</p><h3 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h3><p><strong>landslid</strong>（山体滑坡）</p><p><strong>oblige 英&#x2F; əˈblaɪdʒ &#x2F;</strong> （v.强迫、帮…的忙、oblige sb by 为某人效劳）</p><p><strong>amuse 英&#x2F; əˈmjuːz &#x2F;</strong>（v.逗乐、逗笑）</p><blockquote><p>His jokes amused the whole table. （她讲的笑话把整桌的人都逗乐了）</p></blockquote><p><strong>He drove a good bargin yesterday.</strong>（他昨天做了一笔好生意）</p><blockquote><p><strong>bargain：</strong></p><ul><li>*n.*便宜货，减价品；协议，交易</li><li>*v.*讨价还价，谈判</li></ul></blockquote><p><strong>carpenter</strong>（木匠、木工）</p><p><strong>tortuous 英&#x2F; ˈtɔːtʃuəs &#x2F;</strong>（*adj.*拐弯抹角的；冗长费解的；弯弯曲曲的，曲折的）</p><p><strong>vivid</strong>（adj.鲜艳的；强烈的）</p><p><strong>indeed</strong>（adj.确实；的确；实际上；真正的）</p><p><strong>penicillin</strong>（盘尼西林-青霉素）</p><p><strong>He scraped through the narrow opening.</strong>（他勉强通过狭窄的开口处）</p><blockquote><p><strong>scrape：</strong></p><ul><li><em>v.</em>（用小刀等）刮除；（使）刮擦；擦伤，刮坏；（使）发出刺耳的刮擦声；勉强维持，艰难地完成；勉强维持生活（scrape by&#x2F;along）；勉强通过；（艰难地）凑集，积累（scrape sth. together&#x2F;up）；节俭；挖坑，挖洞； 把头发拢在后面（scrape sth. back）；（幽默）不入调地演奏小提琴；&lt;英&gt;在面包上涂一层薄薄的（黄油，人造黄油）；用程序从网上下载（数据）</li><li>*n.*擦伤，擦痕；刮擦，刮擦声；&lt;非正式&gt;困境，窘境；地面空洞处，（尤指鸟求爱、筑巢时）在地面挖的洞；&lt;英&gt;涂在面包上的一层黄油（或麦琪淋）；&lt;非正式&gt;（医）刮宫</li></ul></blockquote><p><strong>Crime is on the increase.</strong>（犯罪活动日益猖獗）</p><p><strong>They ran short of gasline.</strong>（他们的汽油不够了）</p><p><strong>brow</strong>（眉头；表情）</p><p><strong>rat on</strong>（撤销；背叛；告发）</p><p><strong>stark</strong>（明确的；明显的）</p><p><strong>division</strong>（部分；阶层；分开）</p><p><strong>I’m sorry,I’m not with you.</strong>（对不起，我没听懂你说的）</p><h3 id="表达"><a href="#表达" class="headerlink" title="表达"></a>表达</h3><p><strong>offer to help</strong>（提供帮助）</p><p><strong>get on with</strong>（继续做，继续进行：指继续或进行某项活动，尤其是在困难或不愉快的情况下；与……相处融洽：指与某人相处得好，关系融洽）</p><p><strong>chore</strong>（家务；杂活；苦差事）do chores 做家务</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的小知识</title>
      <link href="/2025/03/01/justrecord/"/>
      <url>/2025/03/01/justrecord/</url>
      
        <content type="html"><![CDATA[<h2 id="银屑病一些好用的药物"><a href="#银屑病一些好用的药物" class="headerlink" title="银屑病一些好用的药物"></a>银屑病一些好用的药物</h2><p>他克莫司</p><h2 id="补钙"><a href="#补钙" class="headerlink" title="补钙"></a>补钙</h2><p>人体越越钙，吸收率越高，一般20% ~ 30%，缺钙的话可能提高到60 ~ 70，不缺钙可能会下降到10%左右（这是在正常摄入钙的情况下）</p><p>柠檬酸钙（较贵）<br>碳酸钙（同样可以）<br>每天补充 700mg 以上</p><p>补充氨基酸可以促进钙的吸收</p><p>所以，有复合产品 —— 氨基酸螯合钙等</p><p>钙补充多了会便秘（吸收率有限），多做运动保证吸收的钙能有效利用</p><p>多补充维生素D！！！</p><h2 id="最让人舒服的11种颜色RGB值和十六进制值"><a href="#最让人舒服的11种颜色RGB值和十六进制值" class="headerlink" title="最让人舒服的11种颜色RGB值和十六进制值"></a>最让人舒服的11种颜色RGB值和十六进制值</h2><table><thead><tr><th>序号</th><th align="left">名称</th><th align="left">RGB</th><th align="left">十六进制</th></tr></thead><tbody><tr><td>1</td><td align="left">豆沙绿</td><td align="left">(199, 237, 204)</td><td align="left">#C7EDCC</td></tr><tr><td>2</td><td align="left">银河白</td><td align="left">(255, 255, 255)</td><td align="left">#FFFFFF</td></tr><tr><td>3</td><td align="left">杏仁黄</td><td align="left">(250, 249, 222)</td><td align="left">#FAF9DE</td></tr><tr><td>4</td><td align="left">秋叶褐</td><td align="left">(255, 242, 226)</td><td align="left">#FFF2E2</td></tr><tr><td>5</td><td align="left">胭脂红</td><td align="left">(253, 230, 224)</td><td align="left">#FDE6E0</td></tr><tr><td>6</td><td align="left">青草绿</td><td align="left">(227, 237, 205)</td><td align="left">#E3EDCD</td></tr><tr><td>7</td><td align="left">海天蓝</td><td align="left">(220, 226, 241)</td><td align="left">#DCE2F1</td></tr><tr><td>8</td><td align="left">葛巾紫</td><td align="left">(233, 235, 254)</td><td align="left">#E9EBFE</td></tr><tr><td>9</td><td align="left">极光灰</td><td align="left">(234, 234, 239)</td><td align="left">#EAEAEF</td></tr><tr><td>10</td><td align="left">苹果绿</td><td align="left">(183, 232, 189)</td><td align="left">#B7E8BD</td></tr><tr><td>11</td><td align="left">豆沙绿-略暗</td><td align="left">(204, 232, 207)</td><td align="left">#CCE8CF</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随手一记 </tag>
            
            <tag> 健康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的工具</title>
      <link href="/2025/01/10/nicetools/"/>
      <url>/2025/01/10/nicetools/</url>
      
        <content type="html"><![CDATA[<h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p><a href="https://www.efc123.com/shop">EFCloud</a> —— 跑路了，八嘎</p><p><a href="https://一元机场.ink/">一元机场</a> —— 非常稳定，几年了还在，就是节点很不稳定</p><h2 id="ICON"><a href="#ICON" class="headerlink" title="ICON"></a>ICON</h2><p><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></p><p><a href="https://fontawesome.com/">FONT AWESOME</a></p><p><a href="https://yesicon.app/carbon/skill-level">Carbon</a></p><h3 id="封面图生成"><a href="#封面图生成" class="headerlink" title="封面图生成"></a>封面图生成</h3><p><a href="https://nav.rdonly.com/laboratory/bgimage/backimage.html">https://nav.rdonly.com/laboratory/bgimage/backimage.html</a></p><p><a href="https://cover.ruom.top/">https://cover.ruom.top/</a></p>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记 - Android</title>
      <link href="/2025/01/10/notes/"/>
      <url>/2025/01/10/notes/</url>
      
        <content type="html"><![CDATA[<h2 id="一些常识"><a href="#一些常识" class="headerlink" title="一些常识"></a>一些常识</h2><p><strong>STR</strong>（Suspend to RAM）待机是一种电源管理技术，用于在设备（如计算机、智能手机或平板电脑）不使用时节省电能。在这种模式下，系统的状态被保存在RAM（随机存取存储器）中，而大部分硬件组件被置于低功耗状态。以下是关于STR待机的一些详细信息：</p><h3 id="STR待机的特点"><a href="#STR待机的特点" class="headerlink" title="STR待机的特点"></a>STR待机的特点</h3><ol><li><strong>快速恢复</strong>：<ul><li>当设备从STR待机状态唤醒时，系统状态从RAM中恢复，因此恢复速度非常快，通常只需几秒钟。</li></ul></li><li><strong>低功耗</strong>：<ul><li>在STR待机模式下，设备的大部分硬件组件被关闭或置于低功耗状态，从而显著降低功耗。这使得设备在待机状态下可以保持较长时间而不消耗太多电池电量。</li></ul></li><li><strong>状态保存</strong>：<ul><li>系统的当前状态（包括运行的应用程序、打开的文件等）被保存在RAM中。这意味着当设备从待机状态唤醒时，用户可以立即继续之前的工作，而无需重新启动系统或应用程序。</li></ul></li></ol><h3 id="STR待机的工作原理"><a href="#STR待机的工作原理" class="headerlink" title="STR待机的工作原理"></a>STR待机的工作原理</h3><ol><li><strong>进入待机</strong>：<ul><li>当用户触发待机操作（例如，通过关闭屏幕或按下电源按钮）时，系统开始将当前状态保存到RAM中。</li><li>系统关闭或降低大部分硬件组件的电源，包括CPU、GPU、硬盘等，但保持RAM的电源供应，以保存系统状态。</li></ul></li><li><strong>唤醒设备</strong>：<ul><li>当用户通过特定的操作（例如，按下电源按钮或打开屏幕）唤醒设备时，系统从RAM中恢复保存的状态。</li><li>硬件组件被重新激活，系统恢复到待机前的状态，用户可以立即继续使用设备。</li></ul></li></ol><h3 id="STR待机与休眠模式的区别"><a href="#STR待机与休眠模式的区别" class="headerlink" title="STR待机与休眠模式的区别"></a>STR待机与休眠模式的区别</h3><ul><li><p>休眠模式（Suspend to Disk）</p><p>：</p><ul><li>在休眠模式下，系统的状态被保存到硬盘上，而不是RAM中。这意味着即使在完全断电的情况下，系统状态也不会丢失。</li><li>休眠模式的恢复速度比STR待机慢，因为需要从硬盘读取系统状态，通常需要几十秒到几分钟不等。</li><li>休眠模式的功耗更低，因为设备在休眠状态下可以完全断电，适合长时间不使用设备的情况。</li></ul></li></ul><h3 id="示例：在Android设备中实现STR待机"><a href="#示例：在Android设备中实现STR待机" class="headerlink" title="示例：在Android设备中实现STR待机"></a>示例：在Android设备中实现STR待机</h3><p>在Android设备中，STR待机通常通过系统设置中的电源管理选项实现。以下是一个简单的示例，展示如何在Android应用中请求设备进入待机状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.PowerManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerManagerHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">goToSleep</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">PowerManager</span> <span class="variable">powerManager</span> <span class="operator">=</span> (PowerManager) context.getSystemService(Context.POWER_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (powerManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            powerManager.goToSleep(PowerManager.GO_TO_SLEEP_REASON_POWER_BUTTON);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>权限</strong>：请求设备进入待机状态可能需要特定的权限，具体取决于设备的制造商和Android版本。</li><li><strong>用户交互</strong>：通常，用户通过物理按钮（如电源按钮）触发待机操作，而不是通过应用直接请求待机。</li><li><strong>系统兼容性</strong>：不同的设备和操作系统版本可能对电源管理有不同的实现和限制，需要进行充分的测试以确保兼容性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复盘</title>
      <link href="/2025/01/07/summary/"/>
      <url>/2025/01/07/summary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="01e36d04b760b2d9cd4ce2f037ff94f64093a7fa4785b67ac67d0f95194a78ce">c4e10b51b61f4f400c1ff7e4a9e7d6cb07a0559cc0ad677144c208f21c1f5d7f082e8ed1da9721b6b8a8b5c6200301308f37ccba8ada25a76197cfb9759f7fa6ba475655813f1e042973b492d180d8d195b6eaa92316e2f200abfe825771a4952ac1ee406e62b85a6ade648234c80e9260192a7c747e5a551ad0797428471efcbb3ae4fa8b738fe9daebe8a55deadfd6949ac1d5e553c7f5d3d449566f93d6e4ddcd4d9edfffc40653e29f3b672cb7e8f336b7548761990f5924827cd25cba828eec3d795b21c313ac2fa2bc425b652d5bb71f43f658cbeab3beb378c7da8317f00941cb8ae1dd6bfac330749648333af642e458fa6adc99e771eae62cd5cc1172a93886e6db1464196039aa3c524391c9335737b1ab495bae0d6d3777a7b54661369e214e8b43b56dc34f44626a44d1c6e7fe0eb120a93cbfffefdefbccbfa4e372873e96e9745f2bee079bb76f2b0b9988b824681a02613c1eb7bcbaefe5f8cc91d9f38ac58a18de1ecc6dd0d1fcd8de0aa3d39f319ebb73557bcd57506cbc9e3e3b5a3d48cf694024d373b2c1cbba92ef2db8da8929b02b77e50f95aa943c3a1715a779feec5b54a801a1858413079a87b5f3e979cc4824bd076062f5f710da2caa6309c76d5f8cbd1ff3656a89ec1cd642df316e4cfe5c0023e50ee5c197300930d420eb4b78122a373b68da779f164ff255ae114aa8a7c48f90d37b2030b8f0146f3c30301063f6c9c2f0ee0e1fef4efbf102a398daf1522ae0b8923f323f477f6cec96e7b5814d9c926bc75fdf36b50cc5c579b6bf3270fa04d1e2330db51e863b64d453db3bbc713c8a5eae7eece9758d67c6d7563926e6e0d5664ea75d7e8744e838822c3305738ce56389485c33a6f0f56f3c6e36c4000a2acc92a886a58ebe989912d3c0f0b27d4fcafc1460bfa5819334046db5f5587201fcb1db7c5e61cfbc34c3c30b669fad41657a202ddaa7a797a38a94105adc96f160fba86df2a53ac45cc5db823a970acc2fc2d76e4085efa4384dcde289f7aaa482773e8f23a9ed4e3bf1fbda3e2ed2d4aa0d2f3da39fa5b3b6f24b072190357863273dd231c4c451b7b04017e02d8a5652367b3bf9fea84dc4bb7fe97c19b02d2e66540001e6a24d00f1d1d86decb557547523da448e2c964ebd3efebe9d9a475bcea5546dfc02b56911724c40058c22fcd1b8046b23c84a58d5397f7bccec675891c725e8697e77177d749422872e0826eb8b7d7c62a4bd25e2d7e6c90045e49727d1ee3d3c18b22eb2db083efb87970a4342d83a8e850acb99c4b2ab312f61f1523be99faaf163b2d89da0c145c86299b3dafd2da3022c9bf3f519d5f1c05ecf723cadcbcc511320ff3bd74c09be9e0a4ba5d9123c8869ec585981fffc731130b655ffe5c3f2bf790037823dd5cb3223dc5b07da7df02d0bb22a7a0f8dbff178146605308a51550ecb645316777b9c28355187d94ef3b1612808dbb1a5456eb4c21cb990db2227642eddd73aa180d7ccf827109e5053227dff6332bad35c011522b642c4ebaaa536c7eba81e5f7f1e1a7ace24c2b596ff8c83e10d73b40364085485aab7bf4f8155c8348dcd80b353eb429b92a0442f595cba85f0dbb6a5ec51c822349d567799a766f330af82dc114776e412c3846447a5ad20b5edd4f1af955cb29e364605a87fd952f5587f55001ac7149f622ea225d7ac77ce0d0e44f9e0717f3243dbff0d41cc63e683dd0132d273c8d362b34422fe5f1ce589fadc69c3d73cb8e047fae8b467525c7ad3cb2f9c278b7e3bbf38cb647a40b116d6c3ec3db556866f824d7a35671e7d44bde2b91fa60a3013e33752fcdf18e8955b8c8c9c0ac73d1884d53e2837297d83b5a607230d72091b7973b68ddd0c77909e4ebe6127d928c976a8fbf27fe56cdc6abea0aac7e5eceead32add5ee6f8a047e00c4321e9ae5d881eb535728b1e43d96a9f4c7a0c2555349f9559a93063cde72d6fe8cb63f7a29193c5032f2b6db566b1861f9669ecdee6abb0d7fa2b5ab3b4997e5c68fa21e8f1322b2d4dc970deed310c2acda396fa0d8ef93d39c39f3bb9675881724ae53f5c8891b7643e10fd5543de8afd0d47ae8ee39247856cbd64563c0495604dbc41304b497b766ba25c5f43eb69b237195a63ecdd54d8d633968fd97c9434458eb76ac67d9eec05e117af78a91b7a4fa1880479471f2a1902c5c5ba2ca955ce96588b2a64a80a48b44f18c7fc2db22a5a8b38d47542ecc80c6ab1328c819e3102d3050b49bfdc9c3877fdb7ff469634b297967e8d71bedde75d4db56bd4ad048331177aa13310572bbe6f6572feb9ba20e297c0238971abf859740e094a87dced57f1ee66ef0f02fd33d616bc512ad8969fb4621e945be4dedcb115fa6d0226028c75f40ed5223bafec088b8d40c563a1ba910c33335aba09cfb1f71a2c43c973fe776ee5679f9168e3680f3d04e3b1e7295325e8bba1a1550da1a1b5ba3cc2b6524eead9ad7e0804031fa807b86ae33c4637e249396b39baf895ece089bef41b6c6c33d61ca8589cce0cead78cf84ea3461f1bdd107ced12c8d88ed0680f63cd5d822656facd657c0b8030d98fe28cb85372181a79b58368745d3fe069911c815227a8bb8c541a9803dc543c94e32ba6d3343bbbda11d3da53198e6f9f4a1b92f8eb01ec56121503de85d37cf7f1b63d147742dbddb8eb6c19987e61e69caee5e0226b5215773aae336bd325eabaaaf973e92e19b936b7515cbbefd0c98409ffa9fedbc0ef267435fec3f92850588c7aabf70099051e55be4a83ffc0e42d2c24bf78055b877537a91231c5978456749652d1ae35c4e155f33b56f3698dba003d21b07671d7eda5494d31274b0d7ea24152dd63742de3ce43e51e81b4c347b3969ff8405f1d45f1f0ae07c66926562bf79ee354f12fa09f43d2eee55f842096a04700d5994e1536f2070bd582bfa06397331194bac23ee42ed6581a42571d14688c54e05247cf76cacbfbebefda15883bfbd30d112d0bf50e668881d1ce678dfb1b56fb898a2d0e8c0d1451529d880f3a13cd9311be6f0eff0a78e715fd5fd80725e07c68877eab8f48e50bd74cb75f10114eb90300dd3f454c2ba30dd5900834ec0ccd54dbe226c67daee5f66fc5c48af4cad621b8bb2ff7f0d27c96b87623fb2a0041c3f6de53cc3c8fd4c19e80bc830e562f418cb4906bc911c8aa0723ae3981e7c593e008cfb463c588cabd76719c12d0c3ea893b4de93037baeece40c22d7e76097382ca6bd8e66a98114e945ea9b8a99f9ff550ee8278a772cf04c686f35885190ab4fb8567b5eaf7fe5f0594128b12a8916b76da0e7779fea67db5411bc689901c167e7fa598aa4e59a9090667d59962237349acfe1b044a99b0718020a4b96c3a7dbe809ea177d455390de8eb377a4c0af34adaa4de46e5a4d341d6af383e8ce3eade40f2e082e883bd66e2a2f1831bcfdd321fa6326f61fac2946350975c3976dc04c6750e754b1bce3929c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 副业 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 店铺 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习路线</title>
      <link href="/2025/01/07/studyroad/"/>
      <url>/2025/01/07/studyroad/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0e7ede581cba7b0fa5a0db37a69b5d2ef87555cdd0f91a7bf5765f8c88b7eba7">c4e10b51b61f4f400c1ff7e4a9e7d6cb316df18abec0371690596953ff5473ed3bfae010b8a81679badf5655f07aaccaf5e1d33711ee47275ecd8a6dab39a0e985b9ec0b4866638495b1ee0f43acb5f12fb94a0431e52e335ff1a65185d4a39c130659f1907a363acd62d2c6d6aeddc3f6cc91ceed8c8ebcfe9dd05d53b15684004aa92a260b5ef226cedb645999f7fefea78f29febca882856e4ca5579669f1ddb19ec9f0f44bd3e22f3bd1e944bbee1a44ea373b0c9fec7ffe631c797fd97426c50b8055adb525712d33ceae5e0a1b27f3d3fe3cda7fcc0e7ee9b6b00c91a211708da7473dc72083476171eead305238ad39db6c08fbd953a64fdf9b439666bec57b918b69d9f4babc75eec7c7e1a7cc7f974c95840f6388ddcc8f1df8eb8eda53299fe5f0af336245f450b495e7b2e2ce3494a050b1462966cca6f273d36043996c27a79f1f303156eab592938b34ee4da748241980223f9179bc6765c1a046d351056a0f8d5497e5a8e3cca19d26af882b62974eda07883924a87e1d90c720543715dd4c5a392c9b246c229bf475f8158420d7d1d06f2b752f354be56b136db85f4842e9e0159fe4440fa4a7940349ca456fb98782063742b58f64ffa0769bc295b60fd5920484df5e9487afb11ed1d2422fc44936f78a196b917daef81ba996371df73088cb3a2398c2829b35dc2ae45576c98d8f49af5b92a88bf353e799460b555f894477b032a9e56d093689c18e93965030abf1b14aaecaf4caf456824bdc61a552da53031602334a5b5b9f97cc8cd355a8c254d0faea5d6dfe38d9d8cb22fa45ec4c2ce8fbc82ff463f4fb2c020b4f5fce931bfbad6bbc26da01aba5dc7cbfcf6d12ce0885570a58e070af1fae0864bc954e03a32e715dd1a001b0ae77f801afd8d3c72ebde836d6c4452fcb524ee448d2cd15a45f34a3756e6038f72ce7af672c659ac51a24dd5eedd9db038b6084f1344ed054a9cd68c5f673788aea1ac4f8fdf81dfb4c5f37289eaf12f448d23a3612d2cbfbd6e0d962456894b92fb349fd59c723cd1bdec7fd8d548580c7682a7f221a14a63d274063f423a758d976415e278c9565549312a48602e92021df1d231decad2a4a3f945ea8c262437410463fac77bde191360e3c92f617f1af3c19a0a58b07b3748ae93264f0535b02d5519a3c58ad345791d44eedb26cbf9db16a7118242e7f7562a6ff25f9f362bd20ad7d6b029a55f0e43cad5bae4740c0a50efb184649868305a883e3456f985f8c847d7e31088456ea614c236bdc6c0b3db6d6f43d8314c36b0715daeba96d46fb4990a50c211145da9dbcb773d835bbfe3eef007317456d4c2eccd08d474e4de8683a7a8bff087409ae445ee3a1cd592481c06cb742efd548c39380dabfe4c2c727409c9be002ce7dd02d837ae26226fd9d36c9d9573d928e37307d17f309bba2889950026aed216140cb4bf7bed151bbb3f34329428dcb73bd0fe6b02b914937b540c92541b8afe9af05a777d121b677005401b00760bcf82d658877b58f32f5da588e0f2dea8c2691f9f344be2c5676f32f91e8cd0feead718b4f1e71f9a7a4f718723be9044d44c593a70f7527fd58ca4bdd12e1e8d2493a02dd695505f50c9dcadf8922d53d233da0bd221228de677fe9ec48a708290d33a084f44c2d87d07ab7bdefeb70a13d387fb36f9e5e5779d9fb6523a86625f094a497a80e3afa67cb4a6b82cefb2d33c4abf3135478a6623c4c1b07eb58279861c4126811ad2f378bc260a8abf32da71367229d0f579629e97292bb8584aa1143b8e063ee7c807f15a6ad0f68fd9dd1274c76cff548d2cd49656b743e99579920584a609ed2a6cbab9a19fc0521c64aba8456212289224177389f5229d488d2d1e57564ad67c8d1cc34f1d193d0c5ed33b814c829b4739f79c217fa078f9d4280a0d07b3d1088f84bb81e0e988e0ac8b4f34c655983ea9b03990e0aa2f0620fedce7ca04c308fa4309ae0646f5f737477e441333b9e1a1808fcf1a4ada7fb615ad1c18efcd5680cab0917b378f865e96e048f00be491fce3ef5007b38336b61892b2860e95db3d6cae75d30e6df8d012e639ee28a39d43f4f464f23210c942ea30a68f39459bfd2f0e7dd414917c49382ffbd8d87a21ae08a3d1c0bab4cb548b4af451671f9f8e3fbc6a7b6b7110b954686ec3267e972e633c2348bfd63fc2ca0fdeaf84daf95dc741798fdaed7ed0275d57fe383277f487cd225f3e83cb61328ab8f2309a31aa3937ab9fddab9c6d6b2e3e71c7dd5a352ea85d12d4d18e29eec68a20f6a702d310115a796efd4f960be5c229b9e6075990e57e30852cfb347bedb1c1410596530113f4a26d884c725f1b6ab5c4ea33d76cb6092801c76971b767307a34890fb7a89e5e112d85cef921e74c8b9e5f89b7cf4d2a60d1e53902be0903814d9c7a1ed1f79fb24cc1500945a8876b766ec2724b4ed58ca881477fb656f70a28e304a4558801aca390ec96a7ffcbb514b6d30a186c5307aae4fe5a4cc1d64ee283b7ece067c4790b62db5d169bc4a9e5081bd578d89b40a8e25840b3d78c0ec98705b5d5533d71db03f0d17d3222327616678eac239a57c8a7e7bd40633e1bef072c40763cbea17639937eed24c05314723b02e6b44b3ba96c13e8ae7dbcdec3154f820b756ba477de9376e1a94fc81606988dee4d889c1e81b1c520201822cc9995b7f4a21841dc47fddaf82b408362e284bf11a09c3c99bc4ac22172f119b849a321b713c7d3832f66613af8baaad0263e7494d26244a8ddaaaadd2911ac0d7b46578dd865f95877dae8674424033d73fc7e395f9de409f83a16f6ef60829f6288909b47e4e09d7ff5243ab8f6ac728d09a4ae1a764155fb10b5e67249cfa6460962f43ccf561098325bf41c439883ad774aa344c1ef4599fd859814a71b72b3ddcc9135477dbfec648bca28e85527e07c19a95d6b4a9808c61d7caaf3ce589b3a478c52bfa1da139b32df9d0bdb4defffc8700b944e86cde9ef06545887c9af95c2ac845b1f5f9e1523d9d66ce95370f3a7e18a81d9ec373988de028832633c917fbea8a46fea246ff0c5d5e0acfa8fee161920c47c61af8837f3c05351a62149eb1070036606cf0f306ee3440f136cb36d71d07125f3fa7ae204c1ddff4ee07cdf105930ecc66e06dc8ae20026d8d2ae50c048042ffa66e401f16e9f3c4d825421f6d4c3e562060266ef27549764110417b4841b54f4cf4a60e7b5f7ff5e0a7c2f8a1ef904cf4ef1ee41827d8376be39bc4640edff105b14b42d0e82248619777588d6006ac4585e5dca6d85f95c91a0a52470447e265c8c4887b121ea6035feba4f39c9364aba59c2408c38d83fc0828a5bbef143f4ba74c5f1661f4c8de1ac38a767da556680352a2353dc2cedb9fd24f77c187cfb9294d36ea2b61bfcb4fb568bed839f45f4bc72cb820290446cd715f520f8aee3b508d0c3489eac8294307b133c57bf07d8254c90c2a1d7b0ec2884b7547209a61145795e4b20776b6be1ce824bfcdce117bd58d1d4047ac937374adbc5a25c99eb99776c9bbd4ef63c4f7a5e08af5272b5a0f4d39334ca31c859796a16fdbd64f866374c0c8ce891532a76a0be6d1dc0cf3f76cc613106a7d6600a824b80dc69465dba1c51825a6bfa29bb9becaf0640a6ba05ecd9cf49ba1001216c053cc8c1a4c5e67c433a378c9c9610905e61639a1eb349ca7317c43961cf8b373cc5e05fcaa171c84a8027a2e51cd02310edfec1ec82f42ebc8aab0d73d7a89b007426ae2572da2d7e3478e7c07bfaf275b56998c3f1b52b8e91795c5015e2abaa17b1c54ab1e7dc79afc45705938333f4890d9ec0b36f02ee297013351aeb0b19a3f16666aabf1d844972cf1d906806d8a0703e03b07dab7a7d30a80feaa73b1b8aca961aafefb8db22f0a887423f9b7056bafaad2317f3d58818702a337979ab9312838794db3adbc6c48e428e25eb8e8c19a9d3aae4071cdccab99c6f1ea4f79534967f9af9c5bab8e7791631f8a7ad66c9a7af69c2df5045a23fec5dd4fb05e2102039760127cd840caddb35486a49dd369835010f74bf350a2a9086f442703d0639a21df90193ac26b8e0990d6143fe6ff99f23d09e8e16cf53693ca963e52b21871ec147900d93b759b2fea83385af693488fe016df83500f495fa5ea890dd17021fb0e520db0d87e0f155267f0dca961040f8c2145316a448c292d60216cb9e11688cc28fa3973d12ca02dc9d522c5ea5951126db256352f56f3c3246cd62bb85f16556f8d0ef134ee605750ecebb4da5d520b842ceb230f6355eabb0fa404bbbe905f6d64b02d1515267cfd5f266ab8a26243ff3fa9ffd9c278c05033053f00d2d101778c8c810fe43b25b30971a1e8ff7506adf6fda43ef6b2055458eabcc4f14950cc2462c25e03f58b5d7a83749ec26bff71a586f78d8417a38b721404f9ef770d8f16aa92576d85f86e9377eca1a6b2fbb2eac448567390d8d1901ce3137b732a499db3c03c8250c439b78d534702106455fba0ea103fc407be4514e85331bcfa4929bce6c65d295617ec6a409282493aa25ab06628ff4b838a0d1793a40c9994f12d980876bfd4bcb6f55abf31a47311476fb838e8d56c74bb48fe1ea7e99db0a3ced6b089f8133d51aeb51f0b55e14d3cbba30019d53983d1681c1d4b0e5dda96066d2ad1a7782ea9b76ee3781ff0e605de20f75d39d77d075b59f221dc130144014e8a8afa86371b5a5e38623994a84ebd062f51e4827f21b0257a7a8c4cbd90af03610b735c9d9139b4f07f2444c80040b698b0d0109df64badea0d726aa5d17384f3fce3a925a1963f88699fc361e7138579db0067773e7a825a7ad437a543bdb8c5c3868246e273c35264ae81143ac8dbb4a308d7bddc50ad5bf14b0dcc74d64871275667ff5768256a0df8f69b811e958db47f42d0eeaef44db406c61bc084f4ade3b7198367c33c1cc2de639055b8cc24cdfeb2c3f9d82eb4cc96445ec2c8e3f5980d475141ddca4e5864676072ed38be09bb7a022b3fdd8700dd80b9c65091e1b88a9787189bd7186c3618e73a40bbfc2344cbfe4202ad960405862ad3c947c7c203ff7cde0a99578d50518242b3a5b26493dc0fac10bf97855743365d2a1cc1fbbcdde9eadca8d76dec771a2afafe04ac4e62bacb0593bfc511f91209a5a5efa50878a83f27f7714dc506bf49a446e540b8a1a6606549a74732778c75a2110f553f11d9b3cfdea65b0772f77f507f21577325185e89882b3a2f0648c1d23dc05980181deecceb964844620b2fe7b70ac9f1f8cb116582dd39937f70e29223a9aa82cf13bc1b9502506486216542b8bdf2e786bd6ce98dbca55f69f65e212bb9412524878dc2424c92784f1d778453ea171d2e12336f8d939965f5eb829723b13ae9484b92e9043231fa5eefc8c74cbca7756b95483dc1cfbecc12241430a1a8486dec06df6e1ad3c66294c3d603ec150e8ee42c2de83a875caf4cd8d83842c6439a29002e6d8f1a4146bd02a8a824a0a4a22f389ea4fdcb12fca439544fc63f4469846136139553c98538ae5a3f8a2adc1185fb04b27b9b41674a2921fc7958e8e463f8e893c95a5e9f72fd3ed7ccb508df7f8b72b818b9ca194d0ecff655b32dcb1dd5b471edd8b8f57f5c434ec007c8597aef24bbbc4e86f4fbbc74bc3a444eb5d8482e7f6fce62e88d94e44ea4639c93b74bce67024d57eef22ec6d8dbb26d2abed06a88f82cc7467d5f8afcfa1d30da0c8ffb9d0a88f8d15a3ac26d54c93deb604609c70794b790a50d7b8e33069dfb4650f652090aee5c8be2f4a0fd8bbe05add4aede04bc0bcdce8e92023b054bc8e10da124aae89952c8188cbbdbb0cf9f05d4b7cc1011e7d6c56b056ac30acdf428bb14a98b670fd2f7ec3a66c0642b877b8c35bedef848c5fb2b3db6c1a926df4138b3c5d4e66771ee4efa4350753f5d292f138f7d41b4c9fd7f1a1205870227d1c858e9f66199edee20a5c0f6806d542efa8d11e1fc7bd52449e4cf97dd6032e2395630c1d56580137f10073872b066f8d9abf108c401d2e3e19dc1a2fb14777dc723f61d4f12e7e7c0d82f15fceee2c7d4ef36543ec043c79cf7beb8631c2c0cdc73b886aef993fca8345e8fd812f5d27d64891b963853257f0e1efee89b654352077e42ba6c12d692fb8d1d8eebd0403a318949b2ef86ec8ed258233e1f9b60b499c17e39b1bff6799a69ad322692b57f83bc538d194352b8371a0c59765d84c7147535f7e57177252a6a8d44ba54982e6baf7d338175bc008dba503dc425566565ebabce557dd08d84e78051c02fe19e29afbf06f9d2eb80db42f645726aab0db06ab9c9d466ef856ab34040a4dea1a86660ca440fda611676cb4da1d342f644fed275941e98d088a02d8d0650c36521b669c259093a1495018f00182d002e467f5f27e67189770130e297d485be771e5e520476a8ac764300a0964359bcf754f62b21dca72db09a0502e7391d9e609e8663d42d3e6a3beefcf01017d502a45b3a3e185175660c02b3801a9f8bbd409ea4ec8a37966bc453a9fe9dc7c25a5acb6faa80b5d2bed1cab370b507d889a14c19a3ec16b28a9f3f833c481b58b7e7466d02d908d93be889b1890c9a2468c71f59a656b8def6b7e4bc9751ba16aea4f1cd1161f7574da285e3482714bde177175fe444f0e0d8befc0fd03e521f194ccb5a19d12d7e599c3a386b790d8a160f43f7e2edf1b9589f6cc1bf6dd2e8b27873e23cca40dcfc81b5ba5948ebe1c32b1926feee6d2e3f8d31bbee2347ff27cc74bd14c9e371fa2db66620cc5c4eb251de7a4597c366984a364a41a3a64f5762ad4c2ec565573c4d86d5e3f3a446514a9b6c55898ade0fd30f2bcba9e07118fb5d0622b94aaa30c4fdd9eaf81496481f612cb40969f4c0d713f0b9bff7a0f165e57d64e532519a3c3232bba52200a506ba31e45c3614b73210a33a8a05f627060e74026401534ad5d560215885ad3bfc94de6e63314b5242c82b4be70a70e1ea9d7ff4d5f9d485a4e2dc9a5d809b4eb929cba61168395e745053500a5c4d199a79f187e8780a73bb688e87ed850e4e1cb0330fe5d39e587f05878cb6ecea11fab17e736c3b781a34fe886a9b5102f7fffac6e628bbddb74c0774b2728637565dfb0eac690e04297103485809e455c657d8192ec46cac72e2ef945dc4bba15d4ec97eedcc69a808867efbb60a3ac341d3b64fc8f9e46dbc80e82fd87da3e89a36c9069c252bb29d69dac3128f5de45d2c761f3467d78b551d0f0e5f7ce826447e5f9c847fa09fe013f5762832f9d2218329afc40df02ddb4888754bae215a63058884c734384038e50df6a97d875e2107ee47c9936f59e4fab6af519b1bc1e96973e9e8b97c36d21c824d60430c0a340597c81b56baacd6edf62db457c4c30799d818ae89d3076eb325cf5d0f3ac62d689b80e16103beaaa8ccf6d8cc4a88af36603cb17b343888e1f7a0522d3a663467470b161bd637d0081edda2e02a56156e7d19d0c43d29dbe8bd38cf7b80810c35181a28ff6b507f71703a6481a1ba083d5dabf03f49515e32d0a19c6fd4e5e5bba591755fc171888e0d18b808aeaaa86339016e076330b5afcbbbad900c110fcffa28613b4170a00d9a9dd44157ff0e62d19b4feb4b6540425a70b05af40bc1beabb45700604a30ec37f6f673496db92095b2a8a79af633fe925e1ce26cbb38ac8d8f2f1c0c26ae0214140c46dce694922f3937aa28e96bba47a05fd411d4fbcdb637caf29430e5c3c5f2c07e122e7d9628d049a76c7931e1d5cda78a84de2a519f596faa6788a3d0101800d12eff894718343149881e7bf8465715c67714858fd99d804e9a2f3b0084ca30f17cf0f255ec1101cd312f5d5bd03e3fcd7deebbb61612560d225e60585e8a69b3f00155e60ae7a6f460e8892c5a071f484b962c1fe5621ccb765379f7ee4ee09dff77c678574dd072cce6c188966b02a06a39206d933891ffa1ef8bf5a1d50ffbf6648809a7ecbd93a3c39036cbdbad27892c08654db33ccc4a429b368929413c6de53e9fcf3afd30b42c1b8ceb250acbf29724e907dbf57e23a3b8bb018b1c9859519784b76347f00942e47847b6afb82bf6c5997705440783ed09524426ef645185f1cb492730618a12b1c2fd712948ea7714601715972bfb6c33053406e3fa5d70e884c25f29632e28ba8e00b55a142c863cc330c11597bc0386724b79e7dd70c1632d28e3415aa787c480df2586c89a3e049f2101a0a05daead2912dd59699aba4e770f97a2e3985fae1f133e41bd9d3f46990c092bf2c81bc3b95e5d4d0ca22093986496e3e110cf6bd4d9417aa43428d234f78bc0eda2427cda6db6d010417137e7fb1a8a49d304edad38fbdaa6ab2ec0cd4640fea6077bfaa6dc3e3114eb6c8ab2d3dda01858621717726bef83b6b9815b4aceb361778c7f850f94c357eda985ef6f1a56ca56a4d9725925c46a9543003f56e9382b7069ecec35ca31c4308670b108ba1cee6abc4e6813a02b96e4792f7e9dc13b1d7a42d44b48c2c0df979d622349407296af630362fb07af914a6315b5e14389f06380fc8f22aa602405d41a44437be97477ce5764142a05aafd4d3ef4dc8f033fa908d404a79c473ad80de04bf9d006f3e9d275a8565732fe2d6138482eb4f0d82d9bc9ea67d5fe8abd21015c1a0a5927f8d3d6955236b3e42d0378837b3b6fcc41edf884a34bb1326122e40c9659cf05e942f6ad9e9dba9c94aff488381ec120b694cc2533b8e8daac9e5f58b32872b8248aaaec39c197fa4081315b5220eeff16c117fa55f425dbe72531ba3898f3f29645f3a8f7daa954232b5797fe8aa9ffa09c605fc57eb4e7365713160e129910653cfc345a3f0bc5acb9bc1f945e7804c62c45a86468edf3c0012d47eb2bd9a4a4459c518c83368500f757a176c7bb6f331439cad0131096214532bff95321fc7c97d0511505d30c1ab493eb61935d10827cea401f05999a85258df100697ed81bec8c72308c75d80694868f5689df304701fe299fd2c6c2cbcbcaff5a56d63e0213a2e6073c91e5dd26408eb6b9e4de6b47f9f857a6920a703e1e3745cae3721530b3f4ba32cc53995afb0b2fea936ed080269eb6bd3205f0de51905a31d5854b0e4025479664c67a8bb91342aae690611273f2db2dcb74ff15ee0e05b65da73e2a41b264ab5026b3adb3de4b07fe86c15061c6819ee6851d476c6ff8d794fa0ed30d8f46ec709a96b3f99504bb74db0e5d70adb0704f09a17be9526e0862a1050181a75b7501702ee29b5e3e844c2bdc2fd7ac20b533117aa1fc3390320f0065f057c8f10b9360c9ba29b83f47c6b7c3a629f86848de43a9e8e661f4fb7f0e6c67392f44e208c5df7185e58d47430e9d6101a08f717cc46d6955b5ce6d7eb9f2f9f582f601359a806cba9c4d6254be381367e0ad78142f772394e8e794346d2858540d595731aaf0a8ae516a1eddda60a20fe0154da82b2e035f1758111c95ee63b2ccfa642f529b2c5eb1610a523bf0f6a487f458fdae7a8b782ee0c16910ce73096deba8711db92f9e54bb185e2e6906c63dd0692d6c80fca77d93bb369483496f204f0213c7ec786444108399e5328fb6e27b33fbf1693f9619eef4860b5d832fbd2bcab6c62c79ea1d40ba05456d3c5f7ef25160234806961e6f75ff7ab68cef13f46b00279848576408de147fde24d2fef977a6f78d2e460d89089c869d2b2029fde0f847622afd1f6e75ed954e0c1804b35b721bce7218103613a6871fdb142d978cb140111063e796317f285677f0addff64f124f43bd8b5296bbea19b6cb076aab24d8ab56d212f5b3ea5de7df125427305996903d7ffd130e47ddbbc573d226f8067cda9a292f1a0856c5a8f38737224a9b666cff8e9ab536924fbc78fbd7c9f65331a416acca8d11ef320fabfec7e63076641fcbf3ac48c0411a9d5bd74465d90577a8f127469fdec6bc7476105c829aafe3cb5cdbfecb236d358f67c9831485b42fff574bd6fe7dd9bc21d5558b03d3bfec995c0428e75ed5afdf32c387aacbc9123ef9d5de57b729abdd316f82a47eb16f55b4c487eeada19ce3fe04bda7aba69f3544f329eccea0771af9df49953bcbccf991de473c6c5d7761af7d0258de82195b5e0a97a921bb212f1ef18a4e2c05173d160ffa7c9f77ca1db60114ada37fd42e61d1760da18e13a9475864d971d420c6f4d3df3d70ee673ab0e9a4e240e4ec6ae6103a3c9cc2421d5da266686afc034ff8891675958ce3e9074cedded365c84977dcd81c76bb0e4648cf00b1989f6ea6ccafca913df190ce023773d16c12fe1215eb7767578b69837c1878106c517b971bff65ca4e038377256fca6e13e2f4dfaeabcca2476dd6d4bf58690120d18ef4dd183d67974087dbe238df75fba7c75b40d7c2658bcb595356d1ab31874fa42173bfed61ed7d9342604313828c97964e696ffd1c8b513c12cb03679c7825dfcf7cdd52c94237ca9f4312e05c8a6fdaf8e669bfcdfee6b1ab1a41ce700a21f311d738a28a24f1e3f5e4e273a726dcc0cd9cc672904fc89160c34e9cdccf28e5517a6c1cd2872813ba9a21aa9637a94112fe9ef59854addf199def4bd202799640f7c9aed55d65fface0b090ddbfd2514f08da83bbeb304c7d4fcdee74411f890d51671e74a3bf8e30a847332134475c01a2cea8686d8f45e4290234a5e1ccc64ec1087bfcb886ec0dff569963ff0b0531ab38deb0967b81e2536ab8ac471817ce3ebfde93e8350ed52c41b750bb4f23459932bd5e91176f8dd1bf17126038e052b6042d20be8ccf680e19fb38e8d2b7e50814a90567512189cc9d77f21f3ee3cff3fd4be6a37c5053d5f4452a98ed9a2279d95596a56176d12c577fd2443849f6b32ae8cfa5f7c8304c8d48600ef0769a47066261ea8f5a7593054207626ab99f34f263a4bbe164f78e0e7d842b79c4be5a4e738d9182fda4f716b01bdef7c4a2006a805c2eef5cc62719f7e43a968b30abf68e65addc7d9331fa8b2e1319f3c0a29e5624eefd8809670d7589f1036f1a6428b7524dcd5bf1124164a12de41a2ae5841b422a360f542c3950f2ace2272328ce8ac703add0fcea9bcfa88101f90033d5da293d5a853bfb9a56d9e5d785e88b0c7cd78982575901f29601547d0bf5759323e593d67292221f8010619310bc7f59d942ff4bc99882fca92b04294485affae53bb3dc2b8db7f20cef5298001cfdf5d42407bb60deb8241a6a5fcf50a6d15e668f07e529e59aa574a29944712b1ddae251d69ff5bde04dde55ce67323220a32468eaea73bfc57f4b4da38fa8910cbd062c2cce58d39885820d2688914e15cdb9dc7f32426d8f0f79219936736cbee9517e4b3fa30ed62ba0dbeeb7826b1973e2ce31fa2ad72f28e1cafdb1613fe551a19f8385823702a78bdff81c282c3c72c5118cfe4dd9fe763caeccd3955f8de7937a80bfe22be756efb9cb79b692e4034e5092331ac650c908b284cc6355540e8052ca4cb3c46e518548ec4f549aa4d94d82afbf63c5e0f91c3c7cd76d0d9139c40486bd9667d4c1b0fc6ff61a144a6c4ddd4ad595543e3797293a5a6f9d6847397063b1ece1006f3c68d426a1be52151360fd3569ced49dbb44afc7e9d8a8e5e655a282d33e7f4e122e277bf405de079f28daf3107a347473a190c51c415f54f7f8a1a314d0e4ca259935ff9f2c76a8402b7f3e042c7851256dbf5912cf868e7f08959048e3b577fa4409d0ffe3ac5d8561849f4250ce3dabb33f5fb4189ea5c6cbca9af47d04f689ef33c3503f4870a4dcb27a188baf2ff76930900da0eabe02eaa5e3a9ac2f6121c4da6133003d2b0d70be6d031caaf5f9dee9a5db9b33065cb9aeca61b31f060df585ee1c7c9b2bbff92e1f3b9c2641e2856405a96f9ba295bc76c2433992e251b0a699e323498c74d7d45ecca5c257fab6135aed7ed6e0f3f6a1628c4883b70c19c282d5e0f74013f82229dd87ea52b1a76239306189e9329d5657ade82365dcf71d84a91e5ff1dd657bd3d0db2100c2756a305dbbf574553427546cdaf6ea692fb0bdbd22f43f43f626a1fed9f8c0e7d933bf46c7b7e2009df10b0b51c7ef40052239612223be0661648ad62b31cebcb3ef0d35ced3438621a15bd005060f9463478c458c45e49149472877eec630863f2ea0d01d52f6e2c425d042927f3837f31218484fc675e22cbd86d71b4333a997dfd75dd9ccf8ef2fcc1838628326f86431f124da317a408e6ee3c0282fe66128e89f186019f9ab685d90b4f73d36fe0bbe35c04700e7dfa46f272a917fbfc46db586927ea80dc3309e71539269a802c123f34d67d30efc7525b15fc589dc39f6a22fe704f1835b309dab858b4bd18a2386478206b00895a3780b4d15802e54ca66b1ca009b5de9500fede7bcdba109d78b56602e8973ac81eade618129d4fde6c3ca9ceceb0f0f01529da8a32174226cc94980e2258b183c48d5098ca7c6781d50b6e66f8f2819b382f0ba9b22350bb32ef451de380f33534bca1f7f8093c685aaed4cf68e65315cbfbee2c3f919176bbfffec4ff8918f8e4e7480ce820812b40a7c3dcb2fa1e75bc50a7b4c6530e5326133e5f4de5f266896ab2f42a76bd27b9276ed4766ccfda7e996d19c147cc79abdf1d7fb7eac8f87f9908408d0b7c90a4dc2606fd02c30f63a7276de841c558c65f4e958ba26039466c9c51146bcf209c8be5138e1bbd6057b9d0ddd099035e671269f529085c285ec24b379d80c739487d905975487a6ab6cbe9b1098b1a9f426cb8e946a94fcf7a933bf26d27d92832f7319caa886ef2a6733bd13aa939989520ca7258634ae95babb1e3999708c5edb12b0f818e5c467349bfd988bd9a0f546821dd91547dde28c328a015e674db96a15a4e0f8d42235eaa762d14827d8abf4b1387fc6de8d7d504ff10d705de2ec3e163c92f863c9698a5dea74647d395ca9cb7f7a3e301c6067f5c858f5516eb6b6d7b5d0ca122926142b8215c14a65b9ccd4099c806f818b8b9c8317ce3d873dcf430809aad4b80d783cc17d5ce55f9b30ff5e45f94c434f5d2f286132bc2aa2bfdd4bf06517c04bdd43a04d403b78fc2a5526505833491f674801d49f2539fb9b2d5ca136ec629ea1d11134b81feb56b7fce8bfe486d85f1c07a8193e883738cc97859330c4f4d20516e4a069ce5c376daf5b8333a8bccb5422215d5bfbf3d841b4d6b99f493fc0190927dea264c9be506a58edc69327e90484a7944345a205ea9b952ac0de9a5af8fed511cb403ab7c5b56f05be8c60a80363cdfc9a78cbfc3615cd40d5226d6f8bde5e60255aadf4364eddee1e0a35d8e1d0df52769480a4db108938c6f4277b9014ae6cc51483b0d494c1ab1bf0abe5944cb920e2478602c0a79fd3f327b808748d9be9858fa8afc48ba02bda9ab7345199df5c494d33f6cf98278d12951357382ae4bd68afad824f543108f4a4286e2d04be217f67ec567315606b7060016bb7555ca6b03183081843adb6769c495f92bd746372db5f7c04fc6eec71960cc82b00f1caa4aa6e090f7830ccc99ed7766956460563314f44a247b55d3aa288256f65f1ea10c49dc96ef4430f057431f28534c7045096325aa297b402758dac14c5fcaad0d28a19fee651b5d4f5faa0c3c72b4530755ec2afd34f8fc8e11eae78fcf27fec75938f62cfc76c21380cb96482b5e961526c119177c2947eca4d9a6c316ba25f307eea082d60ed46b5d244b7136b1e7a7513b0e9b321cd4e8e191bb481196610bb8d8494cc9baaacf6215301947e83ecfaee55916cf7415657b2e7fedad9830a82d797facc93c0a4a2d0a36c8e659bd6f85ce812d54c6f66ed2e122cd58a887e4a9e50a55a594cbd3e8d311654c620af356c50803fd0e8a15b90c424d82f8a8378baaab57b5e0a45e38ec613ef543d333a5f43237e5eda773b9a2ba12c68139f8f0e320a86f57c779768d9b7fa0aecb87af2e69cc6df798a8df91b6fa23a391930ca647a5ac2d6db738781d7919077e9ba7de7a224218fb8c82c1d3a58698ae64859aff3d8884b247e34d59c9da7e72928754ccd18c6145b40411a0e237b42569fa51b69f006e2acc29c4109aa5f08197ded4bdfcff02eaee0daf99a23ed4b2d874612616a8fbbee8c891d560afce89af293062e4bd9483a0bd426e7787476e70d1ddffb87026f10ea9c4af50ed6e31c6387349d133f9130096bb1cca7b009b7c6c41e97949270613eba3b7b9407fed24bf9fc0755a8fb48c269bdc896cc63394765e4c58e767009d3069f4ec91358253a8b5013318bbad01b2df6b8d8065e67357c1d7c49316dc57346b18d3f7f030fad9f1e86aa07822d27243b370b2d05bf382ddcafe4e4d56883dc5f08361465817b40c2ea9f7589f078b8c461d509c81244673b4837093c91eedafc6f68c3b8f3460bc4f533cf36d3ec9fdb1c769bfb0a3d53e9ebe0835ac683c54a46813985996b7aba4ce77aa1996ac74378e212f49d8758adf3e480b63c45c5a224d25756b569b702453b1b958797f4774da8c89c724f91f81ed353cf7fe6c43269d519ec160f79ba397dd745db6d457c31303bc9a9c235e88d933f9c60c859f5a35f2a9bc8be639ef3c6872c352d8361cca8e972d3ddaa0726a65c6f325f1e371d3ff81d5721727fe6c423afa31d5a71f3992fcc86ea60bdb0ec4c1d4f5a4b9178825aa45eb32724cb7377cb801601f3769a5e839699853d2a666c4f01d95cb8b47a21dcf726630ed0de95da60ee1374ac1f95688e548f01565645f738109449f9d93e926a8cbcae24a74f2db4bff286be4184c50b0c4fd86f4e3f25c5f8d29d31e23392a3a73653c05f0656b912c5258defc9437e11ef9d08e8f29376d1896f3ba232bd864554a4a0503a21339b14b175f53c5f0e1e38f34bc190dd54cd6975f67a1c1f82d8ed88c895d729e6f78a162aa3767fcc89573103c0b2780f33a4e73dd48cf9c1a269458219c44824c93d462c1cbe3b382d52faa8a358559491baefeaa809cdf49c391264e67acc247a508817ae919ea8607f151a9f28cfcf0444d26cda25c0b6f2d6a604d1e64a74688704e07c6c6a362c3ccc9dba7778b4ab2abe862e7fc4222d0542c57c27bfbad8d20cd717750d265e90a177913988c5fb2820a8cb96004a686269a8acb318ea177a99d7ad4ffbd4333d6d1d17ff5b99355cf5c5ca82d9cff8de266acf15290a02ec57ea88af3486a31038ec754b44b9b5bb669b795e9f49d839f681b8c47a0d2d9da4c369e99120288c52fd6692df208a6f32b9311eb070382e94c59ccf27f1930506b74b039aac29c14e81a22738c6c15fc4f6831004ce966ec4b9a157eb80517e11bec8d5bed398b947afa695db75073daeca366efb001468b367bdab6b538eeae9da903de865ad16db331c8312c691c60061553d14beea18fe4bf0f40cf46f3fb723400e2a1f1df378b831e0b754972fdccea4d02e02861f3b1bde8ca593c07b7fb85ebcff6279f99fff6ac629ae88fcdb1b4e2a96cbc1e1c222e9b030d9b82f830caedcce7acd985898b80069b15904a5616097cfad4c8bc8776c67b7c40899e8e8a1c196e9e531da9e3e3e4a5c6f6b16abab90dbb5094cbc53818fe0878285f20d65a971c2c6aff47a0e7dcd3dc752a1af2a1c5458812416e0c54b41ff6574f7003bb86f02c3959041450c729cbb4fc183b3c265e139d1878793eff6790d6b83e39af07652e10e550563b2dab726ace02374d35c5eaaf9af60e1e12406a2666e81264171ca35e0562ab82d2d789d00845133013b883f6c2d69844bd12981d188a3f5991786c743629a6458b245aa37e874ff8d1b022d053ca329cd2e150341cf29f28649fb4f388d50461d06971d2888dad0f15aa81cd96a4b4f34469f388e23022059f1562fbb333db8839f00392fa775d993fa50005debbd129ac1ea7ebee1843a8af22881585600db6184531b4d10f47e960a85db309ecc1a534766ec9ac212890854dc6d28fdc447aaf27ef92031214c469725108a00937cffac31e6328e1326d1c87a94d9108b9785ad6bc668d63c9b89c3434b0787323c285f1b7dc61ea03401f7594248b91fcfd3d648dc952d13776717655557030b27197a847394b643a98884d276c5bbfad7fd80f2d9184700adcf1f6093001ec5d1f35fabde785876bec85b4d7f7936110a9bf7bf308d12233d061b99d6a08a47e14c546e2c95c7f3ea1612c28d95f955cca5cd5410af3f456ccd9a7df3ad0bb80186654603254a1c7e05cddc51b391419c5c7501bf1943d676e3e557c367e5c1e8c34c0f3ca72b0096fbaef47ce5df99b147ced2e4993ecd75540101c30fdb79080e7c580da99a1c888a5bb2a0a9d61202bf3b5a44fafe2dc573ade0baf42a64a07b610339ca0dedd3e6b05ef41364d622754828b192fd65afdd75b2426c90c3fe3ff8f6f8029bbcc63b2ae844f8421c54dbc6787b055c605ecb196d98d838b23585853ffa9e533280b0feffc0b0025aac8a50c3af68d9c046dd9c1eb42806f648ad80ca494bbbc3354a74fd64bcba38c743c66b14456517677594037fdec0e43c87c4343c451fda21e07b24b1dd889180d9e963615f28ae056ed4bc7965ac9d6fa5e499bec7896d73f4936e06622aa7476b8ed21479a496a9952a86f2fc0e8ac46512eb39644da2580594d8b9052405d621d9375c1a1c694e59ff699ee9ab6cb3f0779945a3e45bc5ddf0de4205109e6ecdcbcf518ee6527e7ee8c05352ba41b8f64918143c8c8e9b5152f226c1655444e84db751ac0fdb63da0fab4954934f93f47c55c5308d4e4aaa5fd919251ab7a950f16fc38600e4c0432084f9a20de7f63c283002739ed03bffc972a9e2eb5175fb8e04c11cae0284822a7227d541a4ffac2a607e69f812d2bd23ef903a52a842e48a9f875604124ea762006ca43f96a326540055d9d32dfeafa986950d169f6279ffeee99cba0279ff1313a5d518d2f96eef7259cd3d22c0017c95ab1ec2f06a6f8b09a06911b41dad4c6efb06a7a7b7686c86c9057c645adc5c85f954f6d3d892ff5148c4d1e66972c8107c5bd6bd3dc691b037aec189a165300efd1798ed882278111d54b0d68c53f493be8c85b8ccdc8c9e09e097ef605d4e3c2b3b7e87c58adecc18cde1933587b185c6ad46a9bfdc84678262fff7a8b94ebd131b25ac5c5b9686d0697733c66e1f2ca557996b362cdeaed7813cbd3bd18bd2ee2e3f977f51dfe5827f3aea816cfd057041b8cad224fb25276088ee722058e6c8f84343a4392136d1e7d97a6c89975970a3753e3137d428af4f696778446983aaa4de604b5fff35f3c949128255a86377be310725d3f2f6db6b3479cb413209245644e1608232c8304d6d7e5877fc13f5246cbee7f6f6e18cbf4e40f02e639912daac5812aec33fd1510ae2fa695b03a8c54b7538ebb8e926f3e5988575a22d9a01437a7a4273fbfe105cff69a8658cca193013e306557748414796c115eb51fed30dcfd856fdadbb5ac2fdab5a5f74441865e16d9ea0bf10d967f3a7296a3ee322d951d31c034c9e920e67d674ccb1325af0c5c39209b0b128fbe06b10a2cbff823b62dd2793eb33b2ad1cd58f32a42c871c19fbe060607f3da7873dcdedac853c189089bf2713a2d6bb87ea9e71861997ad984912b51ed258d5ee54609f644e6cbb5ee52c5a313db9801d7906e94f527476c88d6b7b0034c4796ca5db7ce15582b3a9ec32e22fa4eea41595cbe306dcabef75c2c3e1d600f827fd6f3061361a1b64403d7abdda0be2cfe5c6a1e31282204e91574afb876598521349cd0387dc8590952c09d2ff6ca0a90be8028f42d98555aa8b7260a4cdd94c5dec462689167f11a496cbbae3352d925efa8485b5176c134b207f04f031669be79d986a2fb1226dbc0a2c804f2ba61cd077e64683e190d13aedc467915df66f87bbc0327e5d3838a307374b89ec840cfe86d28ed355c0112cca5937cfb4ef94ce7ce575ac819aa7657cabd719994e05b75ad45cd45b59b78eeeb95f03deea1ea2a986c26fe2fef89f5d0ab10f97b50f351ef95e79ff052a67ac02c20678809f204ca6799b8d2f8778b66168628a2f06cca334c0cff286d5fa78eb6fd1373330963c6f1609d139afc53a471159cec4d6f3ee5e58d96bd81028c1ae3d562a9fa0cd979fabf4909f96b88f233e19aef609b965769542e7a5ccb9f0fca104fc774bff4614b5a054b5a0bb45f07df975da8b23b71031231eed5d2f797aa0690fb995e2c85f999faa0569653237191edaceea5763824ec4ec1ffa4f972cf12b54e56a75753a63573772517d473404576c85ecc6594ffc3b4d75518971503a5670c418c0284961a3635a53ca1b00c191e67d194e77e4b0ca199eb8cadffccc7bddf4ea9292bb2e35a1b252cfb5971ee429acb0c4a088f2d6c6146801a2c0249da74b5375e395071ab9ae2b163174093015e48d8ddfb1ecc5bd741fc59b7ddb1c56dfc3e0cdd1a468189b797391fd0e88f4b6a5f9f3ab8d9f333028bf67d9036c82c2a5f5d8dde30bfc95c2c7820ba0bccd7c3b267c0b6fd62a83ab6a56d2dc9fddab3ccef4fc0315379692b1f0c8777d29f94da563f36226c1c940b7086bbc0358b79492dc93d2bda452eed676f5a3132c5937b587d7462dcb2f88252ebfc353b5c6ccccbca1c84db34954f460effcce75944bbbe43bef93d2c27e6ebe2150fb8dae4b176d0740c24ac9d0fbf6010342a06265d0f906097a27969387a7ce5ba111bc111f5bef83f92cf9c968d31d43a43976dca37c8525450a7ee405f5cf43171135da4734115c63b1974299cfa725b5ccca075031ea1ba6346382e83e43f9c839217b6372b805cc7a37b53da189925209409576bca18dcc31e8eb4e65545693ad0fa909a04350e851de46b02160e015dceb7de2be5955a54eed42ee59520724b9936b14ad4cb2f36fdc36f33ce45d292ab15632f346a955cf849361f36c458486359065139724899c484efb6c49c7ef07fd6371b32d51c51266cf9103f46df030deb396fae20880a197c0aeda412f105b1729d9b419bb2147ef9ae1e947073ce9609d3206213458d3c4d53f0f7f639fd0c8691bfeaeb2894f00312b1be270f073ca1a92c0200c6a15a00ce534a717c319c542e20348bb72f5f3225243efb2a64ae8c85ee70a6ddabfb0bf5415c1b7949152f1fa510dae6dd15becd364fec6d1221e912815c395829c9233a8e37554305f1b986e4c3e899993ed60e0d0436353bc461dddac32963312a020ea0f6abe7137e54614ad4ba99aa7080017cfda601868938fdf4233657cddb08d6e2ca1612027689ec8124e84e03fc6a619c1105589ea797c1a66043b66fcf7ce641c1c5a4019eada11bb990b88bc0d40d48699f919ef14406c1a57309ca3b445ece880eec4c9c2cf20fb2f45f66ddeab2797544ba0a5262ff5cdc9b6435195734e1b8e951cdc79ec5ebf4b544e35289db3442fb1e3e858324f00c211772a59f2a34ebcd7582c7d8c8f3b0f49c277493fb0e597748b84bcd584dbf2dfa551bc5066a5666bfc4249af24f9cb98017e3ff5d1f76235d318c8445d52381d1f41c6c7911a4c63ffffdaefceed2c912be03295a5b4e0356d64cc21f94c23901d6364a8372cdcd2325a3f94ca791381941dfbafa6ffaf2a1f616177886c510c2690c90bb422f49a29b988b6f51f2c1ecba8fd449f6d935497528d2531d6e2e1b581727004955bcbd9275b4c3779104a6c5191cae04773d2c6c99d7ae03969c3ffaa7a3b83815aa06bae5fce930dfc86bc59fd91b7ba89e59fcd2640f458523e3b5e1275f459c637145e091d91331e36fb779a2db95b9f9a34aae92e51f17bc9a77bf881e3fe6e06e1cabf816b101594b57b66315eace48bfdfdfef59309fc39331857af9e6f7d0683d05b80bdc944d80d947d73b0be42595f68470ac318dbe3c4f9ba6868d24ffe4b7507b03a0eab7c01f1c4809450ebeb891615590a733841c47fced16ddb9ebb5652e9438b3b8ecb4dcb1ae0b566be3af64a46d7c521da6298e377aac025f700f8e235477c78f329c06e134e715d42a86e89ecff97ef754c69873dc8fd99caa46d6ee567bdf161705c3ab09ffc27531f696631ebf4532dee08d0531f9d9339ea8cfea68c6d5684e34b9ccf1a20cc8d83cdd5edf1b505880857fef98b63b008734a5d45b5cc862ec0bca0459adc9dd991b5484b81281f6153c5397993821e877a6fc04b777e2c5a4f8b39cbbd27e332b09c62d1d0e20a1683a44b7afa26d6799c5d44158e367e1668049b5560153eb039b1b9761fd02aa053bff1d544ebe93ecc610c7ce8cef1157edc8c7c1c53ba2170ce6ebacf2d98e5e108f538d930bba51c418f334fadf7315b92f81c391001c9d8e52f7822d0c41c1a54e610ff7903ce0d486cebaceb4df2943c4c8aef3d8e054d374a45713099ccda8f1eef2038cbcdcdb7f17599c9ce438e752ddcf9eb72602fb4ef001961ca6f9ddf82f0a5927892164d9a0e9d783a930e5688be57190306a58e7c47922680497130f946035ff7f8f90aac0ea5f73d936ba70c6af0bd60f334b5decc502ba23c2e6dd5d5da1b09047e320f256ae5e391799b5576ad3d56ee98063c3f7827fb9378eb76feea1c68ddb8c7f559cebeb1cc5e5f09f10992ac3e2baeb5cd7540d6f23b01275d79c1a3c6f64c30fee3cfdd23edebc81a53d514dbaed87a6c213a4bb9dec8c264a61421e6f819114b1fbcbe8d9a941e529258c1537a19dbb7cd634f0dcc0a8ae636c2d7f606ad5be87f7b3d02e6e6938316534d4ba60eeba6d3a1198f1be782505a2ee4720b77d279a2982b07c752acde7e5a52ebc7336684966d22f0ded1bc25bbdd783ea56f40a13549c291fbafefa1016f7a3ae3b7acb4987b12324799601f31e6f2f8b1716498bedcfc43cb73e2bcbb0dcadccab44033308ae72d2e1d236d7f28ce618b9bc984af50624b0826836d674c59ca39cc5339259e825e97e2bb182a048684097b297cf55fedade5744bbe742108e6c7edbc1c933c5531a1bb806d782e931ccb5ebbf4f7d891160566b78bd3e75f0681e5dd3c2eeabcf38e36cb5df5c443b71e237c5309a774ebaebc8e0a01bae6664170a2c943c937d9c950fdce74249c124bbf224eb41665550323a9def310adcf15faf9a3c570c980ffa41c857f96fb52d4e7bf84212607e43ae79b33054eb57d1b297a6a17102648cf002e63b38e694814c1f99ea967a85699eb85388c27531a2118dfd973a2746c919dbf2dfcfe87445d35046fbb1b7be912a395dd5d0548fa58f676dafd845adcab959e6487c234c6550b5646ac2f33178361982705ee5372e8fd973c68a6a511b946900244783d2f2e245db6a1009eac2da075992361b535282d92e118cb63c54d4d1b872f26af4073930be70b3a8800bf2dd10762245cb0238cd0d74dba75b123b5262905f136a59427a04609299df5a542710bfffc619c10cb6ac1391d4dee7e32fba0b96edbdeb61139d1d9e7a4635411b37cfca67f411b45f9fc9fe057d6b591dd5ad32e8afd8cb64c9f4fe9a4e454e8de43fb8be76149d2aafa15de0c5b6ec5376e0178ac754c5f8b9e3e20c214ec84534671835f75bea32e7a7ced485c7305f72a83155563b9a10f32ce67aef0ce9dafdb1b6f73391a9970879c3013dcd43a2100ea9d2103b7a8d20bc9de113f8639b9ddb9213da1b39e7be15a1757963a2bef79478ba2bc74d53cd7cc3e9d616e56650c7f20ef8957d5bf78e06854d17404712cf7760f80929b6018af047fecf7296e4ff473b4696526a7d135833f14765914729d669f1b83a1a3c7151cf02ddf32d38238f91b20715e2ed57de9da50de4f041e6df6e1b32e369842417e87f789c30bff355330a84296cf979df060ba257a117479ff949a90d23424d6ff1a13d2c01612a2f13c4b2cce3100164b5d0142a7d73e4286ef65c6943ae677fc71fdba8bace83029bfe58093d976c33d5e357d9f081ac724631a374360f46b02913d2ef20ddf72bddfcf9b181fa08f5d33087596bd66d6e7e7ec97d3c775ad174c95d4cf7269e402613a19daa7d08be055e7d7dedc2121d217668654e9c52c7bc9c2b51420d881b66d3ac22556983c4337945b80729825abac200616097af9c20786655a2b287bb7482e731f935e248076d97104617b0991c441e45617d6f735a67a8a69e1154c126ab0db4bdd6ac3c380d50b38d65465563f6f52ea8bb83703f6415357027bef4a141d9bd5ade746e8e569f54ddb599527f7baf3fc9376b9f83f2f38c2dfa2dde37109a8c8dacd5c4668f5c4ac21a1bbe8d3daf5fd7b52b0bf973ef8bb3317050f6f012bdbe69a61621594b7ddf0628263860075e8fddd0fdf82d9f8e75c77bb4b1f8061f248abd020e0325fc71e85b9fce277fa9a5f46d6f4b795d0ee4a7581b5e699e1cd9946ee0ac8152903da9b2d2aafcb62de3e43a3fb2c7c17780cf3366b48354cbcf21342d43da146d7c6e41c6cd5944e001b63e596990683122b33eba164f70f4890f750105909aa78b2ee59414fdc407166f3b8169b6b80c7c529248bc19f68845bce8e20f2a35191421822083b0fa4876c9ee16e1e200c43e7ea6100da1cb5ade709f4f36cf686fae84cfa75ea4495d51a6843c426508054c373420d70ac32bc8cb7537389d26d1f1d102d82a82ddfc545a8aeaab8445dfdecbec3bf3af366a495133c6f57172c9632413acd79505aec61628671b08ea45bae22de59d46f25174d91b8861239fb0ce01c8c5b12ebd3ceca625d1cbe1384485076afb5611e31f70af4efaec174fb29c0e97a3faf289214fc8bfe03ff67be0d258f906f9bce8e1b5ba7509896bbba6703d5a2b8fb47e72b7e14adca8dff8a0b3595cdb582cb6bee6423a002efd74a69cdd682bf57ecfb897984dfc16852bfd7b15d7ec763e54dd4474f43fafbc00634b65b725d407c39bee20d96aaf83c31b3546da115a420fdbdeb16d7c7923ef875e800cb52688be4e3f55e346e761e2552e7e686d08189169d1aff9f670f69117e5d5162e4d1d91a160b2d7d10e0124a652e41cca432ec98c1be9365fd0c4f653399c41a17404fc38063377613179def45837895534a52fc94ad6035fa61fff384c095aa240b0e10df96b06a0aa17636a9285460b5a65e082d8794d4699a14d47a9e284d4c954dc3f8cd01b71f76e8ff73a0dace0453ef77fe18286040358db129f7daf87c40ee466c7f2e03970418ea2d075ea67b02eb3ff3b622f1b06a0be08ccdf470685c7092ca30611493cced872a11c09fb451d79937881b1ab8b83b55140ce3d6f59f8bc93702e917e9111709f370a1eed5945a04069b4d79847d54aec60e024b84be57361bcaff73f09bc620906033ad6b3d54b2e419ce5d6392e3d9b73ed8d6a32deae73966d8d09113783b67156145aeabca99db7f9a8a19f32b1604de7a98b3df55e7e93f8c700ddbe83ee35ced98b960cd764d0fc23f76d113dfd82842ce9d467ed56a432f1e57ddcc87f1bdb7b2b528ee8b779dcc6ac439d5bb79b9ef64b5a2feda5403673dd4187bf31ca376a6bdf1164a897e5f3b4a26b1ad9dd67d31b73157e7ffaedc6d453f1677e24d08326942251b0eef3846f365718d82137b01e01963983115f09cb44db119a14052d6d48e171d7ef023b189f42eecbbd5467cf8884abc826092ffb84acbabe12545599095d8ca61b551231246d69c3d7f620df65151cd6d45f461c501d7b60176cc9ad4cc523ddd935a048e59333798760b5e4e760d2d0b73f38ded70ed8971e9940145360540b34ebe7de8209f156a1ec12b9e20cbed0722cae49143d657915fc1537293fbc0f171f84da1fa3ab387a39c4bbf1b84a03f02abffc7c9abe35e83d9329d38429afd2623e87cf7e776f96237426b5f9693e48444965ec5f16038b4909e03b9b5d691c0b4ef2545249502462b2b3bd3181ea75a751d687c600117b7ffab1773fb318a27483ab9c32ed3acf05ff928ab40b0d65e0154568b3e8ca55c2f9ae71f51c9f492aa1bf5d68ab791ae72f491c122ba6b53c1b35df1e5e15706f94b6a9b593934d31069bd71d9050dc613a22d4449918772f0f2b45d28074403b7ecf073d4d631ca0d45ce938759e95ec287dea02fd8c40934779006ada501ffa5e831ebbf24351a51d62f9356a3938268d383835786f63a0c4c034483c0e112da89aa4a36170c6f10e3d8575c841f4115812773253b903c9c5df3633945779533bed11e100969691987970b121c5bba4bcb288d04b004f618e239e7134a140fdfffb029d967571c516e26e84df233cf2bc39500eb58b4dabf56c2c1e602d618f52eb6b1a45f0222a3a084f7041e9532b8e253d85ed1fa8ad96a912ac4a0c44b404cc5133e25d2c5fb7fcc972226305efa710875a27b28412a64b681948ddaf3d3a63c403105374cf6ac0010beec3b8bac1d48876f7de4d134b40cf6ff3a59154adee9bb37b1a0bf1c3d35aa581b3ab84af7f2c9a68bb9958690c0dce531159330bd7c5a100284eb74803b96e286f90612d178e022ae1fb961bacdad02823d1c92769f35fb10cc84bb0ad7f5ba5f715c69526f36076fd7a654e80a9911ac98e4ee0597682892ef468579c7f9a5781295b5c8ca7fb705f72d70a635b86237053c1d5ff279433b1c04436e97fb0b08bc388876e3da8103cb8d0e479eb8eaccd14de803b55903f8faf9cfd0970930294a362cd897b036c6351158496485ca9f05a682729861592bb598a7eb6ba8cbfa2b3550528d0d6493d682cc671acc91919fe6390304ea14667f9d11fa44308afb1b2b13ddc3523360ca28ddd40c96e0fa6e665160d957a0b969d8c19dd9b3da7aa02903c638791dad66c42adb956021ac66c4ad1a8240230ae1a29d06f2c7cfa1bb233734a49ab6365b18e8093c627691df381aa298bc90d16b3f90cb1d26e70f84ef568e01512df53fc89f187cad5d1388d1dedbdf6118264c7cacd64453c7cafabd142f9705d1389f3340dff68017671c8afb7996dc21972e90a95c49bfa1410674e8957b85cdc1084d298511034815bd1a5bb21f78451149b9072c586bce43445e450334d2883b2e973102e44d1dcc88e6cd0328ede6ebaaf86c6ab01f22aebed66fb6e24f24f9cb9bfa689b75506f02f9b8c22c30a602531510a312d4ea604371711c1de22b8d3c2095252e6530a1f988abc1210685bea7e4ef66bd907a8dc6d1d7524dacc4ca28850092ea3d4849415f759b2d7a7433aa7e59ede045698c557eecd2a1119bc72d15d97ca79ad636fb7de15466c0bbc682a4d51d506ddda8f752fc4e922c8742acb44a2e6392ecfcb92c2ae19753c0cf66e4ef979c89ba31cb86dda9db80dfd08a79b1c75d4efe9ee3bacf13350f5b24fe40cf349bf422632dc1f80c0d2b0798d0ee49699f2b0fe3919ea2da5766522bf7fa199d92e415b48f1b92706bed299cf0a3e6296be7002a0877de628cb4010f59ea2b241f34d2d4eede458e9fc2cb2b2bb70652c4628ee52ef9b5f0e740fb0ae7eb4e9e30076985145a8d10dc88210ef593a4effdcacb8ac63df899b9ef25b198014335f946935448ae8751d3762f016cf70f464a47dcad7bc5f91e6c0a5bc4aece4e72c287adf39c494b006222cc65324c487ec16dd17d5e587bb88b84648036bf5a4ffba1e7d89827406f7f51ff939c231298359260071c619f5135933f7908b5d571823fb4985bf787a05b252eb88ec7c61b2094dfec81e3f98cd4f5ad3126e3e766d830890322c65d59cc63009f3876f9305af0fa177cf5472fc0269a02eda52133ea48e2599800918de7eb7261224bd24b716a5e29452ee448bcf073dce3f35b67d6785b486914f06153052e2c3201f76d465996e1d07951a0008dd64a344a51275691f71781ea2523b1bc1d8f923bce0ebf7f08b092f43519b0d1e98b8a9a62c52492ef00a06da8ed036a9254ea83b571c09fbd43ab4d2b191a40a47f0f9c3413cbd8c0f18e1023ab0acf05a41bb7f4584408db8fa1c9604accb67a6aa22271d154c0db41d50d9ad3dedf63d52a6e8f7db915f18e3dcefd8d1b9a831615719494c3bb0e62cac12dc8589c726d5c09dbb6bee80e903f1626149a675d67412bd11d5aa8a36fc73cfd8db582a89eb38118861f7bbeb8afe5e64478018203bf0aaed3f310a3c776e0d6f1fefef2c673541fa9ebfb4aa2eb69c35359e2c5714379f24f15ebea3a119c4bc223d7bdf584d2664070ee9776a109e613b5c7687c952a6d6b013ed03ea864b8ce10579cb3c9305c9d8eb62bcba60f8ceb4fb59ff310222327faaf8d5a6cd44b91e16021b5fe3ef3aa451f7f483c7580760ac4ad66899e7f9cfcabbfcc49fbcc4e362af0e3d613a44d57a94de4160944daf1174959e98e8b5c1555d0719b814af4a4ebdf65ae063d07da7382912454e12cbf0ebcc81a467012199ab8db171b6bc90cb36b3b35a12c1c2e9ea59f9bd2bb63fdde715bed8fff51ad054d810a753cf15d3e9b7a26af6ffc117c13be4b079369a94cada0e11c75121ab6f6d7cd25a7b7c666e81adc8362904672991b96e8585564ea8e0e74566390394407405dbba3ad03df209c6043fac6287439c6d2549585c7bb28e3037317ca63ea032c70934f4237f0d80a2051954be678c452bf947ec0637949d3f9346a1ba7919365e26c42c7810ccd2bc1dbb8aa46f74112d46cb20263db24361ac9f2b53e05dca2caa21d7618ca67696a976fa90a7aa851ab84b5d89238b67c0ee86da6eebe05ea8d98145029aa409fa3338f64fd1552c0e39ceca2993f312d18c803a41056e259b1d2eaf28f6e4eb001459a72e6f389d895e6ed3f5670dae767a4cda054b55306b81aedad39af2418883530fae30ca3f4141700aa43726723c9209ded46d1aa04dee6c4182fe26732453ad4d8d7d7f9475cb1bea3cf5758900b2824e247285415b46da43d346945ae7b2d138d21b115b979ade3c14b76a81b9fe442a05d7bfbc05758cd94a76b9e6bc737c981400c47e1e563ab5e850ce1870e9c7202e1cdc3fa7f9a7b3039d9c84642b83f3bfc5446fb73360282936027fce00f361e9771a3f161688e0bce388435a04067df18da94ccded767cca7cccb7dd407f7cef0f48f6034124a5880ae84a8fa4c7f59b1b8b02edf96c30a55a22d413fc8cb45a430225b536fc21ab70948e85b6abe15654d62f12fa4b83c16190bd1e6ce748874072118aef57808d19ccec1bee579ceae0374a74aa5b254c90ec7064ae40a638b6c981f17a99c0b53beb3853443bdcb62a86e5b704a0c9d07915f96d1461f71fa55908e98d0efbe4908dd6b6e4dae8ca95c74723ba00b010b72f0260ad667eea0b268d50f56d703cda6a1fbfdce2a5b38937f60288431d883b642237051bbe3c0796c98dbcb777bef5bd9860e5393da5af5b0ae585f89fe5aa9c07c894a756d9332eda3f432fa68f1b3b25845b91ad9b8a2176ec252a44e090dc0bdb1b1d2be3386be9116b1a754aa434be87ec8c45137fd8f0b665f4e2e44b1e1250c46ebfcba89aa7c83999009b466167ef60b9c8f0144404b5e90530f8b4b63ccf55f926b63882f0e289a812349fe058aef8ce9b329560f23d5595629dedd8af9b101406801d37eef706c0df5c74b51fee35ad39ff054f10fb5098dda854c12ded126566d60814f57927b14437e8117c9456ad54581f3c97fd7e6bb08364f00f4e0188a8011b241a94076ba787ca02716a1b337206d8d50286987e05518088703828766e3a7c53727375ab0631f5f128f16233ebd231c9440cc83a72c6c19f02e0ca8f5f5d24d546f9c37f899f753a5311c47a943951c9a84aeac0179989f0b2e028053a668d7c52fe03a49ea201bbabf483be1a68fb5cbc02e5da7a79feea6432826e89a8d9fe7c48dcbad13e356eb37c29f051a01d3080c18205a7e55f58f532866ce69d7596fb2a1906d92051756686387a6073fb2e902b73405b0db72f68fc9e23d39a400c17436beb5f87d0ba9e10c524b7833a3bf2541b7ab3c32d2daf72b953ef969d8b5cf151121108a0f98a334da713f50a260663ab4773b5ab512c8c83765308c3b55fe87ad57c22845665f5f5e3740ab385fc2a8f51496572fa8b9398ea8193fb0e2a97793ca0f1f15a338904e89b4f673245bf453698e97c543bba88981b19f47d5e5b1842b0c7b7f3b1bca013a1d6abe855224dc88c36359fd8b56de75ec6dd0fcb5fd05c4123c17a3d9ed4818ae4883a2352429846f0d197a9aff71acddd115d2f7c7ff07bf797a7e5fcc58e850ef0f13fc72ebf33935f5b7791e6b2a66fa29f2d2646f1a488dafef4319005a4e2ef7668a6002620cc35963b4cd2be63eea41b2511eaa3a9f1e54c1249d4f68e87d2e2ba7480513a645da6912017849bb3fd740ef7524f87245e28039fa96d565cdb6546c6ae058f3cdc43d993a4c74ebb4de60fd29bb76a128a042016024cfd5da43c314f47f5a81b32f4ee383b0fae6008d9b2f752643bf87016076f2c7a368edb3a492cc4fb0339ab06dd782a8eb9377be96167743ef5dec92f8a769cd01088613548827279c6fdc6bb1f4835b61f26ba3c27be1e7befc06ac59ed609c31a616fbfaa7c6930158ee7a89270d75721e74db36c71642230cf50fa76d065341e4460fe81902513a1d96fa5dec02ed4c0542e5910eef70df572fdac3c9a4473d83db66eb0a445099dc9f8e491e7afd58474936849ee30c8524594ea996007c9253c1c749a9c38c74eac9348218553cd921b7dcbed61bf54422726d4022f6138bea675d846a012e019f345c48e5442861575ea89c8c7eeab0021f4c5d69c7ba354f3a519f164cf531566b0298e77b74f3adcca858a10de5c22dcb6eac7e8fb9e902a697250f6408f088fde60486523f41c75b7b5171cb5dea1ae51615e33dd72eb477e8ff3e61459076e65ed88a5f8980a54f52339cdc8a8a7c0dedeaca285d1851e71e68c63820c0d6e5b887176fe81a94d0d340747494b972c974b8d506e82454558154095549caed6871a4e7ee158de7e31618cff6354c95ca4638de63399308969738ae1dae62e193d9b9d4686ced72d014172d9dc8e74960c585da47998bcda64edf0bb40c18d6721d099b8b893b0e24cc2cb3d67b9cca797c5cad499c7a800fd27eff50a19b44530c99857870d40c07aa47b00375325b5ea6f0b66b9bd62f521c9feaf1b5bdb2664a932554b722d77e6d26185681eacfaea1297d9cf283c6a89fd6261d37e605a33c6f74d38dae507518e9a3fc4bdca7bb30c80aa38cf3a811d91aa9a46e3c0b19a4bf140bfa0ada1e4d5abb88381e3347ac6dc2026dc6a51fdcd85abb5ab266e7694fdb611dd6434d778aaca51a8e9d51124219baf74c79ed37dc2ee57662997f02f1fc7c3909897cb00a96525d2ee145ee3f651480ce0fbbc9f5c2d8b02121a0f27a0f282d3dcacaf489fa0682634e111b5871ddd78190172025c9250b48af2b62795fa125055f26615e080548985ca544249629306def4758092bfd4f14cb1f521482f9c0f866c5916d19520a60055cf047676303ff0c4308a22ec62833c86b1b018fa1a889588f143664f139d39229a988979ea917de6bffc8048e342615281202ea2e6307d886d3c26f6a12f1c10ed0e0160e53f60cfb170aed8cefaa4dde36b4e83fa38f53f5123ed21c77e6f7de5b5c2e765a20fe522a951025d226ef7ad6d39970e8af6ddabae19d3921094f71bf780def2e015b71b408e84c990d8fdaaee2994b1397d6a53dde037192c8f5ba0e4196bae32a3d7577955aa00985aa200ff8766302f7c39d07506859837be70f1819055b20b0dd12a4adc188c2c0a593eb95162ec92287b88f77ae04d80c460ff1cefdd540f0f5fb894ce33bd9b5749ab2d8304aeb0f8e70d47ea4f818be16a13f6f480d8fe52e6066d5f08c655e822aba6eadbb5c92ea5222913118c11104dbd1253b9a6bf1b5acc7aeeab0cc991480be76ffde56dc74e8b163f53836ad35aa434438f0c0d8cc8e8a7a574809021fef3c061cc9b9af6538715c27299807e852033609e2d78fcdeea5c60e9283b827707d7581f325540e57975c2062983a464907c517f773a2fffd6b90bf5caba2e03117e131ebb883a708f4c6243e6edcbff26fdc7a423025bff4d6297f0e98e43e7268267ba6ce0d1d515918f659eb6d320951415ea4f223741c0aff0c03a4fe61a5d4bdd4c98743395a2cbb04a75e7dc3bc43924c3477340fdfb167e3bd94083c590b2a2751462b08c27ec6a00f21bdd2fc743c7245577677c2dac939c3df33a8e4b59805ba8b738d53820dafd9449d53e5ec958bfc30fd37d07e27c4e7d083ed9f0d2741f59f6b8288d406b0fa82d3a0807e911871b5993aca67c498ff1dc6e0d9a253898480023b9f5388cf742212db2b0f74ab53fba022cc4fb4ca74a18246b299f21176f99da0b89096c33e8746f43c3fafe7656e31080141035a18941d8addc84ee29c68e4a2f75a4b3cac6e95469242f1f4ee84570cbd35184c706f18251f9dbb6b23adf11b5b44876a1f70f206ab83bc3a247a77c692926815567408774a5958873ea69de6dcd9064e9b39365dbf73b79ecf0c92386a44681b880b98312500879b1303852c6ddf12cba914983f37aa18a24f8923fde985b5006b2a0f121e971220724e28c62de5c99400bbf275c9c8d0e76e147098af4d44e1fdd342e4f7834ba04f80994a242afb3580e60cc778ef92d179fe7ae4a01e5c52231203cc18e5b60fa9266e6c4e1686eab00e97d692bd2657aa9d79420b6e8708470446f238bfdece2371e9b04602f20c31b2a088e2acf03379e3fa7497bb4ce0faf471d31928413acaaaab4b09a876e529b135064530113d4e7ec064b0cbbc08c4f4c34cfd5fe53a87ac6e9afffb450d6c6862e1799098652ea2e4cc9f274115553b050568cb3f6cef1cf0d4d5daaf3c9c8455955407c938267aede7dd6a9db072101fc2f3dca6a54db500806f28b617f31af71838a4966a9c674470eaf3fe4f4eb874e7f985b5fdc2d926b98a9dfafaa0fef11f016420d06d3794e1a4ec39dcaf7f067dbd49a7c83720022472a51020609ded770f87736aa4a940ad06de250f37e5c39d3ff47d710a4199a929373fed3615e934829609d85097f7eef1b76eeb9fcbdb5d4c65cedf83a2f60bf5bf499268266f80e9b971863821326e27801b6c6fa5e70e68d16e051c82e9d7f108469854d135e051c26f6b368f72d3759f18344b7e99fea7ea12a9435f36101a2284e9e7a5620b580b910887c9625fce8834e31729b0ec0bb32883ec6c03a5fd22e6bff73a4c33bb7c642a8c964147d0452306f22fa65defd52ab9eb2c6b0f78b9282b0a5493cd95590aab6ceb9d8a4f36ac5891286a14d996f2af3104917dbd311620166f14167a80367c5374835206cfe0b0997b036c99235c01d30034d0cd6ba9230f82d2de0132361b5f3426abf0f63fc96f5269a4ddde3d2b3128bcdcb8315337d13eae0029bd3101aec26e45bfa465e43392bf43150ecf5f19ac02623b166c6e848e9889f413a7bb1fa98af71607aeb23b2e4a0ff756dfb66ec23de097991ad4ea5ae99e81837bde513cd5857fd3b6753f1c7e92ddfb39b01c7f2b20fb1eb315507540538151b19e796f39918bc8c3e243ccf8f9c069dd3b03f7973b8e2c34ce8e825d2267b73bec4127fdd09b25cbc0e52ad0888218cb1275c7a1975ece34993fa3a2786ba0b89dfb34b04b0d9a20ee0a813d964b7d15f83add2408f85df081dd9976bdfb40ac142919da42e7953a5fd5bd86e254807d6b4fe3f0214ab840e50568d30c606b4245dfa1458a05a8bea5c11be0d0a7cbadf9f188404ab6293ed28329aa09cce63030825d7051dfcb984d587ae0f2b7810bdbc92e65876797523ad275d3200f2cc7071b1041a8aa2981da715e2de4c14a0cceb71299ebe8802565c53d9ca3de7a437e7a34e1896681f636430e5ab4bb1b7f3f45d62e050a5d19f946fa632f8a2e128d3415be53f4034c56d1331404710364046fa871de180b7a81f3048d48868664d7275159923206ffe06e8eb550e2178d26f375dfd7cd4ecf8bd17ab9591f3e62bba80595f3b29043b3ba3bde3ef43b6bf447657e91b401e7bfd41f750184f7a2115054fd94e78242cf8dea52c8ce3eae8c9abd25f73c3b2c0bfa7303f195f7aa5cfb8f9d86a78c93b4fec21bbf00275e0a6afa7a081360b24a46812e88a8b0da667f9cada02f9285465311009a731c91b88aff2e8756e5fa87ad8668e5acf702d3a8298b6e2bea215970578d5b5d3e2381a79cac315969bc7cc969c47bd08d545d40979a32375c5ac36a5b2b2819b8bf1f0b5470fc522c81b7c5c924a3f654e7434630c94756f034ee793ab96d0d1fbd1135a8938bd0d4daf66067be17f08a31e9bd9ccbe19e3e04f53cca37b6a073a4775c5879316d7eb1841d1fb92e372073e020d902fb375dc28b617423d38ca9932c1dcf8843ac9c7069c8cf967032d8733e3a2265eea791e2a671b85f38a6a236746e3c923a6f48936641470f67037debec22758562140424cbfe2c1b7bdbf642218c01dee435ab4d182c063b442d7dc67e994e65b4bbbfdd79e986e63535cacfa70d0c1029088898e571cbe593e8b3557185aa731af43e1de69228138611a0d1554ffe8d1764cab6e5fe02e743ba32dac51ad4166dcb2a5111ceacfe9dd784526ddb0f212641e1636a970e8eb85bcc2fb8d2716510d5b75686d18fb5d09536324c73150b9fa087f806d14719e20efe47915ee1d424e2cc2d11e45400aa8edc4ea810a556650da00520ddef9b973ed2d88682daf4bc1e4f93b965879d621a4e2f17b29475ab2b021d8d43bba3298f40b4871365a86147912600ac83ef0b0981601985efdc2c8974c1129e6ca4825082d28d5257fd59ae578bc928c3967a1c85e9a9d43d843ea1f96993742550fe5f24d5eb8c9266362bb7ab32a58c3b06587808f69c50d8caa9536e1192b11da98c0a71b62cd9f8f167932352ee9c8a9718314b5890e40efdf4f02e5a49d8ef4c1d7304f9a13bf2e254b96ec569245cf401ce58282ec387bf8c46a371acf89f90bb343bc79b0eb97f2806e94fbd3fad40096055085beab695aabbc7203a1a70bedd1f5b90b919fa00be5b457b2d6d71b97f49565209fd60ab4aefedf5d2496b8beb5ba5220b5e3185febd90c52e1528b37a9ee15c117374a3fbfe7f886ac5c1bc5864a17e9f2f951441cf6b73d8f77e916f6fb6722faedaf292baa5bf76e90734400337c380e64409960d8750493458a9cdc002fed054778948c14204e6f616c7b8cafc65d7af96c4b7127a7a25472869fe8edd174b344e86c33b514f4216c729a87473acea00407995e77d5e6906d59221cc7b19390fc8d4d999876e1abd6cf80142002bab3faac6907bb5b9d0e0ab80bfe9136875e6c2a9e0059fde61f759bef82af5e843ba2ecb92fac2b6cc2aa274888cd14cdbdda5922ba5a76978a28e296239648e9bc16739f0f6c28056f13c35b3879a5ecae87a32ae4a878700affda6e6f32c3d0e08ee66320d8697fcb5a1193d95ed290be4bbe740442c08adacdfadfce7e43765e3e28710af6b0e930cd2268bfbe8d53a6c300d311a9601ca30e778ad9c3eb406c3fb25bd513bfb0a982191dcf9a15063eaa45aa8566de2b50ded3c1c94a40b30ec9164cfdbe0d08db8fc9e6fbba8ec81800aaa18b919f464cd2ae1b350a544eff7a2853670411f4f0ba8c49840681177c223</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀文章 - Android</title>
      <link href="/2025/01/06/nicearticles/"/>
      <url>/2025/01/06/nicearticles/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/386bbb5fa29a">Android卡顿掉帧问题分析之原理篇</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题 - Android</title>
      <link href="/2025/01/06/forinterview/"/>
      <url>/2025/01/06/forinterview/</url>
      
        <content type="html"><![CDATA[<p>APP进程启动流程<br>Activity finish流程<br>WMS addWindow的主要工作<br>介绍一下Task<br>说一下窗口容器树结构<br>WindowToken和WindowState是什么关系<br>Activity界面最终显示出来的整体流程<br>内存增长怎么分析<br>kotlin 协程和线程有什么区别<br>Framework调试怎么加断点</p><p>A是C端，B是S端，<br>问 如何保证 A 知道B 是否存活，，B如何知道 A存活,<br>如果 A死了，B该怎么办？<br>B 死了 A该怎么办？</p><p>‘## 问原理<br>*什么是 Android Binder?<br>Android Binder 是如何实现进程间通信的?<br>Android 为什么采用 Binder 作为主要的的 IPC 机制?<br>Binder 是如何实现仅通过一次拷贝将数据从 A 进程传递给 B 进程的?<br>Binder 的优势是什么?<br>这些都是问 Binder 的基本原理，回答都大同小异。对于应用层开发，99%止步于此，再问就不礼貌了。<br>如果是应聘 Framework 岗位，可能还需要熟悉下面的问题。</p><h2 id="问流程"><a href="#问流程" class="headerlink" title="问流程"></a>问流程</h2><p>说一下进程从ServiceManager获取服务的流程Binder 是如何找到目标服务并唤醒目标进程&#x2F;线程的Android Binder 中的 Proxy 和 Stub 是什么<br>应用该如何获取和添加 Binder 服务?<br>AIDL 是什么?如何使用的?<br>Android Binder 中有哪些组件?工作的流程是什么?<br>无论怎么问，只要把之前讲的 Native 和 Java 层示例程序的源码分析掌握，就可以以不变应万变</p><h2 id="问细节"><a href="#问细节" class="headerlink" title="问细节"></a>问细节</h2><p>了解 mmap 的原理吗?<br>使用 Binder 传输数据的最大限制是多少，被占满后会导致什么问题?<br>Intent 传递大数据限制?<br>binder_proc 结构体中有两个 binder_ref 红黑树，它们的作用是什么?<br>Android APP 进程天生支持Binder通信的原理是什么?<br>AIDL 中的 in out inout oneway 这些关键字的作用是什么?<br>Intent 传递大数据限制?<br>Binder 服务在调用期间抛出了 RuntimeException 异常，服务端会 crash 么?<br>客户端调用 Binder 接口后抛出的 DeadobjectException 是什么意思?<br>Binder 驱动加载过程中有哪些重要的步骤?<br>Binder 的死亡通知机制的作用是什么，它是如何实现的?<br>bindservice 所绑定的”服务概念和 Binder 中的服务 Server 有什么区别?<br>writestrongBinder与readstrongBinder的作用和原理?<br>每个进程最多存在多少个 Binder 线程，这些线程都被占满后会导致什么问题?<br>Binder 驱动什么时候释放缓冲区的内存?<br>为什么使用广播传输 2MB的Bitmap会抛异常，而使用AIDL生成的 Binder 接口传输 Bitmap 就<br>不会抛异常呢?<br>应用进程为什么支持 Binder 通信，直接可以使用四大组件呢?<br>四大组件中常见的 2 个 Binder 服务是?<br>Binder 都有什么主要的协议?Binder 协议中BC 与BR 开头的协议都有什么区别?*A 是 c 端，B 是s 端，问 如何保证 A 知道 8 是否存活，，B 如何知道 A 存活，如果 A 死了，B 该怎么办?B 死了 A 该怎么办?<br>细节就比较见功底了，需要我们从应用到内核层，对 Binder 有非常全面的了解。</p><p>1.invalidate和requestlayout对后续绘制渲染有什么不同?<br>2.为什么View刚被加载时想获取其的宽高,需要view.post(Runnalbe)中获取?3.黄油计划提出的Vsync和三缓冲机制为什可以大大改善Android的交互和流畅度体验?<br>4. Vsync信号是谁发出的?需要App主动请求吗?界面没有变化是否会有Vsync信号?<br>App是否响应Vsync信号取决于什么?<br>5.调用android绘制三部曲(measure、layout和draw)的performTraversals是怎么触发的?<br>6.Android的同步屏障和异步消息是什么，它们如何在渲染机制中发挥作用的?7.SurfaceView°&#x2F;TextureView渲染视频时频繁的刷新界面，为什么U!界面不卡顿?8.android 5.0引入的硬件加速RenderThread是如何提升渲染效率的?指令归类重排序是什么?<br>9.动画可以在RenderThread上执行吗<br>10.使用OpengGLES渲染时进行eglSwapBuffer切换前后台Buffer依赖Vsync信号吗?11.App进程将views树构建为DisplayList给到GPU进行渲染到Surface 上作为BufferQueue°的生产者，SurfaceFlinger是BufferQueue的消费者获取Surface转为layer进行不同layer的合成，那么App进程和SurfaceFlinger进程是如何通信的?12.VSYNC信号是通过什么方式传递?<br>13.整体上介绍下Android绘制渲染流程，App开发者熟悉渲染流程后对于日常开发有什<br>么帮助?</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧</title>
      <link href="/2024/12/21/someskills/"/>
      <url>/2024/12/21/someskills/</url>
      
        <content type="html"><![CDATA[<h2 id="如何一次性删除所有以某关键词结尾的文件"><a href="#如何一次性删除所有以某关键词结尾的文件" class="headerlink" title="如何一次性删除所有以某关键词结尾的文件"></a>如何一次性删除所有以某关键词结尾的文件</h2><blockquote><p>其他类型删除以此类推</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#x27;*.ko&#x27; -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="Git-push报错"><a href="#Git-push报错" class="headerlink" title="Git push报错"></a>Git push报错</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host github.com port 22: Connection refused fatal: Could not read from remote repository.  Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure><p>这个错误表明 Git 无法通过 SSH（端口 22）连接到 GitHub。可能的原因和解决方法如下：</p><h3 id="1-检查-SSH-连接"><a href="#1-检查-SSH-连接" class="headerlink" title="1. 检查 SSH 连接"></a>1. <strong>检查 SSH 连接</strong></h3><p>运行以下命令测试 SSH 连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果连接被拒绝，可能是网络或防火墙问题。</p><h3 id="2-改用-HTTPS-协议"><a href="#2-改用-HTTPS-协议" class="headerlink" title="2. 改用 HTTPS 协议"></a>2. <strong>改用 HTTPS 协议</strong></h3><p>如果 SSH 被屏蔽，可以临时改用 HTTPS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/用户名/仓库名.git</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>（需要输入 GitHub 账号密码或个人访问令牌）</p><h3 id="3-尝试-SSH-端口-443"><a href="#3-尝试-SSH-端口-443" class="headerlink" title="3. 尝试 SSH 端口 443"></a>3. <strong>尝试 SSH 端口 443</strong></h3><p>如果 22 端口被屏蔽，GitHub 也支持通过 443 端口使用 SSH。编辑 <code>~/.ssh/config</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User xxxxqq.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>然后再次测试 SSH 连接。</p><h3 id="4-检查防火墙-代理设置"><a href="#4-检查防火墙-代理设置" class="headerlink" title="4. 检查防火墙&#x2F;代理设置"></a>4. <strong>检查防火墙&#x2F;代理设置</strong></h3><ul><li>确保本地防火墙或公司网络未屏蔽 SSH（端口 22&#x2F;443）</li><li>如果使用代理，需配置 Git 使用代理：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://代理地址:端口</span><br><span class="line">git config --global https.proxy https://代理地址:端口</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-验证-SSH-密钥"><a href="#5-验证-SSH-密钥" class="headerlink" title="5. 验证 SSH 密钥"></a>5. <strong>验证 SSH 密钥</strong></h3><p>确保你的 SSH 密钥已添加到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后将内容粘贴到 GitHub Settings → SSH and GPG keys。</p><h3 id="6-检查仓库是否存在"><a href="#6-检查仓库是否存在" class="headerlink" title="6. 检查仓库是否存在"></a>6. <strong>检查仓库是否存在</strong></h3><p>确认远程仓库地址正确且存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
